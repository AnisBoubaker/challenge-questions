{
    "project_name": "20223_01_08_ExerciceFactorielle",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\tint saisie; \n\tint resultat = 1 ; \n\tint compteur;\n\n\tprintf(\"Saisir la valeur pour le calcul de la factorielle: \");\n\tscanf(\"%d\", &saisie);\n\n\tfor (compteur = 1; compteur <= saisie; compteur++)\n\t{\n\t\tresultat = resultat * compteur; \n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='saisie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='saisie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='resultat',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='resultat',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='compteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='compteur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir la valeur pour le calcul de la factorielle: \"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='saisie',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        For(\n          init=\n            Assignment(\n              op='=',\n              lvalue=\n                ID(\n                  name='compteur',\n                )\n              rvalue=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                ID(\n                  name='compteur',\n                )\n              right=\n                ID(\n                  name='saisie',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='compteur',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='resultat',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        ID(\n                          name='resultat',\n                        )\n                      right=\n                        ID(\n                          name='compteur',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La factorielle de %d est: %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='saisie',\n                )\n              exprs[2]=\n                ID(\n                  name='resultat',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[8]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}