{
    "project_name": "20223_01_21_Tri_suite",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='mon_tableau1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='mon_tableau1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='44',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='55',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[5]=\n                Constant(\n                  type='int',\n                  value='24',\n                )\n              exprs[6]=\n                Constant(\n                  type='int',\n                  value='35',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='mon_tableau2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='mon_tableau2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='44',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='55',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[5]=\n                Constant(\n                  type='int',\n                  value='24',\n                )\n              exprs[6]=\n                Constant(\n                  type='int',\n                  value='35',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='mon_tableau3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='mon_tableau3',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='44',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='55',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[5]=\n                Constant(\n                  type='int',\n                  value='24',\n                )\n              exprs[6]=\n                Constant(\n                  type='int',\n                  value='35',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='mon_tableau4',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='mon_tableau4',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='44',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='55',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[5]=\n                Constant(\n                  type='int',\n                  value='24',\n                )\n              exprs[6]=\n                Constant(\n                  type='int',\n                  value='35',\n                )\n              exprs[7]=\n                Constant(\n                  type='int',\n                  value='17',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Avant le tri: \\\\n\"',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tab',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='tri_insertion',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Apres le tri insertion: \\\\n\"',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tab',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Apres le tri selection: \\\\n\"',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='tri_selection',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau2',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tab',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau2',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La mediane de tab3: %.2lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='mediane_tab',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='mon_tableau3',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='7',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La mediane de tab4: %.2lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='mediane_tab',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='mon_tableau4',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='8',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='tri_insertion',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau4',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tab',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='mon_tableau4',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[17]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "afficher_tab",
            "function_code": "void afficher_tab(int tab[], int taille)\n{\n\tfor (int i = 0; i < taille; i++)\n\t{\n\t\tprintf(\"%d \", tab[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_tab',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_tab',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d \"',\n                        )\n                      exprs[1]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='tab',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\"',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "tri_insertion",
            "function_code": "void tri_insertion(int tab[], int taille)\n{\n\tint i, j, x;\n\n\tfor (i = 1; i < taille; i++)\n\t{\n\t\tx = tab[i];\n\t\tj = i;\n\t\twhile (j > 0 && tab[j - 1] > x)\n\t\t{\n\t\t\ttab[j] = tab[j - 1];\n\t\t\tj--;\n\t\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='tri_insertion',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='tri_insertion',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='x',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='x',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        For(\n          init=\n            Assignment(\n              op='=',\n              lvalue=\n                ID(\n                  name='i',\n                )\n              rvalue=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='x',\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='tab',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='j',\n                    )\n                  rvalue=\n                    ID(\n                      name='i',\n                    )\n                )\n              block_items[2]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ID(\n                              name='j',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='j',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            ID(\n                              name='x',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='j',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        UnaryOp(\n                          op='p--',\n                          expr=\n                            ID(\n                              name='j',\n                            )\n                        )\n                    )\n                )\n              block_items[3]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='tab',\n                        )\n                      subscript=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='x',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "tri_selection",
            "function_code": "void tri_selection(int tab[], int taille)\n{\n\tint indice_min;\n\tfor (int i = 0; i < taille; i++)\n\t{\n\t\tindice_min = i;\n\t\tfor (int j = i + 1; j < taille; j++)\n\t\t{\n\t\t\tif (tab[j] < tab[indice_min])\n\t\t\t{\n\t\t\t\tindice_min = j;\n\t\t\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='tri_selection',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='tri_selection',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='indice_min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='indice_min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='indice_min',\n                    )\n                  rvalue=\n                    ID(\n                      name='i',\n                    )\n                )\n              block_items[1]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                ID(\n                                  name='i',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        ID(\n                          name='taille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='tab',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              right=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='tab',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='indice_min',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ID(\n                                      name='indice_min',\n                                    )\n                                  rvalue=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ID(\n                          name='indice_min',\n                        )\n                      right=\n                        ID(\n                          name='i',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Decl(\n                          name='copie',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='copie',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='indice_min',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='indice_min',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          rvalue=\n                            ID(\n                              name='copie',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "mediane_tab",
            "function_code": "double mediane_tab(const int tab[], int taille)\n{\n\tint copie[100];\n\tdouble mediane; \n\n\t \n\tfor (int i = 0; i < taille; i++)\n\t{\n\t\tcopie[i] = tab[i];\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mediane_tab',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='mediane_tab',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='copie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='copie',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='mediane',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='mediane',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='copie',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='tab',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='tri_selection',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='copie',\n                )\n              exprs[1]=\n                ID(\n                  name='taille',\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                BinaryOp(\n                  op='%',\n                  left=\n                    ID(\n                      name='taille',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='mediane',\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='copie',\n                        )\n                      subscript=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            ID(\n                              name='taille',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='mediane',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='/',\n                      left=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='copie',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='/',\n                                  left=\n                                    ID(\n                                      name='taille',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='2',\n                                    )\n                                )\n                            )\n                          right=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='copie',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    BinaryOp(\n                                      op='/',\n                                      left=\n                                        ID(\n                                          name='taille',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='2',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='double',\n                          value='2.0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Return(\n          expr=\n            ID(\n              name='mediane',\n            )\n        )\n    )\n)"
        }
    ]
}