{
    "project_name": "20223_01_25_Structures",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\tt_etudiant marie;\n\tt_etudiant jean; \n\tstruct etudiant marc;\n\n\tprintf(\"l'\u00e9tudiante marie consomme %d octets.\\n\", sizeof(marie));\n\n\t \n\n\tetudiant_saisir(&marie);\n\n\t \n\n\tetudiant_afficher(&marie);\n\n\tprintf(\"La note du finale: %.2lf\\n\", marie.finale);\n\n\n\tjean.tp1 = 10; \n\n\tsystem(\"pause\");\n\treturn 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='marie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='marie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['t_etudiant'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='jean',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='jean',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['t_etudiant'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='marc',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='marc',\n              quals=[],\n              align=None,\n              type=\n                Struct(\n                  name='etudiant',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"l\\'\u00e9tudiante marie consomme %d octets.\\\\n\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='sizeof',\n                  expr=\n                    ID(\n                      name='marie',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='etudiant_saisir',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='marie',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='etudiant_afficher',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='marie',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La note du finale: %.2lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='marie',\n                    )\n                  field=\n                    ID(\n                      name='finale',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ID(\n                  name='jean',\n                )\n              field=\n                ID(\n                  name='tp1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "etudiant_afficher",
            "function_code": "void etudiant_afficher(const t_etudiant* et)\n{\n\tprintf(\"**** FICHE DE L'ETUDIANT-E ****\\n\");\n\tprintf(\"Nom: %s\\n\", et->nom);\n\tprintf(\"Prenom: %s\\n\", et->prenom  );\n\tprintf(\"Code permanent: %s\\n\", et->code_perm);\n\tprintf(\"TP1: %lf\\n\", et->tp1);\n\tprintf(\"TP2: %lf\\n\", (*et).tp2);\n\tprintf(\"Intra: %lf\\n\", (*et).intra);\n\tprintf(\"Final: %lf\\n\", (*et).finale);\n\t \n\t \n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='etudiant_afficher',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='et',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='et',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_etudiant'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='etudiant_afficher',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"**** FICHE DE L\\'ETUDIANT-E ****\\\\n\"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nom: %s\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Prenom: %s\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='prenom',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Code permanent: %s\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='code_perm',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"TP1: %lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='tp1',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"TP2: %lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='et',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='tp2',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Intra: %lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='et',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='intra',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Final: %lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='et',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='finale',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "etudiant_saisir",
            "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='etudiant_saisir',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='et',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='et',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_etudiant'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='etudiant_saisir',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nom: \"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='et',\n                                )\n                              field=\n                                ID(\n                                  name='nom',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Prenom: \"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='prenom',\n                    )\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='prenom',\n                    )\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='et',\n                                )\n                              field=\n                                ID(\n                                  name='prenom',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Code Perm.: \"',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='code_perm',\n                    )\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='15',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='et',\n                    )\n                  field=\n                    ID(\n                      name='code_perm',\n                    )\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='et',\n                                )\n                              field=\n                                ID(\n                                  name='code_perm',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"TP1: \"',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='et',\n                        )\n                      field=\n                        ID(\n                          name='tp1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"TP2: \"',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='et',\n                        )\n                      field=\n                        ID(\n                          name='tp2',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Intra: \"',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='et',\n                        )\n                      field=\n                        ID(\n                          name='intra',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Final: \"',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='et',\n                        )\n                      field=\n                        ID(\n                          name='finale',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        }
    ]
}