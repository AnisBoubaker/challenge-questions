{
    "project_name": "20233_02_17_PassageParReference",
    "functions": [
        {
            "function_name": "min_max_de_3",
            "function_code": "void min_max_de_3(int val1, int val2, int val3, int* adr_pour_min, int* adr_pour_max)\n{\n    int min = val1;\n    int max = val1;\n\n    if(val2 < min){\n        min = val2;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='min_max_de_3',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='val1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='val2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='val3',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='adr_pour_min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='adr_pour_min',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='adr_pour_max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='adr_pour_max',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='min_max_de_3',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='max',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='max',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='val2',\n                )\n              right=\n                ID(\n                  name='min',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val2',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        If(\n          cond=\n            BinaryOp(\n              op='>',\n              left=\n                ID(\n                  name='val2',\n                )\n              right=\n                ID(\n                  name='max',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='max',\n                    )\n                  rvalue=\n                    ID(\n                      name='val2',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='val3',\n                )\n              right=\n                ID(\n                  name='min',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val3',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            BinaryOp(\n              op='>',\n              left=\n                ID(\n                  name='val3',\n                )\n              right=\n                ID(\n                  name='max',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='max',\n                    )\n                  rvalue=\n                    ID(\n                      name='val3',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adr_pour_min',\n                )\n            )\n          rvalue=\n            ID(\n              name='min',\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adr_pour_max',\n                )\n            )\n          rvalue=\n            ID(\n              name='max',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    int plus_petit, plus_grand;\n\n    min_max_de_3(10, 34, 12, &plus_petit, &plus_grand);\n\n    printf(\"Le minimum: %i\\n\", plus_petit);\n    printf(\"Le maximum: %i\\n\", plus_grand);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='plus_petit',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='plus_petit',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='plus_grand',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='plus_grand',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='min_max_de_3',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='34',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='12',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='plus_petit',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='plus_grand',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le minimum: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='plus_petit',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le maximum: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='plus_grand',\n                )\n            )\n        )\n      block_items[5]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}