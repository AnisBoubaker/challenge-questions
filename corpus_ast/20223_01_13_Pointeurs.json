{
    "project_name": "20223_01_13_Pointeurs",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\tint ma_variable = 10;\n\tint* adr; \n\tint** adr_adr;\n\n\tadr = &ma_variable;\n\n\tprintf(\"Ma variable se trouve a : %p\\n\", &ma_variable);\n\n\tprintf(\"Le pointeur adr contient: %p\\n\", adr);\n\n\tprintf(\"ma_variable contient (avant dereferencement): %d\\n\", ma_variable);\n\n\t*adr = 55;\n\n\tprintf(\"ma_variable contient (apres dereferencement): %d\\n\", ma_variable);\n\n\tprintf(\"La valeur se trouvant \u00e0 l'adresse adr: %d\\n\", *adr);\n\n\n\tadr_adr = &adr;\n\n\t**adr_adr = 100;\n\n\tprintf(\"ma_variable contient (apres le double dereferencement): %d\\n\", ma_variable);\n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='ma_variable',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ma_variable',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='adr',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='adr',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='adr_adr',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='adr_adr',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='adr',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='ma_variable',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Ma variable se trouve a : %p\\\\n\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='ma_variable',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le pointeur adr contient: %p\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='adr',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"ma_variable contient (avant dereferencement): %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='ma_variable',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adr',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='55',\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"ma_variable contient (apres dereferencement): %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='ma_variable',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La valeur se trouvant \u00e0 l\\'adresse adr: %d\\\\n\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='adr',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='adr_adr',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='adr',\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='adr_adr',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='100',\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"ma_variable contient (apres le double dereferencement): %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='ma_variable',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[14]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}