{
    "project_name": "20233_02_01_PremierProgramme",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n     \n    unsigned int age=18;  \n                          \n    unsigned int age2 = 10;\n\n    double salaire= 100456.50;\n\n    char un_caractere = 65;\n    char caractere2 = 'D';\n\n     \n    printf(\"Hello, World!\\n\");\n\n    printf(\"La variable un_caractere contient: %i\\n\",un_caractere);\n    printf(\"La variable un_caractere contient: %c\\n\", un_caractere);\n\n    printf(\"La variable un_caractere+2 contient: %i\\n\",un_caractere+2);\n    printf(\"La variable un_caractere+2 contient: %c\\n\", un_caractere+2);\n\n    printf(\"La variable caractere2 contient: %c\\n\", caractere2);\n    printf(\"La variable caractere2 contient: %i\\n\", caractere2);\n\n    printf(\"La variable age contient: %i\\n\", age);\n    age = 17;\n    printf(\"La variable age contient: %i\\n\", age);\n    age2 = age - 5;\n\n    printf(\"La variable age2 contient: %i\\n\", age2);\n\n    age = age + 5;\n    printf(\"La variable age contient: %i\\n\", age);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='age',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='age',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['unsigned', 'int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='18',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='age2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='age2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['unsigned', 'int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='salaire',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='salaire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n          init=\n            Constant(\n              type='double',\n              value='100456.50',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='un_caractere',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='un_caractere',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='65',\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='caractere2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n          init=\n            Constant(\n              type='char',\n              value=\"'D'\",\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Hello, World!\\\\n\"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable un_caractere contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='un_caractere',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable un_caractere contient: %c\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='un_caractere',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable un_caractere+2 contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                BinaryOp(\n                  op='+',\n                  left=\n                    ID(\n                      name='un_caractere',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable un_caractere+2 contient: %c\\\\n\"',\n                )\n              exprs[1]=\n                BinaryOp(\n                  op='+',\n                  left=\n                    ID(\n                      name='un_caractere',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable caractere2 contient: %c\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='caractere2',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable caractere2 contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='caractere2',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable age contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='age',\n                )\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='age',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='17',\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable age contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='age',\n                )\n            )\n        )\n      block_items[15]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='age2',\n            )\n          rvalue=\n            BinaryOp(\n              op='-',\n              left=\n                ID(\n                  name='age',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable age2 contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='age2',\n                )\n            )\n        )\n      block_items[17]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='age',\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='age',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La variable age contient: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='age',\n                )\n            )\n        )\n      block_items[19]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}