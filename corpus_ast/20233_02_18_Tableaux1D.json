{
    "project_name": "20233_02_18_Tableaux1D",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='notes',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='notes',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['double'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='65',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_etudiants_effectif',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_etudiants_effectif',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='moyenne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='moyenne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='max',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='max',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='ma_var',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ma_var',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Combien d\\'etudiants: \"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%i\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_etudiants_effectif',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_etudiants_effectif',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Saisir la note de l\\'etudiant-e num. %i: \"',\n                        )\n                      exprs[1]=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            ID(\n                              name='i',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%lf\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='notes',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La case 2 du tableau contient: %lf\\\\n\"',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='notes',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='moyenne',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[10]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_etudiants_effectif',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='moyenne',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='moyenne',\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='notes',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='moyenne',\n            )\n          rvalue=\n            BinaryOp(\n              op='/',\n              left=\n                ID(\n                  name='moyenne',\n                )\n              right=\n                ID(\n                  name='nb_etudiants_effectif',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La moyenne des notes est: %lf\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='moyenne',\n                )\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='max',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='notes',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[14]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_etudiants_effectif',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='notes',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      right=\n                        ID(\n                          name='max',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='max',\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='notes',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La meilleure note de la classe: %lf\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='max',\n                )\n            )\n        )\n      block_items[16]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}