{
    "project_name": "20233_02_16_Pointeurs",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='val1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val1',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='val2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n          init=\n            Constant(\n              type='char',\n              value=\"'A'\",\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='val3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val3',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='adresse_val1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='adresse_val1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='val1',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='adresse_val2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='adresse_val2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n            )\n          init=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='val2',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='ptr',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='ptr',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='ptr',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='adresse_val1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='val1',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Valeur bizarre: %p\\\\n\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='val1',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Contenu de adresse_val1: %p \\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='adresse_val1',\n                )\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adresse_val1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='50',\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La valeur de val1: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='val1',\n                )\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='ptr',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='100',\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La valeur de val1: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='val1',\n                )\n            )\n        )\n      block_items[14]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='ptr',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='val3',\n                )\n            )\n        )\n      block_items[15]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adresse_val1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='25',\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La valeur de val3: %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='val3',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"L\\'adresse de val1: %p\\\\n\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='val1',\n                    )\n                )\n            )\n        )\n      block_items[18]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}