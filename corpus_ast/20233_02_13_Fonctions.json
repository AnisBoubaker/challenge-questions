{
    "project_name": "20233_02_13_Fonctions",
    "functions": [
        {
            "function_name": "somme_des_pairs",
            "function_code": "int somme_des_pairs( int debut, int fin )\n{\n    int somme = 0;\n    int compteur;\n\n    if(debut % 2 == 1)\n    {\n        debut ++;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='somme_des_pairs',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='debut',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debut',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='fin',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='fin',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='somme_des_pairs',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='somme',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='somme',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='compteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='compteur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                BinaryOp(\n                  op='%',\n                  left=\n                    ID(\n                      name='debut',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='debut',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        For(\n          init=\n            Assignment(\n              op='=',\n              lvalue=\n                ID(\n                  name='compteur',\n                )\n              rvalue=\n                ID(\n                  name='debut',\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                ID(\n                  name='compteur',\n                )\n              right=\n                ID(\n                  name='fin',\n                )\n            )\n          next=\n            Assignment(\n              op='=',\n              lvalue=\n                ID(\n                  name='compteur',\n                )\n              rvalue=\n                BinaryOp(\n                  op='+',\n                  left=\n                    ID(\n                      name='compteur',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='somme',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='somme',\n                        )\n                      right=\n                        ID(\n                          name='compteur',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Return(\n          expr=\n            ID(\n              name='somme',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n    int resultat;\n    int mon_debut;\n    int ma_fin;\n\n    printf(\"Saisir la valeur du debut: \");\n    scanf(\"%i\", &mon_debut);\n\n    printf(\"Saisir la valeur de la fin: \");\n    scanf(\"%i\", &ma_fin);\n\n    resultat =  somme_des_pairs( mon_debut, ma_fin);\n\n     \n     \n     \n\n    printf(\"Le resualtat est: %i\\n\", resultat);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='resultat',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='resultat',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='mon_debut',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='mon_debut',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='ma_fin',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ma_fin',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir la valeur du debut: \"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%i\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='mon_debut',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir la valeur de la fin: \"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%i\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='ma_fin',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='resultat',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='somme_des_pairs',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='mon_debut',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='ma_fin',\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le resualtat est: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='resultat',\n                )\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}