{
    "project_name": "20223_01_17_Tableaux",
    "functions": [
        {
            "function_name": "afficher_tab",
            "function_code": "void afficher_tab(const double tab[], int nb_elts)\n{\n\tfor (int i = 0; i < nb_elts; i++)\n\t{\n\t\tprintf(\"Case %d: %lf\\n\", i, tab[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_tab',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['double'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_elts',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_elts',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_tab',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_elts',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Case %d: %lf\\\\n\"',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='i',\n                        )\n                      exprs[2]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='tab',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "moyenne_tab",
            "function_code": "double moyenne_tab(const double tab[], int nb_elts)\n{\n\tdouble moyenne = 0;\n\tfor (int i = 0; i < nb_elts; i++)\n\t{\n\t\tmoyenne += tab[i];\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='moyenne_tab',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['double'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_elts',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_elts',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='moyenne_tab',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='moyenne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='moyenne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_elts',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='+=',\n                  lvalue=\n                    ID(\n                      name='moyenne',\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='tab',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='/=',\n          lvalue=\n            ID(\n              name='moyenne',\n            )\n          rvalue=\n            ID(\n              name='nb_elts',\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='moyenne',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "saisir_tab",
            "function_code": "void saisir_tab(double tab[], int nb_elts)\n{\n\tfor (int i = 0; i < nb_elts; i++)\n\t{\n\t\tprintf(\"Prix du produit %d: \", i);\n\t\tscanf(\"%lf\", &tab[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='saisir_tab',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['double'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_elts',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_elts',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='saisir_tab',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_elts',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Prix du produit %d: \"',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='i',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%lf\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\t \n\t \n\tdouble produits[1000];\n\tdouble moyenne; \n\n\tint nb_produits=0;  \n\n\tprintf(\"Combien de produits avez-vous? \");\n\tscanf(\"%d\", &nb_produits);\n\n\t \n\tsaisir_tab(produits, nb_produits);\n\n\t \n\tafficher_tab(produits, nb_produits);\n\n\t \n\n\t \n\t \n\tmoyenne = moyenne_tab(produits, nb_produits);\n\n\tprintf(\"La moyenne des prix est: %lf\\n\", moyenne);\n\n\n\t \n\n\n\n\n\t \n\n\tsystem(\"pause\");\n\treturn 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='produits',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='produits',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['double'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='moyenne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='moyenne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_produits',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_produits',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Combien de produits avez-vous? \"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_produits',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='saisir_tab',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='produits',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_produits',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tab',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='produits',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_produits',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='moyenne',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='moyenne_tab',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='produits',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='nb_produits',\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La moyenne des prix est: %lf\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='moyenne',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}