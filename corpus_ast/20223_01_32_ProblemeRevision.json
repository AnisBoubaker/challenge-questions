{
    "project_name": "20223_01_32_ProblemeRevision",
    "functions": [
        {
            "function_name": "mesure_init",
            "function_code": "t_mesure* mesure_init(void)\n{\n\tt_mesure* nouv_mesure; \n\n\tnouv_mesure = (t_mesure*)malloc(sizeof(t_mesure));\n\tif (nouv_mesure == 0)\n\t{\n\t\tprintf(\"Plus de memoire!\");\n\t\texit(1);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mesure_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='mesure_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_mesure'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_mesure',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_mesure',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_mesure'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_mesure',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_mesure'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_mesure'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_mesure',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Plus de memoire!\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='nouv_mesure',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "mesure_destroy",
            "function_code": "void mesure_destroy(t_mesure* la_mesure)\n{\n\tfree(la_mesure);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mesure_destroy',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='la_mesure',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='la_mesure',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_mesure'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='mesure_destroy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='la_mesure',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\n\tt_mesure ma_mesure; \n\n\tma_mesure.jour = VENDREDI;\n\n\tprintf(\"La valeur numerique du jour est: %d\\n\", ma_mesure.jour);\n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='ma_mesure',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ma_mesure',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['t_mesure'],\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ID(\n                  name='ma_mesure',\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='VENDREDI',\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La valeur numerique du jour est: %d\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='ma_mesure',\n                    )\n                  field=\n                    ID(\n                      name='jour',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[4]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "province_init",
            "function_code": "t_province* province_init(const char* nom, int max_capteurs)\n{\n\tt_province* nouv_prov;\n\n\tnouv_prov = (t_province*)malloc(sizeof(t_province));\n\tif (nouv_prov == 0)\n\t{\n\t\texit(1);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='province_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max_capteurs',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max_capteurs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='province_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_province'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_prov',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_prov',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_province'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_prov',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_province'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_province'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_prov',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='nom',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['char'],\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='strlen',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='nom',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_prov',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_prov',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='capteurs',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        PtrDecl(\n                          quals=[],\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['t_capteur'],\n                                )\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    PtrDecl(\n                                      quals=[],\n                                      type=\n                                        TypeDecl(\n                                          declname=None,\n                                          quals=[],\n                                          align=None,\n                                          type=\n                                            IdentifierType(\n                                              names=['t_capteur'],\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            ID(\n                              name='max_capteurs',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_prov',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='nouv_prov',\n                            )\n                          field=\n                            ID(\n                              name='nom',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_prov',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='strcpy',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_prov',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n              exprs[1]=\n                ID(\n                  name='nom',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='nb_max_capteurs',\n                )\n            )\n          rvalue=\n            ID(\n              name='max_capteurs',\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            ID(\n              name='nouv_prov',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "province_destroy",
            "function_code": "void province_destroy(t_province* la_province)\n{\n\tfree(la_province->nom);\n\tfor (int i = 0; i < la_province->nb_capteurs; i++)\n\t{\n\t\tcapteur_destroy(la_province->capteurs[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='province_destroy',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='la_province',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='la_province',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_province'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='province_destroy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='la_province',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='la_province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='capteur_destroy',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ArrayRef(\n                          name=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='la_province',\n                                )\n                              field=\n                                ID(\n                                  name='capteurs',\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='la_province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='la_province',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "capteur_init",
            "function_code": "t_capteur* capteur_init(char* ville, double lat, double longi, int max_jours)\n{\n\tt_capteur* nouv_capteur; \n\n\tnouv_capteur = (t_capteur*)malloc(sizeof(t_capteur));\n\tif (nouv_capteur == 0)\n\t{\n\t\texit(1);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='capteur_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='ville',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='ville',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='lat',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='lat',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='longi',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='longi',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='max_jours',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max_jours',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_capteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_capteur',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_capteur',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_capteur'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_capteur'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_capteur',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='ville',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['char'],\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='strlen',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='ville',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_capteur',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='latitude',\n                )\n            )\n          rvalue=\n            ID(\n              name='lat',\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='longitude',\n                )\n            )\n          rvalue=\n            ID(\n              name='longi',\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='strcpy',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n              exprs[1]=\n                ID(\n                  name='ville',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='nb_jours',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            ID(\n              name='nouv_capteur',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "capteur_destroy",
            "function_code": "void capteur_destroy(t_capteur* capteur)\n{\n\tfree(capteur->ville);\n\tfree(capteur);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='capteur_destroy',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='capteur',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='capteur',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_capteur'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='capteur_destroy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='capteur',\n                )\n            )\n        )\n    )\n)"
        }
    ]
}