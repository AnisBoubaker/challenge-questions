{
    "project_name": "20233_02_20_TableauxFonctions",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    int tab[50] = {10, 20 , 30, 40, 50};\n    double tab_reels[50] = {10, 20 , 30 , 40 , 50};\n\n \n \n \n \n\n    afficher_tableau( tab, 5 );\n\n    printf(\"La moyenne du tableau: %lf\\n\", moyenne_tableau_entier(tab,5));\n\n     \n    printf(\"La moyenne du tableau de reels: %lf\\n\",\n           moyenne_tableau_entier(tab_reels,5));\n\n\n    int x = 5;\n\n    mettre_a_zero(tab, 5);\n    afficher_tableau(tab, 5);\n\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='tab',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='50',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='30',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='40',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='50',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='tab_reels',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab_reels',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['double'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='50',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='30',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='40',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='50',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tableau',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='tab',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La moyenne du tableau: %lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='moyenne_tableau_entier',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='5',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La moyenne du tableau de reels: %lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='moyenne_tableau_entier',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab_reels',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='5',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='x',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='x',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='5',\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='mettre_a_zero',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='tab',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_tableau',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='tab',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[8]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "afficher_tableau",
            "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_tableau',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tableau',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tableau',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_tableau',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"La case #%i contient: %i\\\\n\"',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='i',\n                        )\n                      exprs[2]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='tableau',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "moyenne_tableau_entier",
            "function_code": "double moyenne_tableau_entier(int tableau[], int taille)\n{\n    double moyenne = 0;\n    for(int i=0; i<taille; i++)\n    {\n        moyenne += tableau[i];\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='moyenne_tableau_entier',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tableau',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tableau',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='moyenne_tableau_entier',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='moyenne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='moyenne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='+=',\n                  lvalue=\n                    ID(\n                      name='moyenne',\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='tableau',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='moyenne',\n            )\n          rvalue=\n            BinaryOp(\n              op='/',\n              left=\n                ID(\n                  name='moyenne',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='moyenne',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "mettre_a_zero",
            "function_code": "void mettre_a_zero(int tableau[], int taille)\n{\n    for(int i=0; i<taille; i++)\n    {\n        tableau[i] = 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mettre_a_zero',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tableau',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tableau',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='mettre_a_zero',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='tableau',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                  rvalue=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "fonction_bidon",
            "function_code": "void fonction_bidon(int a)\n{\n    a = a * 20;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='fonction_bidon',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='a',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='a',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='fonction_bidon',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='a',\n            )\n          rvalue=\n            BinaryOp(\n              op='*',\n              left=\n                ID(\n                  name='a',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='20',\n                )\n            )\n        )\n    )\n)"
        }
    ]
}