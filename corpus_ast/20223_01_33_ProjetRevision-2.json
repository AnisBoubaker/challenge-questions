{
    "project_name": "20223_01_33_ProjetRevision-2",
    "functions": [
        {
            "function_name": "mesure_init",
            "function_code": "t_mesure* mesure_init(void)\n{\n\tt_mesure* nouv_mesure; \n\n\tnouv_mesure = (t_mesure*)malloc(sizeof(t_mesure));\n\tif (nouv_mesure == 0)\n\t{\n\t\tprintf(\"Plus de memoire.\");\n\t\texit(1);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mesure_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='mesure_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_mesure'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_mesure',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_mesure',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_mesure'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_mesure',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_mesure'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_mesure'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_mesure',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Plus de memoire.\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_mesure',\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_mesure',\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_mesure',\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_mesure',\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[7]=\n        Return(\n          expr=\n            ID(\n              name='nouv_mesure',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "mesure_destroy",
            "function_code": "void mesure_destroy(t_mesure* la_mesure)\n{\n\tfree(la_mesure);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mesure_destroy',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='la_mesure',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='la_mesure',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_mesure'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='mesure_destroy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='la_mesure',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "mesure_afficher",
            "function_code": "void mesure_afficher(const t_mesure* mesure)\n{\n\tprintf(\"Jour semaine: \");\n\n\tswitch (mesure->jour)\n\t{\n\tcase DIMANCHE:\n\t\tprintf(\"Dimanche\");\n\t\tbreak;\n\tcase LUNDI:\n\t\tprintf(\"Lundi\");\n\t\tbreak;\n\tcase MARDI:\n\t\tprintf(\"Mardi\");\n\t\tbreak;\n\tcase MERCREDI: \n\t\tprintf(\"Mercredi\");\n\t\tbreak;\n\tcase JEUDI: \n\t\tprintf(\"Jeudi\");\n\t\tbreak;\n\tcase VENDREDI:\n\t\tprintf(\"Vendredi\");\n\t\tbreak;\n\tcase SAMEDI:\n\t\tprintf(\"Samedi\");\n\t\tbreak;\n\tdefault: \n\t\tprintf(\"Jour errone!\");\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='mesure_afficher',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='mesure',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='mesure',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_mesure'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='mesure_afficher',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Jour semaine: \"',\n                )\n            )\n        )\n      block_items[1]=\n        Switch(\n          cond=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='mesure',\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Case(\n                  expr=\n                    ID(\n                      name='DIMANCHE',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Dimanche\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[1]=\n                Case(\n                  expr=\n                    ID(\n                      name='LUNDI',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Lundi\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[2]=\n                Case(\n                  expr=\n                    ID(\n                      name='MARDI',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Mardi\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[3]=\n                Case(\n                  expr=\n                    ID(\n                      name='MERCREDI',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Mercredi\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[4]=\n                Case(\n                  expr=\n                    ID(\n                      name='JEUDI',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Jeudi\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[5]=\n                Case(\n                  expr=\n                    ID(\n                      name='VENDREDI',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Vendredi\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[6]=\n                Case(\n                  expr=\n                    ID(\n                      name='SAMEDI',\n                    )\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Samedi\"',\n                            )\n                        )\n                    )\n                  stmts[1]=\n                    Break(\n                    )\n                )\n              block_items[7]=\n                Default(\n                  stmts[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Jour errone!\"',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\", T: % .2lf, P : % .2lf, H : % .2lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='mesure',\n                    )\n                  field=\n                    ID(\n                      name='temperature',\n                    )\n                )\n              exprs[2]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='mesure',\n                    )\n                  field=\n                    ID(\n                      name='pression',\n                    )\n                )\n              exprs[3]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='mesure',\n                    )\n                  field=\n                    ID(\n                      name='humidite',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\tt_province* province;\n\tt_province* ontario;\n\tt_capteur* capteur_mtl;\n\tt_capteur* capteur_quebec;\n\tt_capteur* capteur_wagadougou;\n\tt_capteur* capteur_trois_rivieres;\n\tt_capteur* capteur_sherbrooke;\n\n\tFILE* mon_fichier;\n\n\n\tprovince = province_init(\"Quebec\", 10);\n\n\tontario = province_init(\"Ontario\", 25);\n\n\tcapteur_wagadougou = capteur_init(\"Wagadougou\", 10, 20, 50);\n\n\tcapteur_trois_rivieres = capteur_init(\"Trois Rivieres\", 13, 45, 40);\n\n\tcapteur_sherbrooke = capteur_init(\"Sherbrooke\", 13, 47, 25);\n\n\n\tcapteur_mtl = capteur_init(\"Montreal\", 45.51, 73.55, 50);\n\n\n\tcapteur_quebec = capteur_init(\"Ville de Quebec\", 46, 75, 50);\n\n\tprovince->capteurs[province->nb_capteurs] = capteur_wagadougou;\n\tprovince->nb_capteurs++;\n\tprovince->capteurs[province->nb_capteurs] = capteur_trois_rivieres;\n\tprovince->nb_capteurs++;\n\tprovince->capteurs[province->nb_capteurs] = capteur_sherbrooke;\n\tprovince->nb_capteurs++;\n\tprovince->capteurs[province->nb_capteurs] = capteur_mtl;\n\tprovince->nb_capteurs++;\n\tprovince->capteurs[province->nb_capteurs] = capteur_quebec;\n\tprovince->nb_capteurs++;\n\n\tcapteur_mtl->mesures[0][0].jour = DIMANCHE;\n\tcapteur_mtl->mesures[0][0].temperature = 25.5;\n\tcapteur_mtl->mesures[0][0].humidite = 45;\n\tcapteur_mtl->mesures[0][0].pression = 101.5;\n\n\tcapteur_mtl->mesures[0][1].jour = DIMANCHE;\n\tcapteur_mtl->mesures[0][1].temperature = 28.5;\n\tcapteur_mtl->mesures[0][1].humidite = 50;\n\tcapteur_mtl->mesures[0][1].pression = 100;\n\n\tcapteur_mtl->mesures[1][0].jour = LUNDI;\n\tcapteur_mtl->mesures[1][0].temperature = 28;\n\tcapteur_mtl->mesures[1][0].humidite = 50;\n\tcapteur_mtl->mesures[1][0].pression = 102;\n\n\tcapteur_mtl->mesures[1][1].jour = LUNDI;\n\tcapteur_mtl->mesures[1][1].temperature = 30;\n\tcapteur_mtl->mesures[1][1].humidite = 49;\n\tcapteur_mtl->mesures[1][1].pression = 100;\n\n\tcapteur_mtl->nb_jours_mesures = 2;\n\n\n\tcapteur_quebec->mesures[0][0].jour = DIMANCHE;\n\tcapteur_quebec->mesures[0][0].temperature = 25.5;\n\tcapteur_quebec->mesures[0][0].humidite = 45;\n\tcapteur_quebec->mesures[0][0].pression = 101.5;\n\n\tcapteur_quebec->mesures[0][1].jour = DIMANCHE;\n\tcapteur_quebec->mesures[0][1].temperature = 28.5;\n\tcapteur_quebec->mesures[0][1].humidite = 50;\n\tcapteur_quebec->mesures[0][1].pression = 100;\n\n\tcapteur_quebec->mesures[1][0].jour = LUNDI;\n\tcapteur_quebec->mesures[1][0].temperature = 28;\n\tcapteur_quebec->mesures[1][0].humidite = 50;\n\tcapteur_quebec->mesures[1][0].pression = 102;\n\n\tcapteur_quebec->mesures[1][1].jour = LUNDI;\n\tcapteur_quebec->mesures[1][1].temperature = 30;\n\tcapteur_quebec->mesures[1][1].humidite = 51;\n\tcapteur_quebec->mesures[1][1].pression = 102;\n\n\tcapteur_quebec->nb_jours_mesures = 2;\n\n\tafficher_province(province);\n\n\t \n\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='province',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='province',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_province'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='ontario',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='ontario',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_province'],\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='capteur_mtl',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_mtl',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='capteur_quebec',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_quebec',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='capteur_wagadougou',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_wagadougou',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='capteur_trois_rivieres',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_trois_rivieres',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='capteur_sherbrooke',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_sherbrooke',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='mon_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='mon_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='province',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='province_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Quebec\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='10',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='ontario',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='province_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Ontario\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='25',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='capteur_wagadougou',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='capteur_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Wagadougou\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='10',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='20',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='50',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='capteur_trois_rivieres',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='capteur_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Trois Rivieres\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='13',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='45',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='40',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='capteur_sherbrooke',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='capteur_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Sherbrooke\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='13',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='47',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='25',\n                    )\n                )\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='capteur_mtl',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='capteur_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Montreal\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='double',\n                      value='45.51',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='double',\n                      value='73.55',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='50',\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='capteur_quebec',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='capteur_init',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"Ville de Quebec\"',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='46',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='75',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='50',\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              subscript=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          rvalue=\n            ID(\n              name='capteur_wagadougou',\n            )\n        )\n      block_items[16]=\n        UnaryOp(\n          op='p++',\n          expr=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='province',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n        )\n      block_items[17]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              subscript=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          rvalue=\n            ID(\n              name='capteur_trois_rivieres',\n            )\n        )\n      block_items[18]=\n        UnaryOp(\n          op='p++',\n          expr=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='province',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n        )\n      block_items[19]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              subscript=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          rvalue=\n            ID(\n              name='capteur_sherbrooke',\n            )\n        )\n      block_items[20]=\n        UnaryOp(\n          op='p++',\n          expr=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='province',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n        )\n      block_items[21]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              subscript=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          rvalue=\n            ID(\n              name='capteur_mtl',\n            )\n        )\n      block_items[22]=\n        UnaryOp(\n          op='p++',\n          expr=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='province',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n        )\n      block_items[23]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              subscript=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          rvalue=\n            ID(\n              name='capteur_quebec',\n            )\n        )\n      block_items[24]=\n        UnaryOp(\n          op='p++',\n          expr=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='province',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n        )\n      block_items[25]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='DIMANCHE',\n            )\n        )\n      block_items[26]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='25.5',\n            )\n        )\n      block_items[27]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='45',\n            )\n        )\n      block_items[28]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='101.5',\n            )\n        )\n      block_items[29]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='DIMANCHE',\n            )\n        )\n      block_items[30]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='28.5',\n            )\n        )\n      block_items[31]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='50',\n            )\n        )\n      block_items[32]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='100',\n            )\n        )\n      block_items[33]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='LUNDI',\n            )\n        )\n      block_items[34]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='28',\n            )\n        )\n      block_items[35]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='50',\n            )\n        )\n      block_items[36]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='102',\n            )\n        )\n      block_items[37]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='LUNDI',\n            )\n        )\n      block_items[38]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='30',\n            )\n        )\n      block_items[39]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='49',\n            )\n        )\n      block_items[40]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_mtl',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='100',\n            )\n        )\n      block_items[41]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='capteur_mtl',\n                )\n              field=\n                ID(\n                  name='nb_jours_mesures',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[42]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='DIMANCHE',\n            )\n        )\n      block_items[43]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='25.5',\n            )\n        )\n      block_items[44]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='45',\n            )\n        )\n      block_items[45]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='101.5',\n            )\n        )\n      block_items[46]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='DIMANCHE',\n            )\n        )\n      block_items[47]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='28.5',\n            )\n        )\n      block_items[48]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='50',\n            )\n        )\n      block_items[49]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='100',\n            )\n        )\n      block_items[50]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='LUNDI',\n            )\n        )\n      block_items[51]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='28',\n            )\n        )\n      block_items[52]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='50',\n            )\n        )\n      block_items[53]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='102',\n            )\n        )\n      block_items[54]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            ID(\n              name='LUNDI',\n            )\n        )\n      block_items[55]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='temperature',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='30',\n            )\n        )\n      block_items[56]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='humidite',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='51',\n            )\n        )\n      block_items[57]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='capteur_quebec',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              field=\n                ID(\n                  name='pression',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='102',\n            )\n        )\n      block_items[58]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='capteur_quebec',\n                )\n              field=\n                ID(\n                  name='nb_jours_mesures',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[59]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_province',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='province',\n                )\n            )\n        )\n      block_items[60]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[61]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "province_init",
            "function_code": "t_province* province_init(const char* nom, int max_capteurs)\n{\n\tt_province* nouv_prov; \n\n\tnouv_prov = (t_province*)malloc(sizeof(t_province));\n\tif (nouv_prov == 0)\n\t{\n\t\texit(1);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='province_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max_capteurs',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max_capteurs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='province_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_province'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_prov',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_prov',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_province'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_prov',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_province'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_province'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_prov',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='nom',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['char'],\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='strlen',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='nom',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_prov',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_prov',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='capteurs',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        PtrDecl(\n                          quals=[],\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['t_capteur'],\n                                )\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    PtrDecl(\n                                      quals=[],\n                                      type=\n                                        TypeDecl(\n                                          declname=None,\n                                          quals=[],\n                                          align=None,\n                                          type=\n                                            IdentifierType(\n                                              names=['t_capteur'],\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            ID(\n                              name='max_capteurs',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_prov',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='nouv_prov',\n                            )\n                          field=\n                            ID(\n                              name='nom',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_prov',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='nb_capteurs',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_prov',\n                )\n              field=\n                ID(\n                  name='nb_max_capteurs',\n                )\n            )\n          rvalue=\n            ID(\n              name='max_capteurs',\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='strcpy',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_prov',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n              exprs[1]=\n                ID(\n                  name='nom',\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            ID(\n              name='nouv_prov',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "province_destroy",
            "function_code": "void province_destroy(t_province* la_province)\n{\n\tfree(la_province->nom);\n\tfor (int i = 0; i < la_province->nb_capteurs; i++)\n\t{\n\t\tcapteur_destroy(la_province->capteurs[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='province_destroy',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='la_province',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='la_province',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_province'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='province_destroy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='la_province',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='la_province',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='capteur_destroy',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ArrayRef(\n                          name=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='la_province',\n                                )\n                              field=\n                                ID(\n                                  name='capteurs',\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='la_province',\n                    )\n                  field=\n                    ID(\n                      name='capteurs',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='la_province',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "afficher_province",
            "function_code": "void afficher_province(const t_province* prov)\n{\n\tprintf(\"Province: %s\\n\", prov->nom);\n\tprintf(\"=====================================\\n\");\n\n\tfor (int i = 0; i < prov->nb_capteurs; i++)\n\t{\n\t\tcapteur_afficher(prov->capteurs[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_province',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='prov',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='prov',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_province'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_province',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Province: %s\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='prov',\n                    )\n                  field=\n                    ID(\n                      name='nom',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"=====================================\\\\n\"',\n                )\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='prov',\n                    )\n                  field=\n                    ID(\n                      name='nb_capteurs',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='capteur_afficher',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ArrayRef(\n                          name=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='prov',\n                                )\n                              field=\n                                ID(\n                                  name='capteurs',\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "capteur_init",
            "function_code": "t_capteur* capteur_init(const char* ville, double latitude, double longitude, int nb_max_jours_mesures)\n{\n\tt_capteur* nouv_capteur; \n\n\tnouv_capteur = (t_capteur*)malloc(sizeof(t_capteur));\n\tif (nouv_capteur == 0)\n\t{\n\t\texit(1);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='capteur_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='ville',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='ville',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='latitude',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='latitude',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='longitude',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='longitude',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='nb_max_jours_mesures',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_max_jours_mesures',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='capteur_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_capteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_capteur',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_capteur'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_capteur',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_capteur'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_capteur'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_capteur',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='ville',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['char'],\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='strlen',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='ville',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_capteur',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='mesures',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        PtrDecl(\n                          quals=[],\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['t_mesure'],\n                                )\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    PtrDecl(\n                                      quals=[],\n                                      type=\n                                        TypeDecl(\n                                          declname=None,\n                                          quals=[],\n                                          align=None,\n                                          type=\n                                            IdentifierType(\n                                              names=['t_mesure'],\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            ID(\n                              name='nb_max_jours_mesures',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_capteur',\n                    )\n                  field=\n                    ID(\n                      name='mesures',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='nouv_capteur',\n                            )\n                          field=\n                            ID(\n                              name='ville',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_capteur',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='exit',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_max_jours_mesures',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        StructRef(\n                          type='->',\n                          name=\n                            ID(\n                              name='nouv_capteur',\n                            )\n                          field=\n                            ID(\n                              name='mesures',\n                            )\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                  rvalue=\n                    Cast(\n                      to_type=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            PtrDecl(\n                              quals=[],\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_mesure'],\n                                    )\n                                )\n                            )\n                        )\n                      expr=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='malloc',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                BinaryOp(\n                                  op='*',\n                                  left=\n                                    UnaryOp(\n                                      op='sizeof',\n                                      expr=\n                                        Typename(\n                                          name=None,\n                                          quals=[],\n                                          align=None,\n                                          type=\n                                            TypeDecl(\n                                              declname=None,\n                                              quals=[],\n                                              align=None,\n                                              type=\n                                                IdentifierType(\n                                                  names=['t_mesure'],\n                                                )\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='2',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='nouv_capteur',\n                                )\n                              field=\n                                ID(\n                                  name='mesures',\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        For(\n                          init=\n                            DeclList(\n                              decls[0]=\n                                Decl(\n                                  name='j',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    TypeDecl(\n                                      declname='j',\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                  init=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='j',\n                                )\n                              right=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='free',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ArrayRef(\n                                          name=\n                                            StructRef(\n                                              type='->',\n                                              name=\n                                                ID(\n                                                  name='nouv_capteur',\n                                                )\n                                              field=\n                                                ID(\n                                                  name='mesures',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='free',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                StructRef(\n                                  type='->',\n                                  name=\n                                    ID(\n                                      name='nouv_capteur',\n                                    )\n                                  field=\n                                    ID(\n                                      name='mesures',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='free',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                StructRef(\n                                  type='->',\n                                  name=\n                                    ID(\n                                      name='nouv_capteur',\n                                    )\n                                  field=\n                                    ID(\n                                      name='ville',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='free',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='nouv_capteur',\n                                )\n                            )\n                        )\n                      block_items[4]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='exit',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='latitude',\n                )\n            )\n          rvalue=\n            ID(\n              name='latitude',\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='longitude',\n                )\n            )\n          rvalue=\n            ID(\n              name='longitude',\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='strcpy',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n              exprs[1]=\n                ID(\n                  name='ville',\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='nb_jours_mesures',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_capteur',\n                )\n              field=\n                ID(\n                  name='max_jours_mesures',\n                )\n            )\n          rvalue=\n            ID(\n              name='nb_max_jours_mesures',\n            )\n        )\n      block_items[13]=\n        Return(\n          expr=\n            ID(\n              name='nouv_capteur',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "capteur_destroy",
            "function_code": "void capteur_destroy(t_capteur* le_capteur)\n{\n\tfree(le_capteur->ville);\n\t \n\tfor (int i = 0; i < le_capteur->max_jours_mesures; i++)\n\t{\n\t\tfree(le_capteur->mesures[i]);\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='capteur_destroy',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='le_capteur',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='le_capteur',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_capteur'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='capteur_destroy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='le_capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='le_capteur',\n                    )\n                  field=\n                    ID(\n                      name='max_jours_mesures',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ArrayRef(\n                          name=\n                            StructRef(\n                              type='->',\n                              name=\n                                ID(\n                                  name='le_capteur',\n                                )\n                              field=\n                                ID(\n                                  name='mesures',\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='le_capteur',\n                    )\n                  field=\n                    ID(\n                      name='mesures',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='le_capteur',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "capteur_afficher",
            "function_code": "void capteur_afficher(const t_capteur* capteur)\n{\n\tprintf(\"Ville: %s, Lat: %.2lf, Lon: %.2lf\\n\", \n\t\tcapteur->ville,\n\t\tcapteur->latitude,\n\t\tcapteur->longitude);\n\n\tfor (int i = 0; i < capteur->nb_jours_mesures; i++)\n\t{\n\t\tprintf(\"Jour #%d: \\n\", i);\n\t\tfor (int j = 0; j < 2; j++)\n\t\t{\n\t\t\tmesure_afficher(&(capteur->mesures[i][j]));\n\t\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='capteur_afficher',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='capteur',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='capteur',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_capteur'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='capteur_afficher',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Ville: %s, Lat: %.2lf, Lon: %.2lf\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='capteur',\n                    )\n                  field=\n                    ID(\n                      name='ville',\n                    )\n                )\n              exprs[2]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='capteur',\n                    )\n                  field=\n                    ID(\n                      name='latitude',\n                    )\n                )\n              exprs[3]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='capteur',\n                    )\n                  field=\n                    ID(\n                      name='longitude',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='capteur',\n                    )\n                  field=\n                    ID(\n                      name='nb_jours_mesures',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Jour #%d: \\\\n\"',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='i',\n                        )\n                    )\n                )\n              block_items[1]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='mesure_afficher',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            StructRef(\n                                              type='->',\n                                              name=\n                                                ID(\n                                                  name='capteur',\n                                                )\n                                              field=\n                                                ID(\n                                                  name='mesures',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='i',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        }
    ]
}