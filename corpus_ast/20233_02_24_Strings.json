{
    "project_name": "20233_02_24_Strings",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main() {\n     \n     \n     \n     \n    char salutation[100];\n    int taille;\n\n    printf(\"Saisir votre salutation: \");\n     \n    fgets(salutation,100, stdin);\n    salutation[ strlen(salutation) - 1 ] = '\\0';\n\n     \n    printf(\"%s\\n\", salutation);\n\n    printf(\"Nombre de mots: %i\\n\", compter_mots(salutation));\n\n    taille = 0;\n    while(salutation[taille]!='\\0')\n    {\n        taille ++;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='salutation',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='salutation',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='taille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='taille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir votre salutation: \"',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='salutation',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='salutation',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='salutation',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%s\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='salutation',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nombre de mots: %i\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='compter_mots',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='salutation',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='taille',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='salutation',\n                    )\n                  subscript=\n                    ID(\n                      name='taille',\n                    )\n                )\n              right=\n                Constant(\n                  type='char',\n                  value=\"'\\\\0'\",\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='taille',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La taille de la chaine: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='taille',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La taille de la chaine: %i\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='strlen',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='salutation',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "compter_mots",
            "function_code": "int compter_mots(char* chaine)\n{\n    int compteur = 0;\n    int taille = strlen(chaine);\n    for(int i=0; i<taille; i++)\n    {\n        if(chaine[i]==' ' || chaine[i]=='.' || chaine[i]==',')\n        {\n            compteur++;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='compter_mots',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='chaine',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='chaine',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='compter_mots',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='compteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='compteur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='taille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='taille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='strlen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='chaine',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='chaine',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='char',\n                                  value=\"' '\",\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='chaine',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='char',\n                                  value=\"'.'\",\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='chaine',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='char',\n                              value=\"','\",\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            ID(\n                              name='compteur',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='compteur',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n    )\n)"
        }
    ]
}