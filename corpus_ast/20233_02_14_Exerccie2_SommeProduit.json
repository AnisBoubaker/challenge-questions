{
    "project_name": "20233_02_14_Exerccie2_SommeProduit",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='somme',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='somme',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='produit',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='produit',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='somme_produit',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='50',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='somme',\n                    )\n                )\n              exprs[2]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='produit',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La somme = %i, Le produit = %.0lf\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='somme',\n                )\n              exprs[2]=\n                ID(\n                  name='produit',\n                )\n            )\n        )\n      block_items[4]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "somme_produit",
            "function_code": "void somme_produit(int n, int* adr_somme, double* adr_produit)\n{\n    *adr_somme = 0;\n    *adr_produit = 1;\n    for(int i = 1; i<= n; i++)\n    {\n        *adr_somme += i;\n        *adr_produit *= i;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='somme_produit',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='n',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='n',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='adr_somme',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='adr_somme',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='adr_produit',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='adr_produit',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['double'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='somme_produit',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adr_somme',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adr_produit',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='n',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='+=',\n                  lvalue=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='adr_somme',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='i',\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='*=',\n                  lvalue=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='adr_produit',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='i',\n                    )\n                )\n            )\n        )\n    )\n)"
        }
    ]
}