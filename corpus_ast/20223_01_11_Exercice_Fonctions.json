{
    "project_name": "20223_01_11_Exercice_Fonctions",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\t\n\tprintf(\"Le minimum est: %lf\\n\", min_de_3_v1(6, 6, 17));\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le minimum est: %lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='min_de_3_v1',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='6',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='6',\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='17',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "min_de_3_v3",
            "function_code": "double min_de_3_v3(double val1, double val2, double val3)\n{\n\tdouble min = val1;\n\n\tmin = val2 < min ? val2 : min;\n\tmin = val3 < min ? val3 : min;\n\n\treturn min;\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='min_de_3_v3',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='val1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='val2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='val3',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='min_de_3_v3',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n          init=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='min',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val2',\n                    )\n                  right=\n                    ID(\n                      name='min',\n                    )\n                )\n              iftrue=\n                ID(\n                  name='val2',\n                )\n              iffalse=\n                ID(\n                  name='min',\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='min',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val3',\n                    )\n                  right=\n                    ID(\n                      name='min',\n                    )\n                )\n              iftrue=\n                ID(\n                  name='val3',\n                )\n              iffalse=\n                ID(\n                  name='min',\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='min',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "min_de_3_v2",
            "function_code": "double min_de_3_v2(double val1, double val2, double val3)\n{\n\tdouble min = val1;\n\tif (val2 < min)\n\t{\n\t\tmin = val2;\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='min_de_3_v2',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='val1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='val2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='val3',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='min_de_3_v2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n          init=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='val2',\n                )\n              right=\n                ID(\n                  name='min',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val2',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='min',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='val3',\n                )\n              right=\n                ID(\n                  name='min',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val3',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='min',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='min',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "min_de_3_v1",
            "function_code": "double min_de_3_v1(double val1, double val2, double val3)\n{\n\tdouble min;\n\tif (val1 <= val2 && val1 <= val3)\n\t{\n\t\tmin = val1;\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='min_de_3_v1',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='val1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='val2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='val3',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='min_de_3_v1',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='<=',\n                  left=\n                    ID(\n                      name='val1',\n                    )\n                  right=\n                    ID(\n                      name='val2',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='<=',\n                  left=\n                    ID(\n                      name='val1',\n                    )\n                  right=\n                    ID(\n                      name='val3',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val1',\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='<=',\n                      left=\n                        ID(\n                          name='val2',\n                        )\n                      right=\n                        ID(\n                          name='val1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='<=',\n                      left=\n                        ID(\n                          name='val2',\n                        )\n                      right=\n                        ID(\n                          name='val3',\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='min',\n                        )\n                      rvalue=\n                        ID(\n                          name='val2',\n                        )\n                    )\n                )\n              iffalse=\n                Compound(\n                  block_items[0]=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='min',\n                        )\n                      rvalue=\n                        ID(\n                          name='val3',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='min',\n            )\n        )\n    )\n)"
        }
    ]
}