{
    "project_name": "20233_02_10_Ex3_Cube",
    "functions": [
        {
            "function_name": "cube",
            "function_code": "double cube(double valeur)\n{\n    double resultat;\n\n    resultat = valeur * valeur * valeur;\n\n    return resultat;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='cube',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='valeur',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='valeur',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='cube',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='resultat',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='resultat',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='resultat',\n            )\n          rvalue=\n            BinaryOp(\n              op='*',\n              left=\n                BinaryOp(\n                  op='*',\n                  left=\n                    ID(\n                      name='valeur',\n                    )\n                  right=\n                    ID(\n                      name='valeur',\n                    )\n                )\n              right=\n                ID(\n                  name='valeur',\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='resultat',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "saisir_entier_positif",
            "function_code": "int saisir_entier_positif( void )\n{\n    int saisie;\n\n    do\n    {\n        printf(\"Saisir un entier positif: \");\n        scanf(\"%i\", &saisie);\n    } while (saisie <= 0 );\n\n    return saisie;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='saisir_entier_positif',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='saisir_entier_positif',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='saisie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='saisie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                ID(\n                  name='saisie',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Saisir un entier positif: \"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%i\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='saisie',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='saisie',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "afficher_message_bienvenue",
            "function_code": "void afficher_message_bienvenue(void)\n{\n    printf(\"********************************************\\n\");\n    printf(\"Bienvenue dans SUPER PROGRAMME!\\n\");\n    printf(\"Qui calcule le cube et le max de deux nombres\\n\");\n    printf(\"********************************************\\n\");\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_message_bienvenue',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_message_bienvenue',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"********************************************\\\\n\"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Bienvenue dans SUPER PROGRAMME!\\\\n\"',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Qui calcule le cube et le max de deux nombres\\\\n\"',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"********************************************\\\\n\"',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    double val;\n    int val1, val2;\n    int max;\n\n    afficher_message_bienvenue();\n\n    printf(\"Saisir la valeur pour le cube: \");\n    scanf(\"%lf\", &val);\n    printf(\"Le cube de %lf est: %lf\\n\", val, cube(val) );\n\n    val1 = saisir_entier_positif();\n    val2 = saisir_entier_positif();\n\n    max = val1;\n    if(val2>max)\n    {\n        max = val2;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='val',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='val1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val1',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='val2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='max',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='max',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_message_bienvenue',\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir la valeur pour le cube: \"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='val',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le cube de %lf est: %lf\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='val',\n                )\n              exprs[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='cube',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='val',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='val1',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='saisir_entier_positif',\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='val2',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='saisir_entier_positif',\n                )\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='max',\n            )\n          rvalue=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[11]=\n        If(\n          cond=\n            BinaryOp(\n              op='>',\n              left=\n                ID(\n                  name='val2',\n                )\n              right=\n                ID(\n                  name='max',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='max',\n                    )\n                  rvalue=\n                    ID(\n                      name='val2',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le maximum entre les deux valeurs saisies est: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='max',\n                )\n            )\n        )\n      block_items[13]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}