{
    "project_name": "20223_01_14_PassageParReference",
    "functions": [
        {
            "function_name": "min_max_de_3",
            "function_code": "int min_max_de_3(int val1, int val2, int val3, int* adr_max)\n{\n\tint min = val1;\n\tint max = val1;\n\n\tmin = val2 < min ? val2 : min;\n\tmin = val3 < min ? val3 : min;\n\n\tmax = val2 > max ? val2 : max;\n\tmax = val3 > max ? val3 : max;\n\n\t*adr_max = max;\n\n\treturn min; \n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='min_max_de_3',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='val1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='val2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='val3',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='adr_max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='adr_max',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='min_max_de_3',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='max',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='max',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ID(\n              name='val1',\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='min',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val2',\n                    )\n                  right=\n                    ID(\n                      name='min',\n                    )\n                )\n              iftrue=\n                ID(\n                  name='val2',\n                )\n              iffalse=\n                ID(\n                  name='min',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='min',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val3',\n                    )\n                  right=\n                    ID(\n                      name='min',\n                    )\n                )\n              iftrue=\n                ID(\n                  name='val3',\n                )\n              iffalse=\n                ID(\n                  name='min',\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='max',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='>',\n                  left=\n                    ID(\n                      name='val2',\n                    )\n                  right=\n                    ID(\n                      name='max',\n                    )\n                )\n              iftrue=\n                ID(\n                  name='val2',\n                )\n              iffalse=\n                ID(\n                  name='max',\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='max',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='>',\n                  left=\n                    ID(\n                      name='val3',\n                    )\n                  right=\n                    ID(\n                      name='max',\n                    )\n                )\n              iftrue=\n                ID(\n                  name='val3',\n                )\n              iffalse=\n                ID(\n                  name='max',\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='adr_max',\n                )\n            )\n          rvalue=\n            ID(\n              name='max',\n            )\n        )\n      block_items[7]=\n        Return(\n          expr=\n            ID(\n              name='min',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n\tint le_min, le_max; \n\n\tle_min = min_max_de_3(10, 28, 3, &le_max);\n\n\tprintf(\"Le minimum: %d, Le maximum: %d\\n\", le_min, le_max);\n\n\tsystem(\"pause\");\n\treturn 0;\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='le_min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='le_min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='le_max',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='le_max',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='le_min',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='min_max_de_3',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='10',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='28',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                  exprs[3]=\n                    UnaryOp(\n                      op='&',\n                      expr=\n                        ID(\n                          name='le_max',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le minimum: %d, Le maximum: %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='le_min',\n                )\n              exprs[2]=\n                ID(\n                  name='le_max',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[5]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}