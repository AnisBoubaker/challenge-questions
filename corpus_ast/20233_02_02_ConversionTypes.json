{
    "project_name": "20233_02_02_ConversionTypes",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    double distance;  \n    float trajet_parcouru;  \n    int valeur_entiere;\n    double salaire;\n\n\n    distance = 1345.50;\n\n    trajet_parcouru = (float)distance;\n\n    valeur_entiere = (int)distance;\n\n    printf(\"Contenu de valeur_entirere: %i\\n\", valeur_entiere);\n\n     \n     \n    printf(\"Conetnu de salaire: %f\\n\", salaire);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='distance',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='distance',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='trajet_parcouru',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='trajet_parcouru',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['float'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='valeur_entiere',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='valeur_entiere',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='salaire',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='salaire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='distance',\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='1345.50',\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='trajet_parcouru',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['float'],\n                        )\n                    )\n                )\n              expr=\n                ID(\n                  name='distance',\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='valeur_entiere',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              expr=\n                ID(\n                  name='distance',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Contenu de valeur_entirere: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='valeur_entiere',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Conetnu de salaire: %f\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='salaire',\n                )\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}