{
    "project_name": "20233_02_35_Exercice_Machines",
    "functions": [
        {
            "function_name": "date_cmp",
            "function_code": "int date_cmp(t_date date1, t_date date2)\n{\n    if( date1.annee != date2.annee )\n    {\n        return date1.annee - date2.annee;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='date_cmp',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='date1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='date1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_date'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='date2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='date2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_date'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='date_cmp',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='date1',\n                    )\n                  field=\n                    ID(\n                      name='annee',\n                    )\n                )\n              right=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='date2',\n                    )\n                  field=\n                    ID(\n                      name='annee',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        StructRef(\n                          type='.',\n                          name=\n                            ID(\n                              name='date1',\n                            )\n                          field=\n                            ID(\n                              name='annee',\n                            )\n                        )\n                      right=\n                        StructRef(\n                          type='.',\n                          name=\n                            ID(\n                              name='date2',\n                            )\n                          field=\n                            ID(\n                              name='annee',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='date1',\n                    )\n                  field=\n                    ID(\n                      name='mois',\n                    )\n                )\n              right=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='date2',\n                    )\n                  field=\n                    ID(\n                      name='mois',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        StructRef(\n                          type='.',\n                          name=\n                            ID(\n                              name='date1',\n                            )\n                          field=\n                            ID(\n                              name='mois',\n                            )\n                        )\n                      right=\n                        StructRef(\n                          type='.',\n                          name=\n                            ID(\n                              name='date2',\n                            )\n                          field=\n                            ID(\n                              name='mois',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            BinaryOp(\n              op='-',\n              left=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='date1',\n                    )\n                  field=\n                    ID(\n                      name='jour',\n                    )\n                )\n              right=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='date2',\n                    )\n                  field=\n                    ID(\n                      name='jour',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "date_set_date",
            "function_code": "int date_set_date(t_date* date, int jour, int mois, int annee)\n{\n    if(date_valide(jour, mois, annee))\n    {\n        date->jour = jour;\n        date->mois = mois;\n        date->annee = annee;\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='date_set_date',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='date',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='date',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_date'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='jour',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='jour',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='mois',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='mois',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='annee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='annee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='date_set_date',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='date_valide',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='jour',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='mois',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='annee',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='date',\n                        )\n                      field=\n                        ID(\n                          name='jour',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='jour',\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='date',\n                        )\n                      field=\n                        ID(\n                          name='mois',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='mois',\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='date',\n                        )\n                      field=\n                        ID(\n                          name='annee',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='annee',\n                    )\n                )\n              block_items[3]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "est_bissextile",
            "function_code": "int est_bissextile(int annee)\n{\n    if(  (annee%4==0 && annee%100!=0) || annee%400==0  )\n    {\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='est_bissextile',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='annee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='annee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='est_bissextile',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='%',\n                          left=\n                            ID(\n                              name='annee',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        BinaryOp(\n                          op='%',\n                          left=\n                            ID(\n                              name='annee',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    BinaryOp(\n                      op='%',\n                      left=\n                        ID(\n                          name='annee',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='400',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "max_jours_mois",
            "function_code": "int max_jours_mois(int mois, int annee)\n{\n    switch(mois)\n    {\n        case AVRIL:\n        case JUIN:\n        case SEPTEMBRE:\n        case NOVEMBRE:\n            return 30;\n        case JANVIER:\n        case MARS:\n        case MAI:\n        case JUILLET:\n        case AOUT:\n        case OCTOBRE:\n        case DECEMBRE:\n            return 31;\n        case FEVRIER:\n            return est_bissextile(annee) ? 29 : 28;\n        default:\n            return -1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='max_jours_mois',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='mois',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='mois',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='annee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='annee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='max_jours_mois',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Switch(\n          cond=\n            ID(\n              name='mois',\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Case(\n                  expr=\n                    ID(\n                      name='AVRIL',\n                    )\n                )\n              block_items[1]=\n                Case(\n                  expr=\n                    ID(\n                      name='JUIN',\n                    )\n                )\n              block_items[2]=\n                Case(\n                  expr=\n                    ID(\n                      name='SEPTEMBRE',\n                    )\n                )\n              block_items[3]=\n                Case(\n                  expr=\n                    ID(\n                      name='NOVEMBRE',\n                    )\n                  stmts[0]=\n                    Return(\n                      expr=\n                        Constant(\n                          type='int',\n                          value='30',\n                        )\n                    )\n                )\n              block_items[4]=\n                Case(\n                  expr=\n                    ID(\n                      name='JANVIER',\n                    )\n                )\n              block_items[5]=\n                Case(\n                  expr=\n                    ID(\n                      name='MARS',\n                    )\n                )\n              block_items[6]=\n                Case(\n                  expr=\n                    ID(\n                      name='MAI',\n                    )\n                )\n              block_items[7]=\n                Case(\n                  expr=\n                    ID(\n                      name='JUILLET',\n                    )\n                )\n              block_items[8]=\n                Case(\n                  expr=\n                    ID(\n                      name='AOUT',\n                    )\n                )\n              block_items[9]=\n                Case(\n                  expr=\n                    ID(\n                      name='OCTOBRE',\n                    )\n                )\n              block_items[10]=\n                Case(\n                  expr=\n                    ID(\n                      name='DECEMBRE',\n                    )\n                  stmts[0]=\n                    Return(\n                      expr=\n                        Constant(\n                          type='int',\n                          value='31',\n                        )\n                    )\n                )\n              block_items[11]=\n                Case(\n                  expr=\n                    ID(\n                      name='FEVRIER',\n                    )\n                  stmts[0]=\n                    Return(\n                      expr=\n                        TernaryOp(\n                          cond=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='est_bissextile',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='annee',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Constant(\n                              type='int',\n                              value='29',\n                            )\n                          iffalse=\n                            Constant(\n                              type='int',\n                              value='28',\n                            )\n                        )\n                    )\n                )\n              block_items[12]=\n                Default(\n                  stmts[0]=\n                    Return(\n                      expr=\n                        UnaryOp(\n                          op='-',\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "date_valide",
            "function_code": "int date_valide(int jour, int mois, int annee)\n{\n    if(jour >= 1 && jour <= max_jours_mois(mois, annee))\n    {\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='date_valide',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='jour',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='jour',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='mois',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='mois',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='annee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='annee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='date_valide',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='>=',\n                  left=\n                    ID(\n                      name='jour',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='<=',\n                  left=\n                    ID(\n                      name='jour',\n                    )\n                  right=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='max_jours_mois',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='mois',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='annee',\n                            )\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='machines',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='machines',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_machine'],\n                        )\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='date_seuil',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='date_seuil',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['t_date'],\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='machine_jeu_machines',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='machines',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='50',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='a_maintenir',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='a_maintenir',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_machine'],\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='nb_a_maintenir',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_a_maintenir',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='date_set_date',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='date_seuil',\n                    )\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                ID(\n                  name='JUILLET',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='2023',\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='a_maintenir',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='machines_a_maintenir',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='machines',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='50',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='date_seuil',\n                    )\n                  exprs[3]=\n                    UnaryOp(\n                      op='&',\n                      expr=\n                        ID(\n                          name='nb_a_maintenir',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_a_maintenir',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='machine_afficher',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='a_maintenir',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "machine_init",
            "function_code": "t_machine* machine_init(int num, const char* num_modele)\n{\n    t_machine* nouv_machine;\n\n    nouv_machine = (t_machine*)malloc(sizeof(t_machine));\n    if(nouv_machine == 0)\n    {\n        return 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='machine_init',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='num',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='num',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='num_modele',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='num_modele',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='machine_init',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_machine'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nouv_machine',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nouv_machine',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['t_machine'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nouv_machine',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_machine'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['t_machine'],\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nouv_machine',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_machine',\n                )\n              field=\n                ID(\n                  name='num_modele',\n                )\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['char'],\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='strlen',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='num_modele',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='num_modele',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nouv_machine',\n                        )\n                    )\n                )\n              block_items[1]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='nouv_machine',\n                )\n              field=\n                ID(\n                  name='num',\n                )\n            )\n          rvalue=\n            ID(\n              name='num',\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='strcpy',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='num_modele',\n                    )\n                )\n              exprs[1]=\n                ID(\n                  name='num_modele',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='date_mise_service',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='date_mise_service',\n                    )\n                )\n              field=\n                ID(\n                  name='mois',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='date_mise_service',\n                    )\n                )\n              field=\n                ID(\n                  name='annee',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='date_maintenance',\n                    )\n                )\n              field=\n                ID(\n                  name='jour',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='date_maintenance',\n                    )\n                )\n              field=\n                ID(\n                  name='mois',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='nouv_machine',\n                    )\n                  field=\n                    ID(\n                      name='date_maintenance',\n                    )\n                )\n              field=\n                ID(\n                  name='annee',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[13]=\n        Return(\n          expr=\n            ID(\n              name='nouv_machine',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "machine_free",
            "function_code": "void machine_free(t_machine* machine)\n{\n    free(machine->num_modele);\n    free(machine);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='machine_free',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='machine',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='machine',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_machine'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='machine_free',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='machine',\n                    )\n                  field=\n                    ID(\n                      name='num_modele',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='free',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='machine',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "machine_afficher",
            "function_code": "void machine_afficher(const t_machine* m)\n{\n    printf(\"****** MACHINE NUM %i ********\\n\", m->num);\n    printf(\"Modele: %s\\n\", m->num_modele);\n    printf(\"Date de mise en service: %i/%i/%i\\n\",\n           m->date_mise_service.jour,\n           m->date_mise_service.mois,\n           m->date_mise_service.annee);\n    printf(\"Date de derniere maintenance: %i/%i/%i\\n\",\n           m->date_maintenance.jour,\n           m->date_maintenance.mois,\n           m->date_maintenance.annee);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='machine_afficher',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='m',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='m',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['t_machine'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='machine_afficher',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"****** MACHINE NUM %i ********\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='m',\n                    )\n                  field=\n                    ID(\n                      name='num',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Modele: %s\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='->',\n                  name=\n                    ID(\n                      name='m',\n                    )\n                  field=\n                    ID(\n                      name='num_modele',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Date de mise en service: %i/%i/%i\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='m',\n                        )\n                      field=\n                        ID(\n                          name='date_mise_service',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='jour',\n                    )\n                )\n              exprs[2]=\n                StructRef(\n                  type='.',\n                  name=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='m',\n                        )\n                      field=\n                        ID(\n                          name='date_mise_service',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='mois',\n                    )\n                )\n              exprs[3]=\n                StructRef(\n                  type='.',\n                  name=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='m',\n                        )\n                      field=\n                        ID(\n                          name='date_mise_service',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='annee',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Date de derniere maintenance: %i/%i/%i\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='m',\n                        )\n                      field=\n                        ID(\n                          name='date_maintenance',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='jour',\n                    )\n                )\n              exprs[2]=\n                StructRef(\n                  type='.',\n                  name=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='m',\n                        )\n                      field=\n                        ID(\n                          name='date_maintenance',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='mois',\n                    )\n                )\n              exprs[3]=\n                StructRef(\n                  type='.',\n                  name=\n                    StructRef(\n                      type='->',\n                      name=\n                        ID(\n                          name='m',\n                        )\n                      field=\n                        ID(\n                          name='date_maintenance',\n                        )\n                    )\n                  field=\n                    ID(\n                      name='annee',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "machine_jeu_machines",
            "function_code": "void machine_jeu_machines(t_machine* machines[], int nb)\n{\n    char num_modele[10];\n    for(int i=0; i<nb; i++)\n    {\n        sprintf(num_modele, \"%c%i%c%i\", (char)nb_aleatoire(65, 90), nb_aleatoire(100, 500), (char)nb_aleatoire(65, 90),\n                nb_aleatoire(100, 500));\n        machines[i] = machine_init(i, num_modele);\n        date_set_date(&(machines[i]->date_mise_service), nb_aleatoire(1, 28), nb_aleatoire(1, 12), 2023);\n        date_set_date(&(machines[i]->date_maintenance), nb_aleatoire(1, 28), nb_aleatoire(1, 12), 2023);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='machine_jeu_machines',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='machines',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        PtrDecl(\n                          quals=[],\n                          type=\n                            TypeDecl(\n                              declname='machines',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['t_machine'],\n                                )\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='machine_jeu_machines',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='num_modele',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='num_modele',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='sprintf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='num_modele',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='string',\n                          value='\"%c%i%c%i\"',\n                        )\n                      exprs[2]=\n                        Cast(\n                          to_type=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['char'],\n                                    )\n                                )\n                            )\n                          expr=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='nb_aleatoire',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='int',\n                                      value='65',\n                                    )\n                                  exprs[1]=\n                                    Constant(\n                                      type='int',\n                                      value='90',\n                                    )\n                                )\n                            )\n                        )\n                      exprs[3]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='500',\n                                )\n                            )\n                        )\n                      exprs[4]=\n                        Cast(\n                          to_type=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                TypeDecl(\n                                  declname=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['char'],\n                                    )\n                                )\n                            )\n                          expr=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='nb_aleatoire',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='int',\n                                      value='65',\n                                    )\n                                  exprs[1]=\n                                    Constant(\n                                      type='int',\n                                      value='90',\n                                    )\n                                )\n                            )\n                        )\n                      exprs[5]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='500',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='machines',\n                        )\n                      subscript=\n                        ID(\n                          name='i',\n                        )\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='machine_init',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='i',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='num_modele',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='date_set_date',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            StructRef(\n                              type='->',\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='machines',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              field=\n                                ID(\n                                  name='date_mise_service',\n                                )\n                            )\n                        )\n                      exprs[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='28',\n                                )\n                            )\n                        )\n                      exprs[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='12',\n                                )\n                            )\n                        )\n                      exprs[3]=\n                        Constant(\n                          type='int',\n                          value='2023',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='date_set_date',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            StructRef(\n                              type='->',\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='machines',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              field=\n                                ID(\n                                  name='date_maintenance',\n                                )\n                            )\n                        )\n                      exprs[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='28',\n                                )\n                            )\n                        )\n                      exprs[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='12',\n                                )\n                            )\n                        )\n                      exprs[3]=\n                        Constant(\n                          type='int',\n                          value='2023',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "machines_a_maintenir",
            "function_code": "t_machine** machines_a_maintenir(t_machine* liste_machines[],\n                                 int nb_machines,\n                                 t_date date_min,\n                                 int* nb_a_maintenir)\n{\n    t_machine** a_maintenir;\n    t_machine** tmp;  \n    *nb_a_maintenir = 0;\n\n    a_maintenir = (t_machine**)malloc(sizeof(t_machine*)*nb_machines);\n    if(a_maintenir == 0)\n    {\n        return 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='machines_a_maintenir',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='liste_machines',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        PtrDecl(\n                          quals=[],\n                          type=\n                            TypeDecl(\n                              declname='liste_machines',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['t_machine'],\n                                )\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_machines',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_machines',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='date_min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='date_min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_date'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='nb_a_maintenir',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_a_maintenir',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='machines_a_maintenir',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_machine'],\n                        )\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='a_maintenir',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='a_maintenir',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_machine'],\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='tmp',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='tmp',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['t_machine'],\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_a_maintenir',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='a_maintenir',\n            )\n          rvalue=\n            Cast(\n              to_type=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        PtrDecl(\n                          quals=[],\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['t_machine'],\n                                )\n                            )\n                        )\n                    )\n                )\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='malloc',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            UnaryOp(\n                              op='sizeof',\n                              expr=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    PtrDecl(\n                                      quals=[],\n                                      type=\n                                        TypeDecl(\n                                          declname=None,\n                                          quals=[],\n                                          align=None,\n                                          type=\n                                            IdentifierType(\n                                              names=['t_machine'],\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            ID(\n                              name='nb_machines',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='a_maintenir',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='nb_machines',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='date_cmp',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                StructRef(\n                                  type='->',\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='liste_machines',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  field=\n                                    ID(\n                                      name='date_maintenance',\n                                    )\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='date_min',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='a_maintenir',\n                                )\n                              subscript=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='nb_a_maintenir',\n                                    )\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='liste_machines',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_a_maintenir',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='tmp',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='realloc',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='a_maintenir',\n                    )\n                  exprs[1]=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        UnaryOp(\n                          op='sizeof',\n                          expr=\n                            Typename(\n                              name=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                PtrDecl(\n                                  quals=[],\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['t_machine'],\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        UnaryOp(\n                          op='*',\n                          expr=\n                            ID(\n                              name='nb_a_maintenir',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='tmp',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    ID(\n                      name='a_maintenir',\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='a_maintenir',\n            )\n          rvalue=\n            ID(\n              name='tmp',\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            ID(\n              name='a_maintenir',\n            )\n        )\n    )\n)"
        }
    ]
}