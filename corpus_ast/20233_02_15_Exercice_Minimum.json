{
    "project_name": "20233_02_15_Exercice_Minimum",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='min_de_3',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='32',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='18',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%lf\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='min_de_3',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='30',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='-',\n                          expr=\n                            Constant(\n                              type='int',\n                              value='40',\n                            )\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='50',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "min_de_3",
            "function_code": "double min_de_3(double val1, double val2, double val3)\n{\n    double val1_abs, val2_abs, val3_abs;\n    double min;\n\n     \n    val1_abs = val1<0 ? -val1 : val1;\n    val2_abs = val2<0 ? -val2 : val2;\n    val3_abs = val3<0 ? -val3 : val3;\n\n    min = val1_abs;\n    if(val2_abs < min )\n    {\n        min = val2_abs;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='min_de_3',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='val1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='val2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='val3',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='val3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['double'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='min_de_3',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='val1_abs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val1_abs',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='val2_abs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val2_abs',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='val3_abs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='val3_abs',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='min',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='min',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['double'],\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='val1_abs',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val1',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              iftrue=\n                UnaryOp(\n                  op='-',\n                  expr=\n                    ID(\n                      name='val1',\n                    )\n                )\n              iffalse=\n                ID(\n                  name='val1',\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='val2_abs',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val2',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              iftrue=\n                UnaryOp(\n                  op='-',\n                  expr=\n                    ID(\n                      name='val2',\n                    )\n                )\n              iffalse=\n                ID(\n                  name='val2',\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='val3_abs',\n            )\n          rvalue=\n            TernaryOp(\n              cond=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='val3',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              iftrue=\n                UnaryOp(\n                  op='-',\n                  expr=\n                    ID(\n                      name='val3',\n                    )\n                )\n              iffalse=\n                ID(\n                  name='val3',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='min',\n            )\n          rvalue=\n            ID(\n              name='val1_abs',\n            )\n        )\n      block_items[8]=\n        If(\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='val2_abs',\n                )\n              right=\n                ID(\n                  name='min',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val2_abs',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        If(\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='val3_abs',\n                )\n              right=\n                ID(\n                  name='min',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='min',\n                    )\n                  rvalue=\n                    ID(\n                      name='val3_abs',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            ID(\n              name='min',\n            )\n        )\n    )\n)"
        }
    ]
}