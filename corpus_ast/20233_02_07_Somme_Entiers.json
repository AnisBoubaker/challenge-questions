{
    "project_name": "20233_02_07_Somme_Entiers",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main() {\n   int n;  \n   int somme = 0;\n   int compteur = 1;\n\n   printf(\"Saisir le maximum de la somme: \");\n   scanf(\"%i\", &n);\n\n   while( compteur <= n )\n   {\n       somme = somme + compteur;\n       compteur++;\n   }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='n',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='n',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='somme',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='somme',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='compteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='compteur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir le maximum de la somme: \"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%i\"',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='n',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        While(\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                ID(\n                  name='compteur',\n                )\n              right=\n                ID(\n                  name='n',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='somme',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='somme',\n                        )\n                      right=\n                        ID(\n                          name='compteur',\n                        )\n                    )\n                )\n              block_items[1]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='compteur',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"La somme des entiers entre 1 et %i est: %i\"',\n                )\n              exprs[1]=\n                ID(\n                  name='n',\n                )\n              exprs[2]=\n                ID(\n                  name='somme',\n                )\n            )\n        )\n      block_items[7]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}