{
    "project_name": "20233_02_21_Exercice_MinMaj",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    int nb_minuscules, nb_majuscules;\n    char caracteres[100] = {'B', 'o', 'n', 'j', 'o', 'u', 'r', ' ', 'E', 'T', 'S'};\n\n    majuscules_minuscules(caracteres, 11, &nb_majuscules, &nb_minuscules);\n\n    printf(\"Il y a %i majuscules et %i minuscules\\n\", nb_majuscules, nb_minuscules);\n\n\n\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nb_minuscules',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_minuscules',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_majuscules',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_majuscules',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='caracteres',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='caracteres',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='char',\n                  value=\"'B'\",\n                )\n              exprs[1]=\n                Constant(\n                  type='char',\n                  value=\"'o'\",\n                )\n              exprs[2]=\n                Constant(\n                  type='char',\n                  value=\"'n'\",\n                )\n              exprs[3]=\n                Constant(\n                  type='char',\n                  value=\"'j'\",\n                )\n              exprs[4]=\n                Constant(\n                  type='char',\n                  value=\"'o'\",\n                )\n              exprs[5]=\n                Constant(\n                  type='char',\n                  value=\"'u'\",\n                )\n              exprs[6]=\n                Constant(\n                  type='char',\n                  value=\"'r'\",\n                )\n              exprs[7]=\n                Constant(\n                  type='char',\n                  value=\"' '\",\n                )\n              exprs[8]=\n                Constant(\n                  type='char',\n                  value=\"'E'\",\n                )\n              exprs[9]=\n                Constant(\n                  type='char',\n                  value=\"'T'\",\n                )\n              exprs[10]=\n                Constant(\n                  type='char',\n                  value=\"'S'\",\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='majuscules_minuscules',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='caracteres',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='11',\n                )\n              exprs[2]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_majuscules',\n                    )\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_minuscules',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Il y a %i majuscules et %i minuscules\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_majuscules',\n                )\n              exprs[2]=\n                ID(\n                  name='nb_minuscules',\n                )\n            )\n        )\n      block_items[5]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "majuscules_minuscules",
            "function_code": "void majuscules_minuscules(char tab[], int taille, int* nb_maj, int* nb_min)\n{\n    *nb_maj = 0;\n    *nb_min = 0;\n    for(int i=0; i< taille; i++)\n    {\n        if(tab[i]>= 'A' && tab[i]<='Z')\n        {\n            *nb_maj+=1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='majuscules_minuscules',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='tab',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='tab',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='nb_maj',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_maj',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='nb_min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_min',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='majuscules_minuscules',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_maj',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_min',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='taille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='char',\n                              value=\"'A'\",\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='tab',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='char',\n                              value=\"'Z'\",\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='+=',\n                          lvalue=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_maj',\n                                )\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='&&',\n                          left=\n                            BinaryOp(\n                              op='>=',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='tab',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='char',\n                                  value=\"'a'\",\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='<=',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='tab',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='char',\n                                  value=\"'z'\",\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='nb_min',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        }
    ]
}