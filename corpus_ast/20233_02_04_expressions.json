{
    "project_name": "20233_02_04_expressions",
    "functions": [
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n    int nombre_etudiants;\n    int etudiants_par_groupe;  \n    int resultat;  \n    int etudiants_orphelins;\n\n    int x;\n    int y;\n\n    nombre_etudiants = 10;\n    etudiants_par_groupe = 3;\n\n     \n     \n\n\n    resultat = nombre_etudiants / etudiants_par_groupe;\n\n    etudiants_orphelins = nombre_etudiants % etudiants_par_groupe;\n\n    printf(\"Le nombre de groupes est: %i\\n\", resultat);\n    printf(\"Et il reste %i etudiants malheureux.\\n\", etudiants_orphelins);\n\n    x = 11;\n    y = ++x / 3;\n\n    printf(\"LE contenu de x: %i\\n\", x);\n    printf(\"LE contenu de y: %i\\n\", y);\n\n\n\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nombre_etudiants',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nombre_etudiants',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='etudiants_par_groupe',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='etudiants_par_groupe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='resultat',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='resultat',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='etudiants_orphelins',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='etudiants_orphelins',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='x',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='x',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='y',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='y',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nombre_etudiants',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='etudiants_par_groupe',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='3',\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='resultat',\n            )\n          rvalue=\n            BinaryOp(\n              op='/',\n              left=\n                ID(\n                  name='nombre_etudiants',\n                )\n              right=\n                ID(\n                  name='etudiants_par_groupe',\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='etudiants_orphelins',\n            )\n          rvalue=\n            BinaryOp(\n              op='%',\n              left=\n                ID(\n                  name='nombre_etudiants',\n                )\n              right=\n                ID(\n                  name='etudiants_par_groupe',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le nombre de groupes est: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='resultat',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Et il reste %i etudiants malheureux.\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='etudiants_orphelins',\n                )\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='x',\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='11',\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='y',\n            )\n          rvalue=\n            BinaryOp(\n              op='/',\n              left=\n                UnaryOp(\n                  op='++',\n                  expr=\n                    ID(\n                      name='x',\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"LE contenu de x: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='x',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"LE contenu de y: %i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='y',\n                )\n            )\n        )\n      block_items[16]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        }
    ]
}