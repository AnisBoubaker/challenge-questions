{
    "project_name": "TP1-Gr05-EquipeI_219705_assignsubmission_file",
    "functions": [
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille(int grille[][100], int hauteur_grille,\n                         int largeur_grille, int pile_solution[][2])\n{\n    int ligne, colonne;  \n\n     \n    for (ligne = 0; ligne < hauteur_grille; ligne++)\n    {\n         \n        for (colonne = 0; colonne < largeur_grille; colonne++)\n        {\n             \n            if (grille[ligne][colonne] == 1)\n                printf(\"%c\", 219);\n            else\n            {\n                 \n                if (pile_est_vide(pile_solution) != 1)\n                {\n                     \n                    if (pile_contient(pile_solution, ligne, colonne) == 1)\n                        printf(\"%c\", 88);\n                    else\n                         \n                        printf(\"%c\", 32);\n                }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            Assignment(\n              op='=',\n              lvalue=\n                ID(\n                  name='ligne',\n                )\n              rvalue=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='ligne',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='ligne',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='colonne',\n                        )\n                      rvalue=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='colonne',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='colonne',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='ligne',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='colonne',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"%c\"',\n                                    )\n                                  exprs[1]=\n                                    Constant(\n                                      type='int',\n                                      value='219',\n                                    )\n                                )\n                            )\n                          iffalse=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='pile_est_vide',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='pile_solution',\n                                                )\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        If(\n                                          cond=\n                                            BinaryOp(\n                                              op='==',\n                                              left=\n                                                FuncCall(\n                                                  name=\n                                                    ID(\n                                                      name='pile_contient',\n                                                    )\n                                                  args=\n                                                    ExprList(\n                                                      exprs[0]=\n                                                        ID(\n                                                          name='pile_solution',\n                                                        )\n                                                      exprs[1]=\n                                                        ID(\n                                                          name='ligne',\n                                                        )\n                                                      exprs[2]=\n                                                        ID(\n                                                          name='colonne',\n                                                        )\n                                                    )\n                                                )\n                                              right=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          iftrue=\n                                            FuncCall(\n                                              name=\n                                                ID(\n                                                  name='printf',\n                                                )\n                                              args=\n                                                ExprList(\n                                                  exprs[0]=\n                                                    Constant(\n                                                      type='string',\n                                                      value='\"%c\"',\n                                                    )\n                                                  exprs[1]=\n                                                    Constant(\n                                                      type='int',\n                                                      value='88',\n                                                    )\n                                                )\n                                            )\n                                          iffalse=\n                                            FuncCall(\n                                              name=\n                                                ID(\n                                                  name='printf',\n                                                )\n                                              args=\n                                                ExprList(\n                                                  exprs[0]=\n                                                    Constant(\n                                                      type='string',\n                                                      value='\"%c\"',\n                                                    )\n                                                  exprs[1]=\n                                                    Constant(\n                                                      type='int',\n                                                      value='32',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                  iffalse=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"%c\"',\n                                            )\n                                          exprs[1]=\n                                            Constant(\n                                              type='int',\n                                              value='32',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_calculer_deplacements_possibles",
            "function_code": "void lab_calculer_deplacements_possibles(int grille[][100],\n                                         int hauteur_grille, int largeur_grille,\n                                         int pos_ligne, int pos_colonne,\n                                         int solution_partielle[][2],\n                                         int *nb_deplacements, int deplacements[4][2])\n{\n     \n    int directions[4][2] = {{-1, 0},     \n                            {1,  0},     \n                            {0,  -1},    \n                            {0,  1}};    \n    int nouvelle_ligne;\n    int nouvelle_colonne;\n\n     \n    *nb_deplacements = 0;\n\n    for (int i = 0; i < 4; i++)\n    {\n        nouvelle_ligne = pos_ligne + directions[i][0];\n        nouvelle_colonne = pos_colonne + directions[i][1];\n\n         \n        if (nouvelle_ligne >= 0 && nouvelle_ligne < hauteur_grille - 1 &&\n            nouvelle_colonne >= 0 && nouvelle_colonne < largeur_grille - 1)\n        {\n             \n            if (grille[nouvelle_ligne][nouvelle_colonne] != 1 &&\n                !pile_contient(solution_partielle, nouvelle_ligne, nouvelle_colonne))\n            {\n                deplacements[*nb_deplacements][0] = nouvelle_ligne;\n                deplacements[*nb_deplacements][1] = nouvelle_colonne;\n                (*nb_deplacements)++;\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='directions',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='directions',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    UnaryOp(\n                      op='-',\n                      expr=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    UnaryOp(\n                      op='-',\n                      expr=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nouvelle_ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nouvelle_ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nouvelle_colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nouvelle_colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='nouvelle_ligne',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='directions',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='nouvelle_colonne',\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='directions',\n                                )\n                              subscript=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='&&',\n                          left=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                BinaryOp(\n                                  op='>=',\n                                  left=\n                                    ID(\n                                      name='nouvelle_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='<',\n                                  left=\n                                    ID(\n                                      name='nouvelle_ligne',\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='-',\n                                      left=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='>=',\n                              left=\n                                ID(\n                                  name='nouvelle_colonne',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='nouvelle_colonne',\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='nouvelle_ligne',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='nouvelle_colonne',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                UnaryOp(\n                                  op='!',\n                                  expr=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_contient',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='solution_partielle',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='nouvelle_ligne',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='nouvelle_colonne',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='deplacements',\n                                            )\n                                          subscript=\n                                            UnaryOp(\n                                              op='*',\n                                              expr=\n                                                ID(\n                                                  name='nb_deplacements',\n                                                )\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  rvalue=\n                                    ID(\n                                      name='nouvelle_ligne',\n                                    )\n                                )\n                              block_items[1]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='deplacements',\n                                            )\n                                          subscript=\n                                            UnaryOp(\n                                              op='*',\n                                              expr=\n                                                ID(\n                                                  name='nb_deplacements',\n                                                )\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  rvalue=\n                                    ID(\n                                      name='nouvelle_colonne',\n                                    )\n                                )\n                              block_items[2]=\n                                UnaryOp(\n                                  op='p++',\n                                  expr=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(int deplacements_possibles[][2],\n                            int nb_deplacements_possibles)\n{\n     \n    int indice_choisi;\n\n     \n    indice_choisi = -1;\n    indice_choisi = nb_aleatoire(0, nb_deplacements_possibles - 1);\n\n    return indice_choisi;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='indice_choisi',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='indice_choisi',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='indice_choisi',\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='indice_choisi',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='nb_aleatoire',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='indice_choisi',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n     \n    if ((case1[0] == case2[0] && abs(case1[1] - case2[1]) == 1) ||\n        (case1[1] == case2[1] && abs(case1[0] - case2[0]) == 1))\n        return 1;\n    else\n         \n        return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case2',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='abs',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case1',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  right=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case2',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='abs',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case1',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iffalse=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(int position[2], int grille[][100],\n                       int hauteur_grille, int largeur_grille)\n{\n     \n    int est_une_sortie = 0;\n\n     \n    if (position[0] == 0 || position[0] == hauteur_grille - 1 ||\n        position[1] == 0 || position[1] == largeur_grille - 1)\n    {\n         \n        if (grille[position[0]][position[1]] != 1)\n            est_une_sortie = 1;  \n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='est_une_sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='est_une_sortie',\n                        )\n                      rvalue=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='est_une_sortie',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(int grille[][100], int hauteur_grille,\n                            int largeur_grille, int entree[2], int pile_solution[][2],\n                            int debug)\n{\n    int pile_chemins_alternatifs[1000][2];\n\n    int deplacements_possibles[4][2];\n    int nb_deplacements_possibles = -1;\n    int nouvelle_position[2];\n\n    int case_haut_pile[2];\n    int choix_deplacement;\n    int pos_ligne, pos_colonne;\n\n     \n    pile_initialiser(pile_chemins_alternatifs, 1000);\n    pile_initialiser(pile_solution, 1000);\n\n     \n    pile_empiler(pile_solution, entree[0], entree[1]);\n\n     \n    while (nb_deplacements_possibles != 0 &&\n           lab_est_une_sortie(case_haut_pile, grille, hauteur_grille, largeur_grille) != 1)\n    {\n         \n        pile_haut_pile(pile_solution, &pos_ligne, &pos_colonne);\n\n         \n        lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille,\n                                            pos_ligne, pos_colonne, pile_solution,\n                                            &nb_deplacements_possibles,\n                                            deplacements_possibles);\n         \n        if (nb_deplacements_possibles > 0)\n        {\n             \n            choix_deplacement = lab_choisir_deplacement(deplacements_possibles,\n                                                        nb_deplacements_possibles);\n\n             \n            pile_empiler(pile_solution, deplacements_possibles[choix_deplacement][0],\n                         deplacements_possibles[choix_deplacement][1]);\n\n             \n            for (int i = 0; i < nb_deplacements_possibles; i++)\n            {\n                if (i != choix_deplacement)\n                    pile_empiler(pile_chemins_alternatifs, deplacements_possibles[i][0],\n                                 deplacements_possibles[i][1]);\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_chemins_alternatifs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemins_alternatifs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nouvelle_position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='case_haut_pile',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case_haut_pile',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='choix_deplacement',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='pos_ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='pos_ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='pos_colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='pos_colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemins_alternatifs',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        While(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    ID(\n                      name='nb_deplacements_possibles',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='case_haut_pile',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_haut_pile',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='pos_ligne',\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='pos_colonne',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      exprs[4]=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[6]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='nb_deplacements_possibles',\n                            )\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='choix_deplacement',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_choisir_deplacement',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='nb_deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='choix_deplacement',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              exprs[2]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='choix_deplacement',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        For(\n                          init=\n                            DeclList(\n                              decls[0]=\n                                Decl(\n                                  name='i',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    TypeDecl(\n                                      declname='i',\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                  init=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='i',\n                                )\n                              right=\n                                ID(\n                                  name='nb_deplacements_possibles',\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ID(\n                                          name='i',\n                                        )\n                                      right=\n                                        ID(\n                                          name='choix_deplacement',\n                                        )\n                                    )\n                                  iftrue=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_empiler',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_chemins_alternatifs',\n                                            )\n                                          exprs[1]=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='deplacements_possibles',\n                                                    )\n                                                  subscript=\n                                                    ID(\n                                                      name='i',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='0',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='deplacements_possibles',\n                                                    )\n                                                  subscript=\n                                                    ID(\n                                                      name='i',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='&&',\n                          left=\n                            BinaryOp(\n                              op='!=',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_est_vide',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemins_alternatifs',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='!=',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_est_une_sortie',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='case_haut_pile',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_depiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_haut_pile',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='case_haut_pile',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='case_haut_pile',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[2]=\n                            While(\n                              cond=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_est_cases_adjacentes',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='case_haut_pile',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              stmt=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_depiler',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='pos_ligne',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='pos_colonne',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_haut_pile',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='case_haut_pile',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='case_haut_pile',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[3]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[4]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_calculer_deplacements_possibles',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='hauteur_grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                  exprs[3]=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  exprs[4]=\n                                    ID(\n                                      name='pos_colonne',\n                                    )\n                                  exprs[5]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[6]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements_possibles',\n                                        )\n                                    )\n                                  exprs[7]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                      iffalse=\n                        Break(\n                        )\n                    )\n                )\n              block_items[3]=\n                If(\n                  cond=\n                    ID(\n                      name='debug',\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_afficher_grille',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\n\"',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='system',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"pause\"',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_haut_pile',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case_haut_pile',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case_haut_pile',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_une_sortie',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pile_solution',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main()\n{\n\n    int sortie = 0;\n\n    int choix_menu = -1;\n\n    int grille_chargee = 0;\n\n    int debug = 0;\n\n    int est_resolu = 0;\n\n    int grille[100][100];\n\n    int point_entree[2];\n\n    int hauteur_grille, largeur_grille;\n\n    int pile_solution[1000][2];\n\n    char nom_fichier[100];\n\n    srand((unsigned int)time(0));\n\n    pile_initialiser(pile_solution, 1000);\n\n    do\n    {\n        choix_menu = selection_menu(grille_chargee);\n\n        switch (choix_menu)\n        {\n\n        case 1:\n            menu_charger_labyrinthe(nom_fichier, 100);\n            grille_chargee = charger_labyrinthe(nom_fichier, grille, point_entree,\n                                                &hauteur_grille, &largeur_grille);\n            if (grille_chargee)\n            {\n\n                system(\"cls\");\n\n                printf(\"Grille chargee avec succes:\\n\");\n\n                lab_afficher_grille(grille, hauteur_grille,\n                                    largeur_grille, pile_solution);\n                system(\"pause\");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='choix_menu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='grille_chargee',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='grille_chargee',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='debug',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='debug',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='est_resolu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='est_resolu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[9]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[10]=\n        Decl(\n          name='nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='srand',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['unsigned', 'int'],\n                            )\n                        )\n                    )\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='time',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[13]=\n        DoWhile(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='sortie',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix_menu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='selection_menu',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='grille_chargee',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Switch(\n                  cond=\n                    ID(\n                      name='choix_menu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='menu_charger_labyrinthe',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='nom_fichier',\n                                    )\n                                  exprs[1]=\n                                    Constant(\n                                      type='int',\n                                      value='100',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='grille_chargee',\n                                )\n                              rvalue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='charger_labyrinthe',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='nom_fichier',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='point_entree',\n                                        )\n                                      exprs[3]=\n                                        UnaryOp(\n                                          op='&',\n                                          expr=\n                                            ID(\n                                              name='hauteur_grille',\n                                            )\n                                        )\n                                      exprs[4]=\n                                        UnaryOp(\n                                          op='&',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[2]=\n                            If(\n                              cond=\n                                ID(\n                                  name='grille_chargee',\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='system',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"cls\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Grille chargee avec succes:\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[2]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_afficher_grille',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='hauteur_grille',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                          exprs[3]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                        )\n                                    )\n                                  block_items[3]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='system',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"pause\"',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Erreur lors du chargement de la grille.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='system',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"pause\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[3]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='system',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"cls\"',\n                                    )\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='est_resolu',\n                                )\n                              rvalue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='point_entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[5]=\n                                        ID(\n                                          name='debug',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            If(\n                              cond=\n                                UnaryOp(\n                                  op='!',\n                                  expr=\n                                    ID(\n                                      name='est_resolu',\n                                    )\n                                )\n                              iftrue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"La solution a ete trouvee :-)\\\\n\"',\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Aucune solution trouvee :-(\\\\n\"',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='3',\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='debug',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='est_resolu',\n                                )\n                              rvalue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='point_entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[5]=\n                                        ID(\n                                          name='debug',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[2]=\n                            If(\n                              cond=\n                                ID(\n                                  name='est_resolu',\n                                )\n                              iftrue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='system',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"cls\"',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[3]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='sortie',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "compare",
            "function_code": "int compare(void *a, void *b, size_t size)\n{\n    return memcmp(a, b, size);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='compare',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='a',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='a',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['void'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='b',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='b',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['void'],\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='size',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='size',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['size_t'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='compare',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='memcmp',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='a',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='b',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='size',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int) (rand() / (32767 + 0.001) * (max - min + 1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_afficher_grille_test",
            "function_code": "void lab_afficher_grille_test(void)\n{\n     \n    int pile_solution[1000][2];\n     \n    int grille[100][100];\n     \n    int point_entree[2];\n     \n    int hauteur_grille, largeur_grille;\n\n     \n    pile_initialiser(pile_solution, 1000);\n\n     \n    pile_empiler(pile_solution, 0, 10);\n    pile_empiler(pile_solution, 1, 10);\n    pile_empiler(pile_solution, 1, 9);\n    pile_empiler(pile_solution, 1, 8);\n    pile_empiler(pile_solution, 1, 7);\n    pile_empiler(pile_solution, 1, 11);\n    pile_empiler(pile_solution, 6, 10);\n    pile_empiler(pile_solution, 5, 10);\n    pile_empiler(pile_solution, 5, 9);\n    pile_empiler(pile_solution, 5, 11);\n\n\n     \n    printf(\"grille1.txt\\n\");\n    charger_labyrinthe(\"grille1.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n    lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n    printf(\"\\n\\n\");\n\n\n     \n    printf(\"grille2.txt\\n\");\n    charger_labyrinthe(\"grille2.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n    lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n    printf(\"\\n\\n\");\n\n\n     \n    printf(\"grille3.txt\\n\");\n    charger_labyrinthe(\"grille3.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n    lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n    printf(\"\\n\\n\");\n\n     \n    printf(\"grille4.txt\\n\");\n    charger_labyrinthe(\"grille4.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n    lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n    printf(\"\\n\\n\");\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille_test',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille_test',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='11',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='6',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='11',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\\\\n\"',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solution',\n                )\n            )\n        )\n      block_items[19]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[20]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille2.txt\\\\n\"',\n                )\n            )\n        )\n      block_items[21]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille2.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[22]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solution',\n                )\n            )\n        )\n      block_items[23]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[24]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille3.txt\\\\n\"',\n                )\n            )\n        )\n      block_items[25]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille3.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[26]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solution',\n                )\n            )\n        )\n      block_items[27]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[28]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille4.txt\\\\n\"',\n                )\n            )\n        )\n      block_items[29]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille4.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[30]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solution',\n                )\n            )\n        )\n      block_items[31]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\n\"',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_calculer_deplacements_possibles_test",
            "function_code": "void lab_calculer_deplacements_possibles_test(void)\n{\n    int grille[100][100];\n    int *nb_deplacements;\n    int deplacements[4][2];\n    int sol_par[100][2];\n    int m;\n    int hauteur_grille, largeur_grille;\n    int point_entree[2];\n    nb_deplacements = &m;\n\n\n     \n    charger_labyrinthe(\"grille1.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n\n     \n    pile_initialiser(sol_par, 1000);\n    pile_empiler(sol_par, 0, 10);\n    pile_empiler(sol_par, 1, 10);\n    pile_empiler(sol_par, 1, 9);\n    pile_empiler(sol_par, 1, 8);\n    pile_empiler(sol_par, 2, 8);\n    pile_empiler(sol_par, 3, 8);\n\n    lab_calculer_deplacements_possibles(grille, 12, 12, 3, 8, sol_par, nb_deplacements,\n                                        deplacements);\n    printf(\"\\n%i\\n\", m);\n\n\n    for (int i = 0; i < *nb_deplacements; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            printf(\"%i\", deplacements[i][j]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles_test',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles_test',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nb_deplacements',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='sol_par',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='sol_par',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='m',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='m',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nb_deplacements',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='m',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='12',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='12',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n              exprs[5]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[6]=\n                ID(\n                  name='nb_deplacements',\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n%i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='m',\n                )\n            )\n        )\n      block_items[19]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%i\"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_calculer_deplacements_possibles_test2",
            "function_code": "void lab_calculer_deplacements_possibles_test2(void)\n{\n     \n    int grille[100][100];\n    int *nb_deplacements;\n    int deplacements[4][2];\n    int sol_par[100][2];\n    int m;\n    int hauteur_grille, largeur_grille;\n    int point_entree[2];\n    nb_deplacements = &m;\n\n\n     \n    charger_labyrinthe(\"grille2.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n\n     \n    pile_initialiser(sol_par, 1000);\n    pile_empiler(sol_par, 6, 10);\n    pile_empiler(sol_par, 5, 10);\n\n    lab_calculer_deplacements_possibles(grille, 7, 25, 5, 10, sol_par, nb_deplacements,\n                                        deplacements);\n    printf(\"\\n%i\\n\", m);\n\n     \n    for (int i = 0; i < *nb_deplacements; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            printf(\"%i \", deplacements[i][j]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles_test2',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles_test2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nb_deplacements',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='sol_par',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='sol_par',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='m',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='m',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nb_deplacements',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='m',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille2.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='6',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='25',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[5]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[6]=\n                ID(\n                  name='nb_deplacements',\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n%i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='m',\n                )\n            )\n        )\n      block_items[15]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%i \"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_calculer_deplacements_possibles_test4",
            "function_code": "void lab_calculer_deplacements_possibles_test4(void)\n{\n     \n    int grille[100][100];\n    int *nb_deplacements;\n    int deplacements[4][2];\n    int sol_par[100][2];\n    int m;\n    int hauteur_grille, largeur_grille;\n    int point_entree[2];\n    nb_deplacements = &m;\n\n\n     \n    charger_labyrinthe(\"grille4.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n\n     \n    pile_initialiser(sol_par, 1000);\n    pile_empiler(sol_par, 10, 1);\n    pile_empiler(sol_par, 9, 1);\n\n    lab_calculer_deplacements_possibles(grille, 11, 47, 9, 1, sol_par, nb_deplacements,\n                                        deplacements);\n    printf(\"\\n%i\\n\", m);\n\n     \n    for (int i = 0; i < *nb_deplacements; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            printf(\"%i \", deplacements[i][j]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles_test4',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles_test4',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nb_deplacements',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='sol_par',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='sol_par',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='m',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='m',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nb_deplacements',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='m',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille4.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='11',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='47',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[5]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[6]=\n                ID(\n                  name='nb_deplacements',\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n%i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='m',\n                )\n            )\n        )\n      block_items[15]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%i \"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_choisir_deplacements_test",
            "function_code": "void lab_choisir_deplacements_test(void)\n{\n     \n    int sol_par[1000][2];\n     \n    int grille[100][100];\n     \n    int point_entree[2];\n     \n    int hauteur_grille, largeur_grille;\n\n     \n    int deplacements_possibles[4][2];\n     \n    int nb_deplacements;\n\n     \n    int case_choisie;\n\n\n     \n    printf(\"grille1.txt\\n\");\n    charger_labyrinthe(\"grille1.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n\n     \n    pile_initialiser(sol_par, 1000);\n    pile_empiler(sol_par, 0, 10);\n    pile_empiler(sol_par, 1, 10);\n    pile_empiler(sol_par, 1, 9);\n    pile_empiler(sol_par, 1, 8);\n    pile_empiler(sol_par, 2, 8);\n    pile_empiler(sol_par, 3, 8);\n\n    lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille, 3, 8,\n                                        sol_par, &nb_deplacements, deplacements_possibles);\n\n    printf(\"Il y a %d deplacements possibles a partir de cette position.\\n\", nb_deplacements);\n\n    case_choisie = lab_choisir_deplacement(deplacements_possibles, nb_deplacements);\n    printf(\"Le prochain deplacement est : (%d, %d)\\n\\n\",\n           deplacements_possibles[case_choisie][0],\n           deplacements_possibles[case_choisie][1]);\n\n\n     \n    for (int i = 0; i < 4; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            deplacements_possibles[i][j] = 0;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacements_test',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacements_test',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='sol_par',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='sol_par',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='case_choisie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='case_choisie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\\\\n\"',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='8',\n                )\n              exprs[5]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements_possibles',\n                )\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Il y a %d deplacements possibles a partir de cette position.\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n        )\n      block_items[19]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='case_choisie',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_choisir_deplacement',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='deplacements_possibles',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n            )\n        )\n      block_items[20]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le prochain deplacement est : (%d, %d)\\\\n\\\\n\"',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                      subscript=\n                        ID(\n                          name='case_choisie',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                      subscript=\n                        ID(\n                          name='case_choisie',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[21]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              subscript=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[22]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille2.txt\\\\n\"',\n                )\n            )\n        )\n      block_items[23]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille2.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[24]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[25]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='6',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[26]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[27]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[5]=\n                ID(\n                  name='sol_par',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements_possibles',\n                )\n            )\n        )\n      block_items[28]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Il y a %d deplacements possibles a partir de cette position.\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n        )\n      block_items[29]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='case_choisie',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_choisir_deplacement',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='deplacements_possibles',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n            )\n        )\n      block_items[30]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Le prochain deplacement est : (%d, %d)\\\\n\"',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                      subscript=\n                        ID(\n                          name='case_choisie',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                      subscript=\n                        ID(\n                          name='case_choisie',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_est_cases_adjacentes_test",
            "function_code": "void lab_est_cases_adjacentes_test(void)\n{\n     \n    int grille[100][100];\n     \n    int point_entree[2];\n     \n    int hauteur_grille, largeur_grille;\n\n     \n    int case1[2];\n     \n    int case2[2];\n\n     \n    charger_labyrinthe(\"grille1.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n\n     \n    case1[0] = 3;\n    case1[1] = 4;\n    case2[0] = 3;\n    case2[1] = 5;\n    assert(lab_est_cases_adjacentes(case1, case2) == 1);\n\n     \n    case1[0] = 2;\n    case1[1] = 1;\n    case2[0] = 3;\n    case2[1] = 1;\n    assert(lab_est_cases_adjacentes(case1, case2) == 1);\n\n     \n    case1[0] = 1;\n    case1[1] = 1;\n    case2[0] = 2;\n    case2[1] = 2;\n    assert(lab_est_cases_adjacentes(case1, case2) == 0);\n\n     \n    case1[0] = 0;\n    case1[1] = 0;\n    case2[0] = 2;\n    case2[1] = 3;\n    assert(lab_est_cases_adjacentes(case1, case2) == 0);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes_test',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes_test',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='case1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='case2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='3',\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='4',\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='3',\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='5',\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_cases_adjacentes',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='case1',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='case2',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[14]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='3',\n            )\n        )\n      block_items[15]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_cases_adjacentes',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='case1',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='case2',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[17]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[18]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[19]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[20]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[21]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_cases_adjacentes',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='case1',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='case2',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[22]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[23]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[24]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[25]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='3',\n            )\n        )\n      block_items[26]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_cases_adjacentes',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='case1',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='case2',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_est_une_sortie_test",
            "function_code": "void lab_est_une_sortie_test(void)\n{\n     \n    int grille[100][100];\n     \n    int point_entree[2];\n     \n    int hauteur_grille, largeur_grille;\n\n     \n    int position[2];\n\n     \n    charger_labyrinthe(\"grille1.txt\", grille, point_entree,\n                       &hauteur_grille, &largeur_grille);\n\n     \n     \n    position[0] = 0;\n    position[1] = 10;\n    assert(lab_est_une_sortie(position, grille, hauteur_grille, largeur_grille) == 1);\n\n     \n    position[0] = 6;\n    position[1] = 5;\n    assert(lab_est_une_sortie(position, grille, hauteur_grille, largeur_grille) == 0);\n\n     \n    position[0] = 5;\n    position[1] = 0;\n    assert(lab_est_une_sortie(position, grille, hauteur_grille, largeur_grille) == 1);\n\n     \n    position[0] = 11;\n    position[1] = 11;\n    assert(lab_est_une_sortie(position, grille, hauteur_grille, largeur_grille) == 0);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie_test',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie_test',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='charger_labyrinthe',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"grille1.txt\"',\n                )\n              exprs[1]=\n                ID(\n                  name='grille',\n                )\n              exprs[2]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[3]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n              exprs[4]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='6',\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='5',\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='5',\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='11',\n            )\n        )\n      block_items[16]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='11',\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='assert',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_resoudre_profondeur_test",
            "function_code": "void lab_resoudre_profondeur_test(void)\n{\n     \n    int grille[100][100];\n     \n    int point_entree[2];\n     \n    int hauteur_grille, largeur_grille;\n\n     \n    int succes_chargement;\n\n     \n    int pile_solution[1000][2];\n\n     \n    int debug = 1;\n\n    succes_chargement = charger_labyrinthe(\"grille1.txt\", grille, point_entree,\n                                           &hauteur_grille, &largeur_grille);\n\n    lab_resoudre_profondeur(grille, hauteur_grille, largeur_grille,\n                            point_entree, pile_solution, debug);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur_test',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur_test',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='succes_chargement',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='succes_chargement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='debug',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='debug',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='succes_chargement',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='charger_labyrinthe',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"grille1.txt\"',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='point_entree',\n                    )\n                  exprs[3]=\n                    UnaryOp(\n                      op='&',\n                      expr=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                    )\n                  exprs[4]=\n                    UnaryOp(\n                      op='&',\n                      expr=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_resoudre_profondeur',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ID(\n                  name='point_entree',\n                )\n              exprs[4]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[5]=\n                ID(\n                  name='debug',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char *nom_fichier, int grille[][100],\n                       int point_entree[2], int *hauteur_grille, int *largeur_grille)\n{\n    FILE *fichier;\n    char caractere_lu;\n    int i = 0,  \n    j = 0;\n    fichier = fopen(nom_fichier, \"r\");\n    if (!fichier)\n    {\n        return 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le m\ufffdme nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int choix;\n    int sortie = 0;\n\n     \n    printf(\"*************************\\n\");\n    printf(\"*** LABYRINTHE EXPERT ***\\n\");\n    printf(\"*************************\\n\\n\");\n\n    printf(\"1. Charger un labyrinthe\\n\");\n     \n    if (!grille_chargee)\n    {\n        printf(\"2. [Indisponible] Resoudre le labyrinthe\\n\");\n        printf(\"3. [Indisponible] Resoudre le labyrinthe pas-a-pas\\n\");\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"*************************\\\\n\"',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"*** LABYRINTHE EXPERT ***\\\\n\"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"*************************\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"1. Charger un labyrinthe\\\\n\"',\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='grille_chargee',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2. [Indisponible] Resoudre le labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3. [Indisponible] Resoudre le labyrinthe pas-a-pas\\\\n\"',\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2. Resoudre le labyrinthe \\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3. Resoudre le labyrinthe pas-a-pas \\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"4. Quitter le programme\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[8]=\n        DoWhile(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='sortie',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"> \"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  iftrue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"Choix invalide!\\\\n\\\\n\"',\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='&&',\n                          left=\n                            BinaryOp(\n                              op='||',\n                              left=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='2',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='3',\n                                    )\n                                )\n                            )\n                          right=\n                            UnaryOp(\n                              op='!',\n                              expr=\n                                ID(\n                                  name='grille_chargee',\n                                )\n                            )\n                        )\n                      iftrue=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Choix invalide!\\\\n\\\\n\"',\n                                )\n                            )\n                        )\n                      iffalse=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='sortie',\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char *buf_nom_fichier, int buf_taille)\n{\n     \n    printf(\"Nom du fichier : \");\n\n     \n    fflush(stdin);\n\n     \n    fgets(buf_nom_fichier, buf_taille, stdin);\n     \n    buf_nom_fichier[strlen(buf_nom_fichier) - 1] = '\\0';\n\n     \n    fflush(stdin);\n\n     \n    printf(\"%s \\n\", buf_nom_fichier);\n\n     \n    if (strlen(buf_nom_fichier) >= buf_taille - 1)\n    {\n        printf(\"Erreur : le nom du fichier est trop long.\\n\");\n        system(\"pause\");\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nom du fichier : \"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='fflush',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_taille',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='buf_nom_fichier',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='fflush',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%s \\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='>=',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='strlen',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='buf_nom_fichier',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='-',\n                  left=\n                    ID(\n                      name='buf_taille',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Erreur : le nom du fichier est trop long.\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='system',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"pause\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        }
    ]
}