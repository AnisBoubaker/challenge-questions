{
    "project_name": "TP1-Gr02-EquipeD_219667_assignsubmission_file",
    "functions": [
        {
            "function_name": "test_lab_afficher_grille",
            "function_code": "void test_lab_afficher_grille(void)\n{\n    printf(\"Test1: X en position (2,3), (2,4), (1,3)\\n\");\n    int grille1[][100] = {{ 1,0, 0, 1, 1, 1}, {0, 1, 1, 0, 1, 1}, {1,1,1,0,0,1}};\n    for (int i=0; i<3; i++)\n    {\n        for (int j=0; j<6; j++)\n        {\n            printf(\"%d\", grille1[i][j]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Test1: X en position (2,3), (2,4), (1,3)\\\\n\"',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='grille1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='6',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille1',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='pile_solutions',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solutions',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='6',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solutions',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest2: Grille vide \\\\n\"',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='grille2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n          init=\n            InitList(\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='pile_solutions2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solutions2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille2',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solutions2',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest3: Grille 4x4 remplie de murs\\\\n\"',\n                )\n            )\n        )\n      block_items[10]=\n        Decl(\n          name='grille3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        Decl(\n          name='pile_solutions3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solutions3',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille3',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solutions3',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest4: Grille 3x3 remplie d\\'espaces\\\\n\"',\n                )\n            )\n        )\n      block_items[14]=\n        Decl(\n          name='grille4',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille4',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        Decl(\n          name='pile_solutions4',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solutions4',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille4',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solutions4',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest5: Grille 2x3 remplie de solutions\\\\n\"',\n                )\n            )\n        )\n      block_items[18]=\n        Decl(\n          name='grille5',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille5',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[19]=\n        Decl(\n          name='pile_solutions5',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solutions5',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='6',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[4]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[5]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[6]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n        )\n      block_items[20]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solutions5',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "test_lab_calculer_deplacements_possibles",
            "function_code": "void test_lab_calculer_deplacements_possibles(void)\n{\nint grille1[100][100] = {{1,1,1},\n                                                     {1,0,0},\n                                                     {0,0,1}};\nint solution[100][2] = {0,2};\nint deplacements[4][2];\nint nb_deplacements;\n\n    for (int i=0; i<3; i++)\n    {\n        for (int j=0; j<3; j++)\n        {\n            printf(\"%d\", grille1[i][j]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille1',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"(0,2) est dans la pile solution\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[5]=\n                ID(\n                  name='solution',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Test1: Case (1,1) a 2 cases adjacente, (2,1) et (1,2)\\\\n\"',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"nb_deplacements: %d     (%d,%d) et (%d,%d)\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[3]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[4]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[5]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[5]=\n                ID(\n                  name='solution',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\nTest2: Case (2,1) a 1 cases adjacente, (1,1)\\\\n\"',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"nb_deplacements: %d     (%d,%d)\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[3]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[5]=\n                ID(\n                  name='solution',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\nTest2: Case (2,1) a 1 cases adjacente, (1,1)\\\\n\"',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"nb_deplacements: %d     (%d,%d)\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[3]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='deplacements',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[5]=\n                ID(\n                  name='solution',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\nTest2: Case (0,0) a 0 cases adjacente,\\\\n\"',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"nb_deplacements: %d\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "test_lab_choisir_deplacement",
            "function_code": "void test_lab_choisir_deplacement(void)\n{\n    int tab[2][2];\n\n    printf(\"Test lab choisir deplacement: 3 nombres aleatoires entre [0,3[\\n\");\n    printf(\"%d \", lab_choisir_deplacement(tab, 3));\n    printf(\"%d \", lab_choisir_deplacement(tab, 3));\n    printf(\"%d \", lab_choisir_deplacement(tab, 3));\n\n    printf(\"\\nTest lab choisir deplacement: si nb_deplacements <= 0 (doit donner -1)\\n\");\n    printf(\"%d \", lab_choisir_deplacement(tab, 0));\n    printf(\"%d \", lab_choisir_deplacement(tab, -2));\n\n    printf(\"\\nTest lab choisir deplacement: si nb_deplacements == 1 (doit donner 0)\\n\");\n    printf(\"%d \", lab_choisir_deplacement(tab, 1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='tab',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='tab',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Test lab choisir deplacement: 3 nombres aleatoires entre [0,3[\\\\n\"',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d \"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d \"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d \"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab choisir deplacement: si nb_deplacements <= 0 (doit donner -1)\\\\n\"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d \"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d \"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='-',\n                          expr=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab choisir deplacement: si nb_deplacements == 1 (doit donner 0)\\\\n\"',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d \"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "test_lab_est_cases_adjacentes",
            "function_code": "void test_lab_est_cases_adjacentes(void)\n{\n    int tab1[2] = {5,6};\n    int tab2[2] = {7,5};\n\n    printf(\"Test lab cases adjacentes: (5,6) et (7,5) ne sont pas adjacents, donc retour 0\\n\");\n    printf(\"%d\", lab_est_cases_adjacentes(tab1, tab2));\n\n    int tab3[2] = {5,6};\n    int tab4[2] = {5,7};\n\n    printf(\"\\nTest lab cases adjacentes: (5,6) et (5,7) sont adjacents, donc retour 1\\n\");\n    printf(\"%d\", lab_est_cases_adjacentes(tab3, tab4));\n\n    int tab5[2] = {9,2};\n    int tab6[2] = {10,2};\n\n    printf(\"\\nTest lab cases adjacentes: (9,2) et (10,2) sont adjacents, donc retour 1\\n\");\n    printf(\"%d\", lab_est_cases_adjacentes(tab5, tab6));\n\n    int tab7[2] = {1,1};\n    int tab8[2] = {1,1};\n\n    printf(\"\\nTest lab cases adjacentes: (1,1) et (1,1) ne sont pas adjacents, donc retour 0\\n\");\n    printf(\"%d\", lab_est_cases_adjacentes(tab7, tab8));\n\n    int tab9[2] = {};\n    int tab10[2] = {};\n\n    printf(\"\\nTest lab cases adjacentes: Les cases vides ne sont pas adjacents, donc retour 0\\n\");\n    printf(\"%d\", lab_est_cases_adjacentes(tab9, tab10));\n\n    int tab11[2] = {0,0};\n    int tab12[2] = {0,-1};\n\n    printf(\"\\nTest lab cases adjacentes: (0,0) et (0,-1) sont adjacents, donc retour 1\\n\");\n    printf(\"%d\", lab_est_cases_adjacentes(tab11, tab12));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='tab1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='6',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='tab2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Test lab cases adjacentes: (5,6) et (7,5) ne sont pas adjacents, donc retour 0\\\\n\"',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab1',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='tab2',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='tab3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab3',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='6',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='tab4',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab4',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab cases adjacentes: (5,6) et (5,7) sont adjacents, donc retour 1\\\\n\"',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab3',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='tab4',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='tab5',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab5',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[9]=\n        Decl(\n          name='tab6',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab6',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab cases adjacentes: (9,2) et (10,2) sont adjacents, donc retour 1\\\\n\"',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab5',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='tab6',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        Decl(\n          name='tab7',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab7',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[13]=\n        Decl(\n          name='tab8',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab8',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab cases adjacentes: (1,1) et (1,1) ne sont pas adjacents, donc retour 0\\\\n\"',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab7',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='tab8',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[16]=\n        Decl(\n          name='tab9',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab9',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n            )\n        )\n      block_items[17]=\n        Decl(\n          name='tab10',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab10',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab cases adjacentes: Les cases vides ne sont pas adjacents, donc retour 0\\\\n\"',\n                )\n            )\n        )\n      block_items[19]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab9',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='tab10',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[20]=\n        Decl(\n          name='tab11',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab11',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[21]=\n        Decl(\n          name='tab12',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab12',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='-',\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[22]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\nTest lab cases adjacentes: (0,0) et (0,-1) sont adjacents, donc retour 1\\\\n\"',\n                )\n            )\n        )\n      block_items[23]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab11',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='tab12',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "test_lab_est_une_sortie",
            "function_code": "void test_lab_est_une_sortie(void)\n{\n    int grille1[100][100] = {{1,1,1},\n                                                         {1,0,0},\n                                                         {0,0,1}};\n\n    for (int i=0; i<3; i++)\n    {\n        for (int j=0; j<3; j++)\n        {\n            printf(\"%d\", grille1[i][j]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille1',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='tab1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"(2,0) est une sortie, donc donne vrai\\\\n%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_une_sortie',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab1',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='grille1',\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                      exprs[3]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='tab2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n(0,0) est un mur, donc donne faux\\\\n%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_une_sortie',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab2',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='grille1',\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                      exprs[3]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='tab4',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab4',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n(1,1) n\\'est pas sur les cotes de la grille, donc donne faux\\\\n%d\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_une_sortie',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='tab4',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='grille1',\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                      exprs[3]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille(int grille[][100],\n                         int hauteur_grille,\n                         int largeur_grille,\n                         int pile_solution[][2])\n{\n     \n    int pile_copie[100*100][2];\n    pile_copier(pile_solution, pile_copie);\n\n     \n    while (!pile_est_vide(pile_copie))\n    {\n        int ligne, colonne;\n        pile_depiler(pile_copie, &ligne, &colonne);\n        grille[ligne][colonne] = 2;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_copie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_copie',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_copier',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ID(\n                  name='pile_copie',\n                )\n            )\n        )\n      block_items[2]=\n        While(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_est_vide',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_copie',\n                        )\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Decl(\n                  name='ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              block_items[1]=\n                Decl(\n                  name='colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_depiler',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_copie',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='ligne',\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='colonne',\n                            )\n                        )\n                    )\n                )\n              block_items[3]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='grille',\n                            )\n                          subscript=\n                            ID(\n                              name='ligne',\n                            )\n                        )\n                      subscript=\n                        ID(\n                          name='colonne',\n                        )\n                    )\n                  rvalue=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"%c\"',\n                                        )\n                                      exprs[1]=\n                                        Constant(\n                                          type='int',\n                                          value='219',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='||',\n                                  left=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='i',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='i',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='3',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\" \"',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='i',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='2',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"X\"',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_calculer_deplacements_possibles",
            "function_code": "void lab_calculer_deplacements_possibles(\n        int grille[][100],\n        int hauteur_grille,\n        int largeur_grille,\n        int pos_ligne,\n        int pos_colonne,\n        int solution_partielle[][2],\n        int *nb_deplacements,\n        int deplacements[4][2])\n{\n    int i = 0;\n\n     \n    if (deplacement_est_possible(grille,hauteur_grille,largeur_grille,pos_ligne+1,pos_colonne,solution_partielle))\n    {\n        (*nb_deplacements)++;\n        deplacements[i][0] = pos_ligne+1;\n        deplacements[i][1] = pos_colonne;\n        i++;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='deplacement_est_possible',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                  exprs[3]=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[4]=\n                    ID(\n                      name='pos_colonne',\n                    )\n                  exprs[5]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_colonne',\n                    )\n                )\n              block_items[3]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='i',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='deplacement_est_possible',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                  exprs[3]=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[4]=\n                    ID(\n                      name='pos_colonne',\n                    )\n                  exprs[5]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_colonne',\n                    )\n                )\n              block_items[3]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='i',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='deplacement_est_possible',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='pos_ligne',\n                    )\n                  exprs[4]=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[5]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_ligne',\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[3]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='i',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='deplacement_est_possible',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='pos_ligne',\n                    )\n                  exprs[4]=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[5]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_ligne',\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(\n        int deplacements_possibles[][2],\n        int nb_deplacements_possibles)\n{\n     \n    if (nb_deplacements_possibles <= 0)\n    {\n        return -1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                ID(\n                  name='nb_deplacements_possibles',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    UnaryOp(\n                      op='-',\n                      expr=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            BinaryOp(\n              op='%',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='rand',\n                    )\n                )\n              right=\n                ID(\n                  name='nb_deplacements_possibles',\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n    int dx, dy;\n\n    dx = case1[0] - case2[0];  \n    dy = case1[1] - case2[1];  \n\n     \n     \n    if ((abs(dx) + abs(dy)) == 1)\n    {\n        return 1;  \n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='dx',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='dx',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='dy',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='dy',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='dx',\n            )\n          rvalue=\n            BinaryOp(\n              op='-',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='dy',\n            )\n          rvalue=\n            BinaryOp(\n              op='-',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              right=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                BinaryOp(\n                  op='+',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='abs',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='dx',\n                            )\n                        )\n                    )\n                  right=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='abs',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='dy',\n                            )\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(int position[2], int grille[][100], int hauteur_grille, int largeur_grille)\n{\n     \n    if (position[0] == 0 || position[1] == 0 || position[0] == hauteur_grille-1 || position[1] == largeur_grille-1)\n    {\n         \n        if (grille[position[0]][position[1]] != 1)\n        {\n            return 1;  \n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(\n        int grille[][100],\n        int hauteur_grille,\n        int largeur_grille,\n        int entree[2],\n        int pile_solution[][2],\n        int debug)\n{\n     \n    int pile_chemins_alternatifs[100*100][2];\n    int deplacements_possibles[4][2];\n    int nb_deplacements_possibles = 0;\n    int nouvelle_position[2];\n    int position[2] = {};\n    int done = 0;\n    int ligne,colonne;\n\n     \n    int comp[2];\n\n    pile_initialiser(pile_chemins_alternatifs,100*100);\n\n     \n    pile_empiler(pile_solution, entree[0], entree[1]);\n    lab_calculer_deplacements_possibles(grille,\n                                        hauteur_grille,\n                                        largeur_grille,\n                                        entree[0],\n                                        entree[1],\n                                        pile_solution,\n                                        &nb_deplacements_possibles,\n                                        deplacements_possibles);\n\n\n     \n    while (!lab_est_une_sortie(position, grille, hauteur_grille, largeur_grille) && done != 1)\n    {\n        if (nb_deplacements_possibles > 0)\n        {\n             \n            int indice = lab_choisir_deplacement(deplacements_possibles, nb_deplacements_possibles);\n            pile_empiler(pile_solution, deplacements_possibles[indice][0], deplacements_possibles[indice][1]);\n\n                 \n                if (debug)\n                {\n                    lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n                    printf(\"\\nAppuyez sur n'importe quelle touche pour continuer\\n\");\n                    fflush(stdin);\n                    getchar();\n                }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_chemins_alternatifs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemins_alternatifs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nouvelle_position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='done',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='done',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='comp',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='comp',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemins_alternatifs',\n                )\n              exprs[1]=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[4]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[5]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements_possibles',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements_possibles',\n                )\n            )\n        )\n      block_items[12]=\n        While(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                UnaryOp(\n                  op='!',\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    ID(\n                      name='done',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Decl(\n                          name='indice',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='indice',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_choisir_deplacement',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='nb_deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='indice',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              exprs[2]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='indice',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            ID(\n                              name='debug',\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_afficher_grille',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\nAppuyez sur n\\'importe quelle touche pour continuer\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='fflush',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='stdin',\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='getchar',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        For(\n                          init=\n                            DeclList(\n                              decls[0]=\n                                Decl(\n                                  name='i',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    TypeDecl(\n                                      declname='i',\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                  init=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='i',\n                                )\n                              right=\n                                ID(\n                                  name='nb_deplacements_possibles',\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        BinaryOp(\n                                                          op='%',\n                                                          left=\n                                                            BinaryOp(\n                                                              op='+',\n                                                              left=\n                                                                ID(\n                                                                  name='indice',\n                                                                )\n                                                              right=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                            )\n                                                          right=\n                                                            ID(\n                                                              name='nb_deplacements_possibles',\n                                                            )\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                          subscript=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='deplacements_possibles',\n                                                    )\n                                                  subscript=\n                                                    BinaryOp(\n                                                      op='%',\n                                                      left=\n                                                        BinaryOp(\n                                                          op='+',\n                                                          left=\n                                                            ID(\n                                                              name='indice',\n                                                            )\n                                                          right=\n                                                            ID(\n                                                              name='i',\n                                                            )\n                                                        )\n                                                      right=\n                                                        ID(\n                                                          name='nb_deplacements_possibles',\n                                                        )\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='3',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='pile_empiler',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='pile_chemins_alternatifs',\n                                                )\n                                              exprs[1]=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        BinaryOp(\n                                                          op='%',\n                                                          left=\n                                                            BinaryOp(\n                                                              op='+',\n                                                              left=\n                                                                ID(\n                                                                  name='indice',\n                                                                )\n                                                              right=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                            )\n                                                          right=\n                                                            ID(\n                                                              name='nb_deplacements_possibles',\n                                                            )\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              exprs[2]=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        BinaryOp(\n                                                          op='%',\n                                                          left=\n                                                            BinaryOp(\n                                                              op='+',\n                                                              left=\n                                                                ID(\n                                                                  name='indice',\n                                                                )\n                                                              right=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                            )\n                                                          right=\n                                                            ID(\n                                                              name='nb_deplacements_possibles',\n                                                            )\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                      block_items[1]=\n                                        Assignment(\n                                          op='=',\n                                          lvalue=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='grille',\n                                                    )\n                                                  subscript=\n                                                    ArrayRef(\n                                                      name=\n                                                        ArrayRef(\n                                                          name=\n                                                            ID(\n                                                              name='deplacements_possibles',\n                                                            )\n                                                          subscript=\n                                                            BinaryOp(\n                                                              op='%',\n                                                              left=\n                                                                BinaryOp(\n                                                                  op='+',\n                                                                  left=\n                                                                    ID(\n                                                                      name='indice',\n                                                                    )\n                                                                  right=\n                                                                    ID(\n                                                                      name='i',\n                                                                    )\n                                                                )\n                                                              right=\n                                                                ID(\n                                                                  name='nb_deplacements_possibles',\n                                                                )\n                                                            )\n                                                        )\n                                                      subscript=\n                                                        Constant(\n                                                          type='int',\n                                                          value='0',\n                                                        )\n                                                    )\n                                                )\n                                              subscript=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        BinaryOp(\n                                                          op='%',\n                                                          left=\n                                                            BinaryOp(\n                                                              op='+',\n                                                              left=\n                                                                ID(\n                                                                  name='indice',\n                                                                )\n                                                              right=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                            )\n                                                          right=\n                                                            ID(\n                                                              name='nb_deplacements_possibles',\n                                                            )\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                          rvalue=\n                                            Constant(\n                                              type='int',\n                                              value='3',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        UnaryOp(\n                          op='!',\n                          expr=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_est_vide',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_depiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='ligne',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='colonne',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='ligne',\n                                )\n                            )\n                          block_items[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='colonne',\n                                )\n                            )\n                          block_items[3]=\n                            While(\n                              cond=\n                                UnaryOp(\n                                  op='!',\n                                  expr=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_est_cases_adjacentes',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='comp',\n                                            )\n                                        )\n                                    )\n                                )\n                              stmt=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_depiler',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='ligne',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='colonne',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='ligne',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='colonne',\n                                            )\n                                        )\n                                      rvalue=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  block_items[2]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_haut_pile',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='ligne',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='colonne',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[3]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='comp',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      rvalue=\n                                        ID(\n                                          name='ligne',\n                                        )\n                                    )\n                                  block_items[4]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='comp',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                      rvalue=\n                                        ID(\n                                          name='colonne',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[4]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[5]=\n                            If(\n                              cond=\n                                ID(\n                                  name='debug',\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_afficher_grille',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='hauteur_grille',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                          exprs[3]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\nAppuyez sur n\\'importe quelle touche pour continuer\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[2]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='fflush',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='stdin',\n                                            )\n                                        )\n                                    )\n                                  block_items[3]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='getchar',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      iffalse=\n                        Compound(\n                          block_items[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='done',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_haut_pile',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='ligne',\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='colonne',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='nb_deplacements_possibles',\n                    )\n                  rvalue=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='ligne',\n                        )\n                      exprs[4]=\n                        ID(\n                          name='colonne',\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[6]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='nb_deplacements_possibles',\n                            )\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                    )\n                )\n              block_items[4]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='ligne',\n                    )\n                )\n              block_items[5]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='colonne',\n                    )\n                )\n            )\n        )\n      block_items[13]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_une_sortie',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='position',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_empiler',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      exprs[2]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n    srand(time(0));\n\n     \n    int grille[100][100];\n    int nb_lignes, nb_colonnes;\n    int entree[2];\n    int grille_chargee = 0;  \n    int debug;\n    int choix = selection_menu(grille_chargee);\n    char fichier[100];\n\n\n\n     \n    while (choix != 4)\n    {\n\n        int solution[100*100][2] = {};\n        pile_initialiser(solution, 100*100);\n        fflush(stdout);\n\n         \n        if (choix == 1)\n        {\n            fflush(stdin);\n\n             \n            menu_charger_labyrinthe(fichier, 100);\n            if(charger_labyrinthe(fichier, grille, entree, &nb_lignes, &nb_colonnes))\n            {\n                grille_chargee = 1;  \n                effacer_terminal();\n                printf(\"Grille chargee avec success:\\n\");\n                lab_afficher_grille(grille, nb_lignes, nb_colonnes, solution);\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='srand',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='time',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_lignes',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_lignes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nb_colonnes',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_colonnes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='grille_chargee',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='grille_chargee',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='debug',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='debug',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='selection_menu',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='grille_chargee',\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[9]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='choix',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Decl(\n                  name='solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                  init=\n                    InitList(\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_initialiser',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='solution',\n                        )\n                      exprs[1]=\n                        BinaryOp(\n                          op='*',\n                          left=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='fflush',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='stdout',\n                        )\n                    )\n                )\n              block_items[3]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='fflush',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='stdin',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='menu_charger_labyrinthe',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='fichier',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='charger_labyrinthe',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='fichier',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='entree',\n                                    )\n                                  exprs[3]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                    )\n                                  exprs[4]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ID(\n                                      name='grille_chargee',\n                                    )\n                                  rvalue=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='effacer_terminal',\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Grille chargee avec success:\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_afficher_grille',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='solution',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\nAppuyez sur n\\'importe quelle touche pour continuer\\\\n\"',\n                                )\n                            )\n                        )\n                      block_items[4]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='getchar',\n                            )\n                        )\n                      block_items[5]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='effacer_terminal',\n                            )\n                        )\n                    )\n                )\n              block_items[4]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='debug',\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      block_items[1]=\n                        If(\n                          cond=\n                            UnaryOp(\n                              op='!',\n                              expr=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='solution',\n                                        )\n                                      exprs[5]=\n                                        ID(\n                                          name='debug',\n                                        )\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Aucune solution trouvee\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\nAppuyez sur n\\'importe quelle touche pour continuer\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='fflush',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='stdin',\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='getchar',\n                                    )\n                                )\n                              block_items[4]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='effacer_terminal',\n                                    )\n                                )\n                              block_items[5]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='afficher_menu',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille_chargee',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='fflush',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='stdout',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='charger_labyrinthe',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='fichier',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='entree',\n                                )\n                              exprs[3]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='nb_lignes',\n                                    )\n                                )\n                              exprs[4]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='nb_colonnes',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[5]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='debug',\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      block_items[1]=\n                        If(\n                          cond=\n                            UnaryOp(\n                              op='!',\n                              expr=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='solution',\n                                        )\n                                      exprs[5]=\n                                        ID(\n                                          name='debug',\n                                        )\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Aucune solution trouvee\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\nAppuyez sur n\\'importe quelle touche pour continuer\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='fflush',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='stdin',\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='getchar',\n                                    )\n                                )\n                              block_items[4]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='effacer_terminal',\n                                    )\n                                )\n                              block_items[5]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='afficher_menu',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille_chargee',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='effacer_terminal',\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='afficher_menu',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille_chargee',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_afficher_grille',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='solution',\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='fflush',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='stdin',\n                                        )\n                                    )\n                                )\n                              block_items[4]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\nAppuyez sur n\\'importe quelle touche pour continuer\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[5]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='getchar',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='charger_labyrinthe',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='fichier',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='entree',\n                                )\n                              exprs[3]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='nb_lignes',\n                                    )\n                                )\n                              exprs[4]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='nb_colonnes',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='effacer_terminal',\n                    )\n                )\n              block_items[7]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='selection_menu',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='grille_chargee',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "deplacement_est_possible",
            "function_code": "int deplacement_est_possible(int grille[][100],\n                             int hauteur_grille,\n                             int largeur_grille,\n                             int pos_ligne,\n                             int pos_colonne,\n                             int solution_partielle[][2])\n{\n    int ligne;\n    int colonne;\n\n    if (pos_ligne < hauteur_grille && pos_colonne < largeur_grille && grille[pos_ligne][pos_colonne] != 1 && pos_colonne >= 0 && pos_ligne >= 0)\n    {\n\n        int pile_copie[100 * 100 + 1][2];\n        pile_copier(solution_partielle, pile_copie);\n\n        while (!pile_est_vide(pile_copie))\n        {\n            pile_depiler(pile_copie, &ligne, &colonne);\n            if (ligne == pos_ligne && colonne == pos_colonne)\n            {\n                return 0;\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='deplacement_est_possible',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='deplacement_est_possible',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='&&',\n                          left=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              right=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                              right=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                )\n                              subscript=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='>=',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>=',\n                  left=\n                    ID(\n                      name='pos_ligne',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Decl(\n                  name='pile_copie',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_copie',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='*',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_copier',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='solution_partielle',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='pile_copie',\n                        )\n                    )\n                )\n              block_items[2]=\n                While(\n                  cond=\n                    UnaryOp(\n                      op='!',\n                      expr=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_est_vide',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_copie',\n                                )\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_depiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_copie',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='ligne',\n                                    )\n                                )\n                              exprs[2]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='colonne',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='ligne',\n                                    )\n                                  right=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='colonne',\n                                    )\n                                  right=\n                                    ID(\n                                      name='pos_colonne',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Return(\n                                  expr=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[3]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "effacer_terminal",
            "function_code": "void effacer_terminal(void)\n{\n\n\n\n\n\n    system(\"clear\");\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='effacer_terminal',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='effacer_terminal',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"clear\"',\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "afficher_menu",
            "function_code": "void afficher_menu(int grille_chargee)\n{\n\n    if (grille_chargee)\n    {\n        printf(\"\\t\\t*************************\\n\");\n        printf(\"\\t\\t*** LABYRINTHE EXPERT ***\\n\");\n        printf(\"\\t\\t*************************\\n\\n\");\n        printf(\"\\t1. Charger un labyrinthe\\n\");\n        printf(\"\\t2. Resoudre le labyrinthe\\n\");\n        printf(\"\\t3. Resoudre le labyrinthe pas-a-pas\\n\");\n        printf(\"\\t4. Quitter le programme\\n\\n\");\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            ID(\n              name='grille_chargee',\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\t*************************\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\t*** LABYRINTHE EXPERT ***\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\t*************************\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t1. Charger un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t2. Resoudre le labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t3. Resoudre le labyrinthe pas-a-pas\\\\n\"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t4. Quitter le programme\\\\n\\\\n\"',\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\t*************************\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\t*** LABYRINTHE EXPERT ***\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\t*************************\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t1. Charger un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t2. [Indisponible] Resoudre le labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t3. [Indisponible] Resoudre le labyrinthe pas-a-pas\\\\n\"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t4. Quitter le programme\\\\n\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "varia_print_values",
            "function_code": "void varia_print_values(const char *format, ...)\n{\n    va_list args;\n    __builtin_va_start((args));\n\n    const char *p = format;\n    while (*p != '\\0')\n    {\n        if (*p == 'd')\n        {\n            int i = __builtin_va_arg((args));\n            printf(\"%d\\n\", i);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='varia_print_values',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='format',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='format',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                EllipsisParam(\n                )\n            )\n          type=\n            TypeDecl(\n              declname='varia_print_values',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='args',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='args',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['va_list'],\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='__builtin_va_start',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='args',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='p',\n          quals=['const'],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='p',\n                  quals=['const'],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n            )\n          init=\n            ID(\n              name='format',\n            )\n        )\n      block_items[3]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    ID(\n                      name='p',\n                    )\n                )\n              right=\n                Constant(\n                  type='char',\n                  value=\"'\\\\0'\",\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        UnaryOp(\n                          op='*',\n                          expr=\n                            ID(\n                              name='p',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='char',\n                          value=\"'d'\",\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Decl(\n                          name='i',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='i',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='__builtin_va_arg',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='args',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\\\\n\"',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='p',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='char',\n                              value=\"'f'\",\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            Decl(\n                              name='d',\n                              quals=[],\n                              align=[],\n                              storage=[],\n                              funcspec=[],\n                              type=\n                                TypeDecl(\n                                  declname='d',\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['double'],\n                                    )\n                                )\n                              init=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='__builtin_va_arg',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='args',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"%f\\\\n\"',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='d',\n                                    )\n                                )\n                            )\n                        )\n                      iffalse=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='p',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='char',\n                                  value=\"'s'\",\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Decl(\n                                  name='s',\n                                  quals=['const'],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    PtrDecl(\n                                      quals=[],\n                                      type=\n                                        TypeDecl(\n                                          declname='s',\n                                          quals=['const'],\n                                          align=None,\n                                          type=\n                                            IdentifierType(\n                                              names=['char'],\n                                            )\n                                        )\n                                    )\n                                  init=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='__builtin_va_arg',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='args',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"%s\\\\n\"',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='s',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    ID(\n                      name='p',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        EmptyStatement(\n        )\n    )\n)"
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char* nom_fichier,\n                       int grille[][100],\n                       int point_entree[2],\n                       int* hauteur_grille,\n                       int* largeur_grille)\n{\n\tFILE* fichier;\n\tchar caractere_lu;\n\tint i = 0,  \n\t\tj = 0;\n\n     \n\tfichier = fopen(nom_fichier, \"r\");\n\n    if(fichier == 0)\n    {\n        perror(\"Error\");\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='fichier',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='perror',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Error\"',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[9]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le meme nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[12]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int choix;\n    afficher_menu(grille_chargee);\n\n    if(!grille_chargee)\n    {\n         \n        printf(\">\");\n        scanf(\"%d\", &choix);\n\n         \n        while (choix != 1 &&  choix != 4 )\n        {\n            printf(\"\\nChoix Invalide!\\n\\n>\");\n            scanf(\"%d\", &choix);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='afficher_menu',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille_chargee',\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='grille_chargee',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\">\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\nChoix Invalide!\\\\n\\\\n>\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\">\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Choix Invalide!\\\\n>\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)"
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char* buf_nom_fichier, int buf_taille)\n{\n     \n    printf(\"Nom du fichier:\");\n\n     \n    fflush(stdin);\n    fgets(buf_nom_fichier, buf_taille, stdin);\n    buf_nom_fichier[strlen(buf_nom_fichier)-1] = '\\0';\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nom du fichier:\"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='fflush',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_taille',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='buf_nom_fichier',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n    )\n)"
        }
    ]
}