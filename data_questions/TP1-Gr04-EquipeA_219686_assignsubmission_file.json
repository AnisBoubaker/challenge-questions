{
    "project_name": "TP1-Gr04-EquipeA_219686_assignsubmission_file",
    "functions": [
        {
            "function_name": "custom_malloc",
            "function_code": "void *custom_malloc(size_t size)\n{\n    size_t total_allocated = 0;\n    void *ptr = malloc(size);\n    if (ptr)\n    {\n        total_allocated += size;\n        printf(\"Allocated %zu bytes, Total Allocated: %zu bytes\\n\", size, total_allocated);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='custom_malloc',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='size',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='size',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['size_t'],\n                        )\n                    )\n                )\n            )\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='custom_malloc',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['void'],\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='total_allocated',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='total_allocated',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['size_t'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='ptr',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='ptr',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['void'],\n                    )\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='malloc',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='size',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            ID(\n              name='ptr',\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='+=',\n                  lvalue=\n                    ID(\n                      name='total_allocated',\n                    )\n                  rvalue=\n                    ID(\n                      name='size',\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Allocated %zu bytes, Total Allocated: %zu bytes\\\\n\"',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='size',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='total_allocated',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='ptr',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31542688608169556,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.34986022114753723,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3504027482510497,
                    "project_name": "20233_02_27_AlloDynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int* entier_dynamique;\n\n    entier_dynamique = (int*)malloc( sizeof(int) );\n    if(entier_dynamique == 0){ \n        printf(\"Plus de memoire...\\n\");\n         \n        exit(1);\n    }"
                },
                {
                    "distance": 0.35376834869384766,
                    "project_name": "20233_02_15_Exercice_Minimum",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}"
                },
                {
                    "distance": 0.35992715429483135,
                    "project_name": "20223_01_32_ProblemeRevision",
                    "function_name": "mesure_init",
                    "function_code": "t_mesure* mesure_init(void)\n{\n\tt_mesure* nouv_mesure; \n\n\tnouv_mesure = (t_mesure*)malloc(sizeof(t_mesure));\n\tif (nouv_mesure == 0)\n\t{\n\t\tprintf(\"Plus de memoire!\");\n\t\texit(1);\n\t}"
                }
            ],
            "question": "Pouvez-vous expliquer pourquoi la variable 'total_allocated' dans votre fonction 'custom_malloc' n'augmente-t-elle que lorsque l'allocation de m\u00e9moire r\u00e9ussit, et ce qu'elle repr\u00e9sente dans ce contexte ?"
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n    if (case1[0] == case2[0] || case1[1] == case2[1])\n    {\n\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.30475175380706787,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.32116500003904713,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.326194703578949,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.3282322860238062,
                    "project_name": "20233_02_21_Exercice_MinMaj",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int nb_minuscules, nb_majuscules;\n    char caracteres[100] = {'B', 'o', 'n', 'j', 'o', 'u', 'r', ' ', 'E', 'T', 'S'};\n\n    majuscules_minuscules(caracteres, 11, &nb_majuscules, &nb_minuscules);\n\n    printf(\"Il y a %i majuscules et %i minuscules\\n\", nb_majuscules, nb_minuscules);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3317711651325226,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                }
            ],
            "question": "Pouvez-vous expliquer la logique de la condition dans la fonction `lab_est_cases_adjacentes` et comment elle d\u00e9termine si deux cases sont adjacentes ?"
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(\n    int position[2],\n    int grille[][100],\n    int hauteur_grille,\n    int largeur_grille)\n{\n\n    int x = position[0];\n    int y = position[1];\n\n    if (x == 0 || x == hauteur_grille - 1 || y == 0 || y == largeur_grille - 1)\n    {\n\n        if (grille[x][y] != 0)\n        {\n\n            printf(\"%d, %d est une sortie !\", position[0], position[1]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='x',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='x',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='y',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='y',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='x',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='x',\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='y',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='y',\n                    )\n                  right=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ID(\n                                  name='x',\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='y',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d, %d est une sortie !\"',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              exprs[2]=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.29828983545303345,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.29870766955681566,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.3006668597295177,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.30258776683662997,
                    "project_name": "20233_02_06_operateurs_logiques",
                    "function_name": "main",
                    "function_code": "int main() {\n    int x;\n\n    x = 15;\n\n    if( 10 < x  &&  x< 20 )\n    {\n        printf(\"x est dans l'intervalle!\\n\");\n    }"
                },
                {
                    "distance": 0.30483674791692517,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                }
            ],
            "question": "Pouvez-vous expliquer la logique derri\u00e8re le choix de conditions dans votre impl\u00e9mentation de la fonction lab_est_une_sortie, sp\u00e9cifiquement comment vous utilisez la position [x][y] pour d\u00e9terminer si une cellule est une sortie?"
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n\n    do\n    {\n         \n        printf(\"MENU\\n\");\n        printf(\"Veuillez choisir l'une des 4 grilles suivantes: \\n\");\n        printf(\"1- Grille 1:\\n\");\n        printf(\"2- Grille 2:\\n\");\n        printf(\"3- Grille 3:\\n\");\n        printf(\"4- Grille 4:\\n\");\n\n         \n        scanf(\"%i\", &grille_chargee);\n\n         \n        switch (grille_chargee)\n        {\n            case '1':\n                printf(\"Vous avez selectionne la grille 1:\\n\");\n                break;\n\n            case '2':\n                printf(\"Vous avez selectionne la grille 2.\\n\");\n                break;\n\n            case '3':\n                printf(\"Vous avez selectionne la grille 3.\\n\");\n                break;\n\n            case '4':\n                printf(\"Vous avez selectionne la grille 4.\\n\");\n                break;\n\n            default:\n                printf(\"Le choix est invalide.\");\n                break;\n\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='<',\n                  left=\n                    ID(\n                      name='grille_chargee',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>',\n                  left=\n                    ID(\n                      name='grille_chargee',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='5',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"MENU\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Veuillez choisir l\\'une des 4 grilles suivantes: \\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"1- Grille 1:\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2- Grille 2:\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3- Grille 3:\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"4- Grille 4:\\\\n\"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%i\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='grille_chargee',\n                            )\n                        )\n                    )\n                )\n              block_items[7]=\n                Switch(\n                  cond=\n                    ID(\n                      name='grille_chargee',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'1'\",\n                            )\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Vous avez selectionne la grille 1:\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'2'\",\n                            )\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Vous avez selectionne la grille 2.\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'3'\",\n                            )\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Vous avez selectionne la grille 3.\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'4'\",\n                            )\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Vous avez selectionne la grille 4.\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                      block_items[4]=\n                        Default(\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Le choix est invalide.\"',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            ID(\n              name='grille_chargee',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2977299988269806,
                    "project_name": "20233_02_08_switch_case",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    char choix;\n    printf(\"Pressez 'A', 'B' ou 'C' pour continuer:\");\n    scanf(\"%c\", &choix);\n\n    switch(choix)\n    {\n        case 'A':\n            printf(\"Vous avez choisi A, bon choix!\\n\");\n            break;  \n        case 'B':\n            printf(\"Vous avez choisi B, pas mal!\\n\");\n            break;\n        case 'C':\n            printf(\"Vous avez choisi C, c\u2019est bien!\\n\");\n            break;\n        default:\n            printf(\"vous deviez saisir A, B ou C\u2026 Quel dommage!\");\n    }"
                },
                {
                    "distance": 0.34114569425582886,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "tri_selection",
                    "function_code": "void tri_selection(int tab[], int taille)\n{\n\tint indice_min;\n\tfor (int i = 0; i < taille; i++)\n\t{\n\t\tindice_min = i;\n\t\tfor (int j = i + 1; j < taille; j++)\n\t\t{\n\t\t\tif (tab[j] < tab[indice_min])\n\t\t\t{\n\t\t\t\tindice_min = j;\n\t\t\t}"
                },
                {
                    "distance": 0.34590256214141846,
                    "project_name": "20233_02_23_Tri_Tab1D",
                    "function_name": "tri_selection",
                    "function_code": "void tri_selection(int tab[], int taille)\n{\n    int indice_min;\n    for(int i=0; i<taille; i++)\n    {\n        indice_min = i;\n        for(int j=i+1; j<taille; j++)\n        {\n            if(tab[j] < tab[indice_min])\n            {\n                indice_min = j;\n            }"
                },
                {
                    "distance": 0.34769764762835176,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.3496192395687103,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                }
            ],
            "question": "Pourquoi avez-vous choisi d'utiliser des single quotes ('1', '2', '3', '4') dans les cas de votre instruction switch, alors que vous attendez une entr\u00e9e de type int avec scanf ?"
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe (char* buf_nom_fichier, int buf_taille)\n{\n    printf(\"Entrez le nom de fichier correspondant au fichier contenant le labyrinthe a charger: \");\n\n    fgets(buf_nom_fichier,buf_taille,stdin);\n\n    int nb_chars= strlen(buf_nom_fichier);\n\n    if(buf_nom_fichier[nb_chars-1]=='\\n')\n    { \n\n        buf_nom_fichier[nb_chars-1]='\\0';\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Entrez le nom de fichier correspondant au fichier contenant le labyrinthe a charger: \"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_taille',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_chars',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_chars',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='strlen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='buf_nom_fichier',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='buf_nom_fichier',\n                    )\n                  subscript=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='nb_chars',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='char',\n                  value=\"'\\\\n'\",\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='buf_nom_fichier',\n                        )\n                      subscript=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='nb_chars',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  rvalue=\n                    Constant(\n                      type='char',\n                      value=\"'\\\\0'\",\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2636181154320901,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.2768656015396118,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.2789440612492267,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.279899924993515,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2809041030711034,
                    "project_name": "20233_02_07_Structures_CondIfElse",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n    printf(\"Saisir une valeur entiere: \");\n    scanf(\"%i\", &saisie);\n\n    if( saisie % 2 == 0 )\n    {\n        printf(\"Le nombre est pair!\\n\");\n    }"
                }
            ],
            "question": "Quel est le but de la condition \"if(buf_nom_fichier[nb_chars-1]=='\\n')\" dans votre fonction et comment cela influe-t-il sur l'exploitation de buf_nom_fichier plus loin dans le code ?"
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(int deplacements_possibles[][2], int nb_deplacements_possibles)\n{\n\n    int indice;\n    int mn = 1;\n    int mx = nb_deplacements_possibles;\n    int nb_indices = pile_taille_pile(deplacements_possibles);\n\n    indice = nb_aleatoire(mn, mx);\n\n    while (0 > indice || indice > nb_indices)\n    {\n        nb_aleatoire(mn, mx);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='indice',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='indice',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='mn',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='mn',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='mx',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='mx',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            ID(\n              name='nb_deplacements_possibles',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nb_indices',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_indices',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='pile_taille_pile',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='deplacements_possibles',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='indice',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='nb_aleatoire',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='mn',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='mx',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        While(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='>',\n                  left=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  right=\n                    ID(\n                      name='indice',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>',\n                  left=\n                    ID(\n                      name='indice',\n                    )\n                  right=\n                    ID(\n                      name='nb_indices',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='nb_aleatoire',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='mn',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='mx',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Return(\n          expr=\n            ID(\n              name='indice',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2570329509955575,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.2587067002761225,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.26793205738067627,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2697560800784369,
                    "project_name": "20233_02_37_Fichiers",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n    int caractere;\n    char chaine[1000];\n    char jour[20];\n    double temp_min, temp_max;\n\n    mon_fichier = fopen(\"../donnees.txt\", \"r\");\n    if(!mon_fichier)\n    {\n        printf(\"Erreur lors de l'ouverture\\n\");\n        exit(1);\n    }"
                },
                {
                    "distance": 0.2713944613933563,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                }
            ],
            "question": "Quelle est la fonction du bloc `while (0 > indice || indice > nb_indices)` dans votre code et comment cela se compare-t-il \u00e0 l'utilisation de la boucle `do...while` dans le code similaire que nous avons \u00e9tudi\u00e9 en classe ?"
        }
    ]
}