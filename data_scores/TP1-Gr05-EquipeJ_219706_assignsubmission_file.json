{
    "project_name": "TP1-Gr05-EquipeJ_219706_assignsubmission_file",
    "functions": [
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille(int grille[][100], int hauteur_grille, int largeur_grille,int pile_solution[][2])\n{ \n    for (int i=0;i<hauteur_grille;i++)\n    {\n        for(int j=0; j<largeur_grille; j++)\n            {\n              if( pile_contient( pile_solution,  i,  j) )\n              {\n                 printf(\"X\"); \n              }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_contient',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='i',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"X\"',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='i',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"%c\"',\n                                            )\n                                          exprs[1]=\n                                            Constant(\n                                              type='int',\n                                              value='219',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='i',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\" \"',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.19520042403367582,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                },
                {
                    "distance": 0.2379872053861618,
                    "project_name": "20223_01_19_Tableaux2D",
                    "function_name": "afficher_tab2d",
                    "function_code": "void afficher_tab2d(const double tab[][100],\n\tint nb_lignes, int nb_colonnes)\n{\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\tprintf(\"%.2lf\\t\", tab[i][j]);\n\t\t}"
                },
                {
                    "distance": 0.24136420288522473,
                    "project_name": "20233_02_22_Tabs2D",
                    "function_name": "afficher_tab2d",
                    "function_code": "void afficher_tab2d(double tab[][20], int nb_lignes, int nb_colonnes)\n{\n    for(int i=0; i < nb_lignes ; i++)\n    {\n        for(int j=0; j< nb_colonnes; j++)\n        {\n            printf(\"%.2lf\\t\", tab[i][j]);\n        }"
                },
                {
                    "distance": 0.24741228660952036,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int tab[50] = {10, 20 , 30, 40, 50};\n    double tab_reels[50] = {10, 20 , 30 , 40 , 50};\n\n \n \n \n \n\n    afficher_tableau( tab, 5 );\n\n    printf(\"La moyenne du tableau: %lf\\n\", moyenne_tableau_entier(tab,5));\n\n     \n    printf(\"La moyenne du tableau de reels: %lf\\n\",\n           moyenne_tableau_entier(tab_reels,5));\n\n\n    int x = 5;\n\n    mettre_a_zero(tab, 5);\n    afficher_tableau(tab, 5);\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2522801160812378,
                    "project_name": "20223_01_33_ProjetRevision-2",
                    "function_name": "afficher_province",
                    "function_code": "void afficher_province(const t_province* prov)\n{\n\tprintf(\"Province: %s\\n\", prov->nom);\n\tprintf(\"=====================================\\n\");\n\n\tfor (int i = 0; i < prov->nb_capteurs; i++)\n\t{\n\t\tcapteur_afficher(prov->capteurs[i]);\n\t}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(const int case1[2],const int case2[2])\n{\n    int resultat=0;\n\n    if(case1[0]==case2[0]) \n    {\n        if(case1[1]-case2[1]==-1  || case1[1]-case2[1]==1 ) \n        {\n            resultat=1; \n            return resultat;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='resultat',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='resultat',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            UnaryOp(\n                              op='-',\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='resultat',\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      block_items[1]=\n                        Return(\n                          expr=\n                            ID(\n                              name='resultat',\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case1',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                              right=\n                                UnaryOp(\n                                  op='-',\n                                  expr=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case1',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='resultat',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          block_items[1]=\n                            Return(\n                              expr=\n                                ID(\n                                  name='resultat',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='resultat',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.22037337720394135,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2548515498638153,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.26207464933395386,
                    "project_name": "20223_01_27_ExerciceEnregistrements",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client un_client; \n\n\tstrcpy(un_client.num_ass_sociale , \"345 673 123\");\n\tstrcpy(un_client.nom, \"Valjean\");\n\tstrcpy(un_client.prenom, \"Jean\");\n\t \n\tun_client.date_naiss.jour = 10;\n\tun_client.date_naiss.mois = 5; \n\tun_client.date_naiss.annee = 1562;\n\n\tun_client.nb_comptes = 0;\n\n\tstrcpy(un_client.comptes[0].identifiant,  \"AB5676\");\n\tun_client.comptes[0].solde = 2000;\n\tun_client.comptes[0].limite_decouvert = 1500;\n\tun_client.comptes[0].taux_interets = 1.5;\n\n\tun_client.nb_comptes++;\n\n\tstrcpy(un_client.comptes[1].identifiant, \"DF6789\");\n\tun_client.comptes[1].solde = 150;\n\tun_client.comptes[1].limite_decouvert = 0;\n\tun_client.comptes[1].taux_interets = 0.4;\n\n\tun_client.nb_comptes++; \n\n\tclient_afficher(&un_client);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.2622818052768707,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                },
                {
                    "distance": 0.27395907044410706,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int  lab_est_une_sortie(int position[2], int grille[][100], int hauteur_grille, int largeur_grille)\n{\n    if(position[1]==hauteur_grille || position[2]==largeur_grille || position[1]==0 || position[2]==0)\n    {\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='2',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2883986830711365,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.2965104877948761,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2972365264114006,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.30078933537478647,
                    "project_name": "20233_02_06_operateurs_logiques",
                    "function_name": "main",
                    "function_code": "int main() {\n    int x;\n\n    x = 15;\n\n    if( 10 < x  &&  x< 20 )\n    {\n        printf(\"x est dans l'intervalle!\\n\");\n    }"
                },
                {
                    "distance": 0.303506076335907,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "calcul_deplacements_possibles",
            "function_code": "void calcul_deplacements_possibles (int grille[][100], int hauteur_grille, int largeur_grille, int pos_ligne, int pos_colonne, int solution_partielle[][2], int *nb_deplacements, int deplacements[4][2])\n{\n    int pos[2];\n    pos[0] = pos_ligne;\n    pos[1] = pos_colonne;\n\n    for (int i = 0; i < hauteur_grille; i++)\n    {\n        for (int j = 0; j < largeur_grille; j++)\n        {\n            if (grille[i][j] == 0 && lab_est_cases_adjacentes(grille, pos) == 1)\n            {\n                deplacements[i][j] = grille[i][j];\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='calcul_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='calcul_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pos',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='pos',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='pos',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            ID(\n              name='pos_ligne',\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='pos',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            ID(\n              name='pos_colonne',\n            )\n        )\n      block_items[3]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='i',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_est_cases_adjacentes',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='pos',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='deplacements',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='i',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                  rvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='i',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.20407359302043915,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.22173291444778442,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.23833486437797546,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.2605085074901581,
                    "project_name": "20233_02_36_Tab2D_Dyn",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int tab2d[3][4];\n    int** tab2d_dyn;\n    int nb_lignes = 3;\n    int nb_colonnes = 4;\n\n    tab2d_dyn = creer_tab2d_dyn(nb_lignes, nb_colonnes);\n\n    for(int i=0; i<nb_lignes; i++)\n    {\n        for(int j=0; j<nb_colonnes; j++)\n        {\n            tab2d_dyn[i][j] = i*j;\n        }"
                },
                {
                    "distance": 0.26245784759521484,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                }
            ]
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement (int deplacements_possibles[][2], int nb_deplacements_possibles)\n{\n    if(nb_deplacements_possibles>0)\n    {\n\n        return deplacements_possibles[0][0];\n\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='>',\n              left=\n                ID(\n                  name='nb_deplacements_possibles',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements_possibles',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.3052880129506446,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3066670000553131,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.31079548597335815,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3114546563133921,
                    "project_name": "20233_02_06_operateurs_logiques",
                    "function_name": "main",
                    "function_code": "int main() {\n    int x;\n\n    x = 15;\n\n    if( 10 < x  &&  x< 20 )\n    {\n        printf(\"x est dans l'intervalle!\\n\");\n    }"
                },
                {
                    "distance": 0.3151094317436218,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                }
            ]
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(int grille[][100], int hauteur_grille, int largeur_grille, int entree[2], int pile_solution[][2], int debug)\n{\n    \n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.28242111154239763,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2839731276035309,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.28596692435521975,
                    "project_name": "20233_02_32_Exercice_Etudiants",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_etudiant* e1;\n\n    e1 = t_etudiant_init(\"Baggins\", \"Bilbo\");\n\n    strcpy(e1->code_perm, \"BAGB00000000\");\n    e1->intra = 75;\n    e1->finale = 86.5;\n    e1->tp1 = 80;\n    e1->tp2 = 85;\n\n    t_etudiant_afficher(e1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.28785398602485657,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.2882326543331146,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n     \n   \n   \n \n \n\tint pile_solution[1000][2];  \n\tint depile_x;  \n\tint depile_y;  \n    int case2[2]={1,10};\n    int case1[2]={1,9};\n\n\tint grille[100][100];  \n\tint point_entree[2];  \n\tint hauteur_grille, largeur_grille;  \n\tint succes_chargement;  \n\n\n    succes_chargement=charger_labyrinthe(\"grille1.txt\", grille, point_entree, &hauteur_grille, &largeur_grille);\n\n    if (!succes_chargement)\n    {\n        printf(\"Une erreur s'est produite lors du chargement de la grille.\\n\");\n        printf(\"Verifiez que le fichier de la grille se trouve bien dans le dossier du projet.\\n\");\n        system(\"pause\");\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='depile_x',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='depile_x',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='depile_y',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='depile_y',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='case2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='case1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='9',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[9]=\n        Decl(\n          name='succes_chargement',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='succes_chargement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[10]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='succes_chargement',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='charger_labyrinthe',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='string',\n                      value='\"grille1.txt\"',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='point_entree',\n                    )\n                  exprs[3]=\n                    UnaryOp(\n                      op='&',\n                      expr=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                    )\n                  exprs[4]=\n                    UnaryOp(\n                      op='&',\n                      expr=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='succes_chargement',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Une erreur s\\'est produite lors du chargement de la grille.\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Verifiez que le fichier de la grille se trouve bien dans le dossier du projet.\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='system',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"pause\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='point_entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='point_entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"case: %i,%i\\\\n\"',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"case: %i,%i\\\\n\"',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Adjacent si 1,non adjacent si 0: \"',\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%i\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='case1',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='case2',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n*** Affichage du tableau avec solution: ***\\\\n\"',\n                )\n            )\n        )\n      block_items[19]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solution',\n                )\n            )\n        )\n      block_items[20]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n*** Contenu de la pile solution: ***\\\\n\"',\n                )\n            )\n        )\n      block_items[21]=\n        While(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_est_vide',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_depiler',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='depile_y',\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='depile_x',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"(%d, %d)\\\\n\"',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='depile_y',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='depile_x',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.10758452117443085,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.12207704782485962,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.14308254420757294,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.147654727101326,
                    "project_name": "20233_02_16_Pointeurs",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.15080580115318298,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                }
            ]
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 1.4687043530561566e-05,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 8.82512390978703e-05,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.2673034369945526,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "nb_combinaisons",
                    "function_code": "int nb_combinaisons(int n, int k)\n{\n\tint resultat; \n\n\tresultat = factorielle(n) / (factorielle(k) * factorielle(n - k));\n\n\treturn resultat;\n}"
                },
                {
                    "distance": 0.269839068351036,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2709193527698517,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_tirees; \n\tint nb_total; \n\tint combinaisons; \n\n\tbienvenue();\n\n\tprintf(\"Combien de boules tirees: \");\n\tscanf(\"%d\", &nb_tirees);\n\n\tprintf(\"Combien de boules au total: \");\n\tscanf(\"%d\", &nb_total);\n\n\tcombinaisons = nb_combinaisons(nb_total, nb_tirees);\n\n\t \n\n\tprintf(\"Nombre de combinaisons : %d\\n\", combinaisons);\n\n\t \n\n\n\t \n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "varia_sum",
            "function_code": "int varia_sum(int count, ...)\n{\n    va_list args;\n    int total = 0;\n\n    __builtin_va_start((args));\n\n    for (int i = 0; i < count; i++)\n    {\n        total += __builtin_va_arg((args));\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='varia_sum',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='count',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='count',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                EllipsisParam(\n                )\n            )\n          type=\n            TypeDecl(\n              declname='varia_sum',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='args',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='args',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['va_list'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='total',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='total',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='__builtin_va_start',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='args',\n                )\n            )\n        )\n      block_items[3]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='count',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='+=',\n                  lvalue=\n                    ID(\n                      name='total',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='__builtin_va_arg',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='args',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        EmptyStatement(\n        )\n      block_items[5]=\n        Return(\n          expr=\n            ID(\n              name='total',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.24484448549439217,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "somme_produit",
                    "function_code": "void somme_produit(int n, int* adr_somme, double* adr_produit)\n{\n    *adr_somme = 0;\n    *adr_produit = 1;\n    for(int i = 1; i<= n; i++)\n    {\n        *adr_somme += i;\n        *adr_produit *= i;\n    }"
                },
                {
                    "distance": 0.25171738862991333,
                    "project_name": "20233_02_07_Somme_Entiers",
                    "function_name": "main",
                    "function_code": "int main() {\n   int n;  \n   int somme = 0;\n   int compteur = 1;\n\n   printf(\"Saisir le maximum de la somme: \");\n   scanf(\"%i\", &n);\n\n   while( compteur <= n )\n   {\n       somme = somme + compteur;\n       compteur++;\n   }"
                },
                {
                    "distance": 0.2546570769474294,
                    "project_name": "20223_01_15_ExerciceFibo",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint val_fibo;\n\tdouble nb_or;\n\n\tfor (int i = 0; i < 30; i++)\n\t{\n\t\tval_fibo = fibo(i, &nb_or);\n\n\t\tprintf(\"Fibo(%d) = %d - Nb d'or: %.30lf\\n\", i,  val_fibo, nb_or);\n\t}"
                },
                {
                    "distance": 0.25494724686448916,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.25546330213546753,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char* nom_fichier, int grille[][100], int point_entree[2], int* hauteur_grille, int* largeur_grille)\n{\n\tFILE* fichier;\n\tchar caractere_lu;\n\tint i = 0,  \n\t\tj = 0;\n\tfichier = fopen(nom_fichier, \"r\");\n\tif (!fichier)\n\t{\n\t\treturn 0;\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le m\ufffdme nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2308000360012142,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "machine_charge_machines",
                    "function_code": "t_machine_ptr* machine_charge_machines(const char* nom_fichier, int* nb_machines)\n{\n    FILE* fichier;\n\n    t_machine_ptr* tab;\n\n    fichier = fopen(nom_fichier, \"r\");\n    if(fichier == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.2316010594367981,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.251166433095932,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.2525852918624878,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2717103834469492,
                    "project_name": "20233_02_34_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_date date1, date2;\n    t_machine* machine1;\n    int nb_machines;\n     \n    t_machine** machines;\n\n    printf(\"Combien de machines? \");\n    scanf(\"%i\", &nb_machines);\n\n    machines = (t_machine**)malloc(sizeof(t_machine*) * nb_machines);\n    if(machines == 0)\n    {\n        printf(\"Erreur d'allocation!\\n\");\n        exit(1);\n    }"
                }
            ]
        }
    ]
}