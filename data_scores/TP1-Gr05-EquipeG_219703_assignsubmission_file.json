{
    "project_name": "TP1-Gr05-EquipeG_219703_assignsubmission_file",
    "functions": [
        {
            "function_name": "swap",
            "function_code": "void swap(void *a, void *b, size_t size)\n{\n    void *temp = malloc(size);\n    if (temp != 0)\n    {\n        memcpy(temp, a, size);\n        memcpy(a, b, size);\n        memcpy(b, temp, size);\n        free(temp);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='swap',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='a',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='a',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['void'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='b',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='b',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['void'],\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='size',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='size',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['size_t'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='swap',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='temp',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='temp',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['void'],\n                    )\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='malloc',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='size',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='temp',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='memcpy',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='temp',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='a',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='size',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='memcpy',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='a',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='b',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='size',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='memcpy',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='b',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='temp',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='size',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='free',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='temp',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.37450408935546875,
                    "project_name": "20223_01_20_Tri",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau[] = { 44, 10, 20, 55, 10, 24, 35 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau, 7);\n\n\ttri_insertion(mon_tableau, 7);\n\n\tprintf(\"Apres le tri: \\n\");\n\tafficher_tab(mon_tableau, 7);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.3932408392429352,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.40239641070365906,
                    "project_name": "20233_02_15_Exercice_Minimum",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}"
                },
                {
                    "distance": 0.40891252901144315,
                    "project_name": "20223_01_16_Tab_PTR",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau[100];\n\n\tmon_tableau[0] = 10; \n\tmon_tableau[1] = 20;\n\tmon_tableau[2] = 30;\n\tmon_tableau[3] = 40;\n\n\tprintf(\"%d\\n\", *mon_tableau);\n\n\tprintf(\"%d\\n\", *(mon_tableau+1));\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.4098815619945526,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                }
            ]
        },
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille(int grille[][100],int hauteur_grille,\n                         int largeur_grille, int pile_solution[][2])\n{\n    int colonne;  \n    int ligne;  \n    int etat_pile;  \n    unsigned char mur = 219;  \n    char couloir = 32;  \n    char pion = 88;  \n\n\n     \n     if (pile_solution == 0)\n     {\n         for (ligne = 0; ligne < hauteur_grille; ligne++)\n         {\n             for (colonne = 0; colonne < largeur_grille; colonne++)\n             {\n                 if (grille[ligne][colonne] == 1)\n                 {\n                     printf(\"%c\", mur);\n                 }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='etat_pile',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='etat_pile',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='mur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='mur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['unsigned', 'char'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='219',\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='couloir',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='couloir',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='32',\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='pion',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='pion',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='88',\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='pile_solution',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='ligne',\n                        )\n                      rvalue=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='ligne',\n                        )\n                      right=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='ligne',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        For(\n                          init=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='colonne',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='colonne',\n                                )\n                              right=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='colonne',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='ligne',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='colonne',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"%c\"',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='mur',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='ligne',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='colonne',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"%c\"',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='couloir',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\n\"',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        If(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='pile_solution',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='ligne',\n                        )\n                      rvalue=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='ligne',\n                        )\n                      right=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='ligne',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        For(\n                          init=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='colonne',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='colonne',\n                                )\n                              right=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='colonne',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ID(\n                                      name='etat_pile',\n                                    )\n                                  rvalue=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_contient',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='ligne',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='colonne',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='ligne',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='colonne',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"%c\"',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='mur',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='&&',\n                                      left=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='grille',\n                                                    )\n                                                  subscript=\n                                                    ID(\n                                                      name='ligne',\n                                                    )\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='colonne',\n                                                )\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      right=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ID(\n                                              name='etat_pile',\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"%c\"',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='couloir',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='&&',\n                                      left=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='grille',\n                                                    )\n                                                  subscript=\n                                                    ID(\n                                                      name='ligne',\n                                                    )\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='colonne',\n                                                )\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      right=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ID(\n                                              name='etat_pile',\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"%c\"',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='pion',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\n\"',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.21542344987392426,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.22365154325962067,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.24623918533325195,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.2539761469235124,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.2579938769340515,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                }
            ]
        },
        {
            "function_name": "lab_calculer_deplacements_possibles",
            "function_code": "void lab_calculer_deplacements_possibles(int grille[][100],\n                                         int hauteur_grille, int largeur_grille,int pos_ligne,\n                                         int pos_colonne, int solution_partielle[][2], int *nb_deplacements,\n                                         int deplacements[4][2])\n{\n\n    int pos_temp[2] = {0};  \n    int verif_sol;  \n\n     \n    *nb_deplacements = 0;  \n\n     \n    for (int i = 0; i < 4; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n           deplacements[i][j] = 0;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pos_temp',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='pos_temp',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='verif_sol',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='verif_sol',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='i',\n                                    )\n                                )\n                              subscript=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          rvalue=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='dplc_haut',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pos_temp',\n                )\n              exprs[1]=\n                ID(\n                  name='pos_ligne',\n                )\n              exprs[2]=\n                ID(\n                  name='pos_colonne',\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='verif_sol',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='pile_contient',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                  exprs[1]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[2]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pos_temp',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='verif_sol',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='dplc_bas',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pos_temp',\n                )\n              exprs[1]=\n                ID(\n                  name='pos_ligne',\n                )\n              exprs[2]=\n                ID(\n                  name='pos_colonne',\n                )\n            )\n        )\n      block_items[8]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='verif_sol',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='pile_contient',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                  exprs[1]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[2]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pos_temp',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='verif_sol',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='dplc_gauche',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pos_temp',\n                )\n              exprs[1]=\n                ID(\n                  name='pos_ligne',\n                )\n              exprs[2]=\n                ID(\n                  name='pos_colonne',\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='verif_sol',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='pile_contient',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                  exprs[1]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[2]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pos_temp',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='verif_sol',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='dplc_droite',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pos_temp',\n                )\n              exprs[1]=\n                ID(\n                  name='pos_ligne',\n                )\n              exprs[2]=\n                ID(\n                  name='pos_colonne',\n                )\n            )\n        )\n      block_items[14]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='verif_sol',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='pile_contient',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                  exprs[1]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  exprs[2]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pos_temp',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pos_temp',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='verif_sol',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements',\n                                    )\n                                  subscript=\n                                    UnaryOp(\n                                      op='*',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements',\n                                        )\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='pos_temp',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.1963508576154709,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.20795876881228526,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.20817811623974353,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.22138050198554993,
                    "project_name": "20223_01_29_Encapsulation",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client* un_client = 0;\n\n\tun_client = client_init();\n\n\n\n\tstrcpy(un_client->num_ass_sociale, \"345 673 123\");\n\tstrcpy(un_client->nom, \"Valjean\");\n\tstrcpy(un_client->prenom, \"Jean\");\n\t \n\tun_client->date_naiss.jour = 10;\n\tun_client->date_naiss.mois = 5;\n\tun_client->date_naiss.annee = 1562;\n\n\tun_client->nb_comptes = 0;\n\n\tstrcpy(un_client->comptes[0].identifiant, \"AB5676\");\n\tun_client->comptes[0].solde = 2000;\n\tun_client->comptes[0].limite_decouvert = 1500;\n\tun_client->comptes[0].taux_interets = 1.5;\n\n\tun_client->nb_comptes++;\n\n\tstrcpy(un_client->comptes[1].identifiant, \"DF6789\");\n\tun_client->comptes[1].solde = 150;\n\tun_client->comptes[1].limite_decouvert = 0;\n\tun_client->comptes[1].taux_interets = 0.4;\n\n\tun_client->nb_comptes++;\n\n\tclient_afficher(un_client);\n\n\tfree(un_client);\n\n\n\tt_client* client2; \n\n\tclient2 = client_init();\n\n\tclient_afficher(client2);\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.22654253244400024,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                }
            ]
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(int deplacements_possibles[][2], int nb_deplacements_possibles)\n{\n    int choix_al;  \n    if(nb_deplacements_possibles == 1)\n    {\n        return 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix_al',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix_al',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='nb_deplacements_possibles',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='>',\n                  left=\n                    ID(\n                      name='nb_deplacements_possibles',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='srand',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Cast(\n                              to_type=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['unsigned', 'int'],\n                                        )\n                                    )\n                                )\n                              expr=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='time',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  block_items[1]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='rand',\n                        )\n                    )\n                  block_items[2]=\n                    Assignment(\n                      op='=',\n                      lvalue=\n                        ID(\n                          name='choix_al',\n                        )\n                      rvalue=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='nb_aleatoire',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='nb_deplacements_possibles',\n                                )\n                            )\n                        )\n                    )\n                  block_items[3]=\n                    Return(\n                      expr=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='choix_al',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2709667384624481,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.28391923737564884,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.28710442781448364,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2880158792723129,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2893404510610766,
                    "project_name": "20233_02_02_ConversionTypes",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double distance;  \n    float trajet_parcouru;  \n    int valeur_entiere;\n    double salaire;\n\n\n    distance = 1345.50;\n\n    trajet_parcouru = (float)distance;\n\n    valeur_entiere = (int)distance;\n\n    printf(\"Contenu de valeur_entirere: %i\\n\", valeur_entiere);\n\n     \n     \n    printf(\"Conetnu de salaire: %f\\n\", salaire);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n    int coordonnee_x1;  \n    int coordonnee_y1;  \n    int coordonnee_x2;  \n    int coordonnee_y2;  \n\n    coordonnee_x1 = case1[0];  \n    coordonnee_y1 = case1[1];  \n    coordonnee_x2 = case2[0];  \n    coordonnee_y2 = case2[1];  \n\n     \n    if (coordonnee_x1 == coordonnee_x2 && (coordonnee_y1 - coordonnee_y2 == -1\n        || coordonnee_y1 - coordonnee_y2 == 1))\n    {\n         \n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='coordonnee_x1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='coordonnee_x1',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='coordonnee_y1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='coordonnee_y1',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='coordonnee_x2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='coordonnee_x2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='coordonnee_y2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='coordonnee_y2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='coordonnee_x1',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[5]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='coordonnee_y1',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case1',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='coordonnee_x2',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='coordonnee_y2',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='case2',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='coordonnee_x1',\n                    )\n                  right=\n                    ID(\n                      name='coordonnee_x2',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='coordonnee_y1',\n                            )\n                          right=\n                            ID(\n                              name='coordonnee_y2',\n                            )\n                        )\n                      right=\n                        UnaryOp(\n                          op='-',\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='coordonnee_y1',\n                            )\n                          right=\n                            ID(\n                              name='coordonnee_y2',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='coordonnee_y1',\n                    )\n                  right=\n                    ID(\n                      name='coordonnee_y2',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='coordonnee_x1',\n                            )\n                          right=\n                            ID(\n                              name='coordonnee_x2',\n                            )\n                        )\n                      right=\n                        UnaryOp(\n                          op='-',\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='coordonnee_x1',\n                            )\n                          right=\n                            ID(\n                              name='coordonnee_x2',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.22008559107780457,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2512587308883667,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2601749002933502,
                    "project_name": "20233_02_36_Tab2D_Dyn",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int tab2d[3][4];\n    int** tab2d_dyn;\n    int nb_lignes = 3;\n    int nb_colonnes = 4;\n\n    tab2d_dyn = creer_tab2d_dyn(nb_lignes, nb_colonnes);\n\n    for(int i=0; i<nb_lignes; i++)\n    {\n        for(int j=0; j<nb_colonnes; j++)\n        {\n            tab2d_dyn[i][j] = i*j;\n        }"
                },
                {
                    "distance": 0.26484909653663635,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                },
                {
                    "distance": 0.2673039734363556,
                    "project_name": "20233_02_16_Pointeurs",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(int position[2], int grille[][100], int hauteur_grille, int largeur_grille)\n{\n     \n     \n     \n\n     \n    if (position[0] == 0 || position[0] == hauteur_grille - 1 || position[1] == 0\n        || position[1] == largeur_grille - 1)\n    {\n         \n        if (grille[position[0]][position[1]] != 1)\n        {\n             \n            return 1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  iffalse=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.27479249238967896,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.28556254506111145,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2864858587897503,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.28861258656240335,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2962026596069336,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(int grille[][100], int hauteur_grille, int largeur_grille, int entree[2], int pile_solution[][2], int debug)\n{\n    int pos_ligne = 0;  \n    int pos_colonne = 0;  \n    int pile_historique[100 * 100][2];  \n    int deplacements_possibles[4][2];  \n    int nb_deplacements_possibles = 0;  \n    int deplacement_choisie;  \n    int nouvelle_position[2];  \n    int pos_a_comparer[2];  \n    int sortie = 0;  \n    int cas = 0;  \n    int pile_chemins_alternatifs[100 * 100][2];  \n     \n    pos_ligne=entree[0];\n    pos_colonne=entree[1];\n\n     \n     \n    pile_initialiser(pile_solution, 100 * 100);\n     \n    pile_initialiser(pile_chemins_alternatifs,100 * 100);\n     \n    pile_initialiser(pile_historique, 100 * 100);\n\n     \n     \n    pile_empiler(pile_solution, entree[0], entree[1]);\n     \n    pile_empiler(pile_historique, entree[0], entree[1]);\n\n     \n    do\n    {\n         \n        lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille, pos_ligne,\n                                            pos_colonne,pile_historique,\n                                            &nb_deplacements_possibles,deplacements_possibles);\n\n\n\n         \n        if (nb_deplacements_possibles > 0)\n        {\n             \n            deplacement_choisie = lab_choisir_deplacement(deplacements_possibles,\n                                                          nb_deplacements_possibles);\n\n             \n             \n            nouvelle_position[0]=deplacements_possibles[deplacement_choisie][0];\n             \n            nouvelle_position[1]=deplacements_possibles[deplacement_choisie][1];\n\n             \n             \n             \n            pos_ligne=deplacements_possibles[deplacement_choisie][0];\n             \n            pos_colonne=deplacements_possibles[deplacement_choisie][1];\n\n             \n            pile_empiler(pile_solution, pos_ligne,pos_colonne);\n            pile_empiler(pile_historique, pos_ligne,pos_colonne);\n\n             \n            sortie = lab_est_une_sortie(nouvelle_position, grille, hauteur_grille, largeur_grille);\n\n             \n            if(nb_deplacements_possibles>1)\n            {\n                 \n                for (int j = 0; j <nb_deplacements_possibles; j++)\n                {\n                    if (j != deplacement_choisie)\n                    {\n                        pile_empiler(pile_chemins_alternatifs,\n                                     deplacements_possibles[j][0], deplacements_possibles[j][1]);\n                    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pos_ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='pos_ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='pos_colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='pos_colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='pile_historique',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_historique',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='nb_deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='deplacement_choisie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='deplacement_choisie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nouvelle_position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='pos_a_comparer',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='pos_a_comparer',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[9]=\n        Decl(\n          name='cas',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='cas',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[10]=\n        Decl(\n          name='pile_chemins_alternatifs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemins_alternatifs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='pos_ligne',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='entree',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[12]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='pos_colonne',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='entree',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[13]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemins_alternatifs',\n                )\n              exprs[1]=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_historique',\n                )\n              exprs[1]=\n                BinaryOp(\n                  op='*',\n                  left=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_historique',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[18]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='>',\n                  left=\n                    ID(\n                      name='nb_deplacements_possibles',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='sortie',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      exprs[4]=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_historique',\n                        )\n                      exprs[6]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='nb_deplacements_possibles',\n                            )\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='deplacement_choisie',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_choisir_deplacement',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='nb_deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='nouvelle_position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='deplacement_choisie',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='nouvelle_position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='deplacement_choisie',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='pos_ligne',\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='deplacement_choisie',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[4]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='pos_colonne',\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='deplacement_choisie',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[5]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                        )\n                      block_items[6]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_historique',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                        )\n                      block_items[7]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='sortie',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_est_une_sortie',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='hauteur_grille',\n                                    )\n                                  exprs[3]=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[8]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='>',\n                              left=\n                                ID(\n                                  name='nb_deplacements_possibles',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                For(\n                                  init=\n                                    DeclList(\n                                      decls[0]=\n                                        Decl(\n                                          name='j',\n                                          quals=[],\n                                          align=[],\n                                          storage=[],\n                                          funcspec=[],\n                                          type=\n                                            TypeDecl(\n                                              declname='j',\n                                              quals=[],\n                                              align=None,\n                                              type=\n                                                IdentifierType(\n                                                  names=['int'],\n                                                )\n                                            )\n                                          init=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  cond=\n                                    BinaryOp(\n                                      op='<',\n                                      left=\n                                        ID(\n                                          name='j',\n                                        )\n                                      right=\n                                        ID(\n                                          name='nb_deplacements_possibles',\n                                        )\n                                    )\n                                  next=\n                                    UnaryOp(\n                                      op='p++',\n                                      expr=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                  stmt=\n                                    Compound(\n                                      block_items[0]=\n                                        If(\n                                          cond=\n                                            BinaryOp(\n                                              op='!=',\n                                              left=\n                                                ID(\n                                                  name='j',\n                                                )\n                                              right=\n                                                ID(\n                                                  name='deplacement_choisie',\n                                                )\n                                            )\n                                          iftrue=\n                                            Compound(\n                                              block_items[0]=\n                                                FuncCall(\n                                                  name=\n                                                    ID(\n                                                      name='pile_empiler',\n                                                    )\n                                                  args=\n                                                    ExprList(\n                                                      exprs[0]=\n                                                        ID(\n                                                          name='pile_chemins_alternatifs',\n                                                        )\n                                                      exprs[1]=\n                                                        ArrayRef(\n                                                          name=\n                                                            ArrayRef(\n                                                              name=\n                                                                ID(\n                                                                  name='deplacements_possibles',\n                                                                )\n                                                              subscript=\n                                                                ID(\n                                                                  name='j',\n                                                                )\n                                                            )\n                                                          subscript=\n                                                            Constant(\n                                                              type='int',\n                                                              value='0',\n                                                            )\n                                                        )\n                                                      exprs[2]=\n                                                        ArrayRef(\n                                                          name=\n                                                            ArrayRef(\n                                                              name=\n                                                                ID(\n                                                                  name='deplacements_possibles',\n                                                                )\n                                                              subscript=\n                                                                ID(\n                                                                  name='j',\n                                                                )\n                                                            )\n                                                          subscript=\n                                                            Constant(\n                                                              type='int',\n                                                              value='1',\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[9]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='debug',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_afficher_grille',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='pile_chemins_alternatifs',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_depiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='pos_ligne',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='pos_colonne',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                            )\n                          block_items[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                          block_items[3]=\n                            DoWhile(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='cas',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              stmt=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_haut_pile',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='pos_ligne',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='pos_colonne',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pos_a_comparer',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      rvalue=\n                                        ID(\n                                          name='pos_ligne',\n                                        )\n                                    )\n                                  block_items[2]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pos_a_comparer',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                      rvalue=\n                                        ID(\n                                          name='pos_colonne',\n                                        )\n                                    )\n                                  block_items[3]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ID(\n                                          name='cas',\n                                        )\n                                      rvalue=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='lab_est_cases_adjacentes',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='nouvelle_position',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='pos_a_comparer',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[4]=\n                                    If(\n                                      cond=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ID(\n                                              name='cas',\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      iftrue=\n                                        Compound(\n                                          block_items[0]=\n                                            FuncCall(\n                                              name=\n                                                ID(\n                                                  name='pile_depiler',\n                                                )\n                                              args=\n                                                ExprList(\n                                                  exprs[0]=\n                                                    ID(\n                                                      name='pile_solution',\n                                                    )\n                                                  exprs[1]=\n                                                    UnaryOp(\n                                                      op='&',\n                                                      expr=\n                                                        ID(\n                                                          name='pos_ligne',\n                                                        )\n                                                    )\n                                                  exprs[2]=\n                                                    UnaryOp(\n                                                      op='&',\n                                                      expr=\n                                                        ID(\n                                                          name='pos_colonne',\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[4]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[5]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_historique',\n                                    )\n                                  exprs[1]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[6]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              rvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          block_items[7]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                              rvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          block_items[8]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_calculer_deplacements_possibles',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='hauteur_grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                  exprs[3]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[4]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  exprs[5]=\n                                    ID(\n                                      name='pile_historique',\n                                    )\n                                  exprs[6]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='nb_deplacements_possibles',\n                                        )\n                                    )\n                                  exprs[7]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[19]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='debug',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_afficher_grille',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='pile_solution',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[20]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='debug',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_afficher_grille',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='pile_solution',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[21]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='sortie',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.20332932472229004,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.20981267270258055,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.22213101387023926,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.23270964622497559,
                    "project_name": "20223_01_27_ExerciceEnregistrements",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client un_client; \n\n\tstrcpy(un_client.num_ass_sociale , \"345 673 123\");\n\tstrcpy(un_client.nom, \"Valjean\");\n\tstrcpy(un_client.prenom, \"Jean\");\n\t \n\tun_client.date_naiss.jour = 10;\n\tun_client.date_naiss.mois = 5; \n\tun_client.date_naiss.annee = 1562;\n\n\tun_client.nb_comptes = 0;\n\n\tstrcpy(un_client.comptes[0].identifiant,  \"AB5676\");\n\tun_client.comptes[0].solde = 2000;\n\tun_client.comptes[0].limite_decouvert = 1500;\n\tun_client.comptes[0].taux_interets = 1.5;\n\n\tun_client.nb_comptes++;\n\n\tstrcpy(un_client.comptes[1].identifiant, \"DF6789\");\n\tun_client.comptes[1].solde = 150;\n\tun_client.comptes[1].limite_decouvert = 0;\n\tun_client.comptes[1].taux_interets = 0.4;\n\n\tun_client.nb_comptes++; \n\n\tclient_afficher(&un_client);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.23656733334064484,
                    "project_name": "20223_01_29_Encapsulation",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client* un_client = 0;\n\n\tun_client = client_init();\n\n\n\n\tstrcpy(un_client->num_ass_sociale, \"345 673 123\");\n\tstrcpy(un_client->nom, \"Valjean\");\n\tstrcpy(un_client->prenom, \"Jean\");\n\t \n\tun_client->date_naiss.jour = 10;\n\tun_client->date_naiss.mois = 5;\n\tun_client->date_naiss.annee = 1562;\n\n\tun_client->nb_comptes = 0;\n\n\tstrcpy(un_client->comptes[0].identifiant, \"AB5676\");\n\tun_client->comptes[0].solde = 2000;\n\tun_client->comptes[0].limite_decouvert = 1500;\n\tun_client->comptes[0].taux_interets = 1.5;\n\n\tun_client->nb_comptes++;\n\n\tstrcpy(un_client->comptes[1].identifiant, \"DF6789\");\n\tun_client->comptes[1].solde = 150;\n\tun_client->comptes[1].limite_decouvert = 0;\n\tun_client->comptes[1].taux_interets = 0.4;\n\n\tun_client->nb_comptes++;\n\n\tclient_afficher(un_client);\n\n\tfree(un_client);\n\n\n\tt_client* client2; \n\n\tclient2 = client_init();\n\n\tclient_afficher(client2);\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "main",
            "function_code": "int main(void) {\n    int grille[100][100];  \n    int entree[2];  \n    int largeur_grille;  \n    int hauteur_grille;  \n    int grille_chargee=0;  \n    int choix_menu=0;  \n    int debug;  \n    int pile_solution[1000][2];  \n    int solution_trouver;  \n    char nom_fichier[100];  \n\n\n     \n    while (choix_menu != 4)\n    {\n         \n        choix_menu = selection_menu(grille_chargee);\n\n         \n        switch (choix_menu)\n        {\n\n             \n            case 1:\n                if (grille_chargee == 0)\n                {\n                    do\n                    {\n                        menu_charger_labyrinthe(nom_fichier, 100);\n\n                         \n                        grille_chargee = charger_labyrinthe(nom_fichier, grille, entree, &hauteur_grille,\n                                                            &largeur_grille);\n                         \n                        if (grille_chargee == 0)\n                        {\n                            printf(\"Fichier introuvable\\n\");\n                        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='grille_chargee',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='grille_chargee',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='choix_menu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='debug',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='debug',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='solution_trouver',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='solution_trouver',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[9]=\n        Decl(\n          name='nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[10]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='choix_menu',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix_menu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='selection_menu',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='grille_chargee',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Switch(\n                  cond=\n                    ID(\n                      name='choix_menu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='grille_chargee',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    DoWhile(\n                                      cond=\n                                        BinaryOp(\n                                          op='!=',\n                                          left=\n                                            ID(\n                                              name='grille_chargee',\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                      stmt=\n                                        Compound(\n                                          block_items[0]=\n                                            FuncCall(\n                                              name=\n                                                ID(\n                                                  name='menu_charger_labyrinthe',\n                                                )\n                                              args=\n                                                ExprList(\n                                                  exprs[0]=\n                                                    ID(\n                                                      name='nom_fichier',\n                                                    )\n                                                  exprs[1]=\n                                                    Constant(\n                                                      type='int',\n                                                      value='100',\n                                                    )\n                                                )\n                                            )\n                                          block_items[1]=\n                                            Assignment(\n                                              op='=',\n                                              lvalue=\n                                                ID(\n                                                  name='grille_chargee',\n                                                )\n                                              rvalue=\n                                                FuncCall(\n                                                  name=\n                                                    ID(\n                                                      name='charger_labyrinthe',\n                                                    )\n                                                  args=\n                                                    ExprList(\n                                                      exprs[0]=\n                                                        ID(\n                                                          name='nom_fichier',\n                                                        )\n                                                      exprs[1]=\n                                                        ID(\n                                                          name='grille',\n                                                        )\n                                                      exprs[2]=\n                                                        ID(\n                                                          name='entree',\n                                                        )\n                                                      exprs[3]=\n                                                        UnaryOp(\n                                                          op='&',\n                                                          expr=\n                                                            ID(\n                                                              name='hauteur_grille',\n                                                            )\n                                                        )\n                                                      exprs[4]=\n                                                        UnaryOp(\n                                                          op='&',\n                                                          expr=\n                                                            ID(\n                                                              name='largeur_grille',\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                          block_items[2]=\n                                            If(\n                                              cond=\n                                                BinaryOp(\n                                                  op='==',\n                                                  left=\n                                                    ID(\n                                                      name='grille_chargee',\n                                                    )\n                                                  right=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              iftrue=\n                                                Compound(\n                                                  block_items[0]=\n                                                    FuncCall(\n                                                      name=\n                                                        ID(\n                                                          name='printf',\n                                                        )\n                                                      args=\n                                                        ExprList(\n                                                          exprs[0]=\n                                                            Constant(\n                                                              type='string',\n                                                              value='\"Fichier introuvable\\\\n\"',\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                              iffalse=\n                                                Compound(\n                                                  block_items[0]=\n                                                    For(\n                                                      init=\n                                                        DeclList(\n                                                          decls[0]=\n                                                            Decl(\n                                                              name='i',\n                                                              quals=[],\n                                                              align=[],\n                                                              storage=[],\n                                                              funcspec=[],\n                                                              type=\n                                                                TypeDecl(\n                                                                  declname='i',\n                                                                  quals=[],\n                                                                  align=None,\n                                                                  type=\n                                                                    IdentifierType(\n                                                                      names=['int'],\n                                                                    )\n                                                                )\n                                                              init=\n                                                                Constant(\n                                                                  type='int',\n                                                                  value='0',\n                                                                )\n                                                            )\n                                                        )\n                                                      cond=\n                                                        BinaryOp(\n                                                          op='<',\n                                                          left=\n                                                            ID(\n                                                              name='i',\n                                                            )\n                                                          right=\n                                                            Constant(\n                                                              type='int',\n                                                              value='4',\n                                                            )\n                                                        )\n                                                      next=\n                                                        UnaryOp(\n                                                          op='p++',\n                                                          expr=\n                                                            ID(\n                                                              name='i',\n                                                            )\n                                                        )\n                                                      stmt=\n                                                        Compound(\n                                                          block_items[0]=\n                                                            For(\n                                                              init=\n                                                                DeclList(\n                                                                  decls[0]=\n                                                                    Decl(\n                                                                      name='j',\n                                                                      quals=[],\n                                                                      align=[],\n                                                                      storage=[],\n                                                                      funcspec=[],\n                                                                      type=\n                                                                        TypeDecl(\n                                                                          declname='j',\n                                                                          quals=[],\n                                                                          align=None,\n                                                                          type=\n                                                                            IdentifierType(\n                                                                              names=['int'],\n                                                                            )\n                                                                        )\n                                                                      init=\n                                                                        Constant(\n                                                                          type='int',\n                                                                          value='0',\n                                                                        )\n                                                                    )\n                                                                )\n                                                              cond=\n                                                                BinaryOp(\n                                                                  op='<',\n                                                                  left=\n                                                                    ID(\n                                                                      name='j',\n                                                                    )\n                                                                  right=\n                                                                    Constant(\n                                                                      type='int',\n                                                                      value='2',\n                                                                    )\n                                                                )\n                                                              next=\n                                                                UnaryOp(\n                                                                  op='p++',\n                                                                  expr=\n                                                                    ID(\n                                                                      name='j',\n                                                                    )\n                                                                )\n                                                              stmt=\n                                                                Compound(\n                                                                  block_items[0]=\n                                                                    Assignment(\n                                                                      op='=',\n                                                                      lvalue=\n                                                                        ArrayRef(\n                                                                          name=\n                                                                            ArrayRef(\n                                                                              name=\n                                                                                ID(\n                                                                                  name='pile_solution',\n                                                                                )\n                                                                              subscript=\n                                                                                ID(\n                                                                                  name='i',\n                                                                                )\n                                                                            )\n                                                                          subscript=\n                                                                            ID(\n                                                                              name='j',\n                                                                            )\n                                                                        )\n                                                                      rvalue=\n                                                                        Constant(\n                                                                          type='int',\n                                                                          value='0',\n                                                                        )\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                  block_items[1]=\n                                                    FuncCall(\n                                                      name=\n                                                        ID(\n                                                          name='printf',\n                                                        )\n                                                      args=\n                                                        ExprList(\n                                                          exprs[0]=\n                                                            Constant(\n                                                              type='string',\n                                                              value='\"Grille charger avec success\\\\n\"',\n                                                            )\n                                                        )\n                                                    )\n                                                  block_items[2]=\n                                                    FuncCall(\n                                                      name=\n                                                        ID(\n                                                          name='lab_afficher_grille',\n                                                        )\n                                                      args=\n                                                        ExprList(\n                                                          exprs[0]=\n                                                            ID(\n                                                              name='grille',\n                                                            )\n                                                          exprs[1]=\n                                                            ID(\n                                                              name='hauteur_grille',\n                                                            )\n                                                          exprs[2]=\n                                                            ID(\n                                                              name='largeur_grille',\n                                                            )\n                                                          exprs[3]=\n                                                            ID(\n                                                              name='pile_solution',\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ID(\n                                          name='grille_chargee',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        Assignment(\n                                          op='=',\n                                          lvalue=\n                                            ID(\n                                              name='grille_chargee',\n                                            )\n                                          rvalue=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      block_items[1]=\n                                        DoWhile(\n                                          cond=\n                                            BinaryOp(\n                                              op='!=',\n                                              left=\n                                                ID(\n                                                  name='grille_chargee',\n                                                )\n                                              right=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          stmt=\n                                            Compound(\n                                              block_items[0]=\n                                                FuncCall(\n                                                  name=\n                                                    ID(\n                                                      name='menu_charger_labyrinthe',\n                                                    )\n                                                  args=\n                                                    ExprList(\n                                                      exprs[0]=\n                                                        ID(\n                                                          name='nom_fichier',\n                                                        )\n                                                      exprs[1]=\n                                                        Constant(\n                                                          type='int',\n                                                          value='100',\n                                                        )\n                                                    )\n                                                )\n                                              block_items[1]=\n                                                Assignment(\n                                                  op='=',\n                                                  lvalue=\n                                                    ID(\n                                                      name='grille_chargee',\n                                                    )\n                                                  rvalue=\n                                                    FuncCall(\n                                                      name=\n                                                        ID(\n                                                          name='charger_labyrinthe',\n                                                        )\n                                                      args=\n                                                        ExprList(\n                                                          exprs[0]=\n                                                            ID(\n                                                              name='nom_fichier',\n                                                            )\n                                                          exprs[1]=\n                                                            ID(\n                                                              name='grille',\n                                                            )\n                                                          exprs[2]=\n                                                            ID(\n                                                              name='entree',\n                                                            )\n                                                          exprs[3]=\n                                                            UnaryOp(\n                                                              op='&',\n                                                              expr=\n                                                                ID(\n                                                                  name='hauteur_grille',\n                                                                )\n                                                            )\n                                                          exprs[4]=\n                                                            UnaryOp(\n                                                              op='&',\n                                                              expr=\n                                                                ID(\n                                                                  name='largeur_grille',\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                              block_items[2]=\n                                                If(\n                                                  cond=\n                                                    BinaryOp(\n                                                      op='==',\n                                                      left=\n                                                        ID(\n                                                          name='grille_chargee',\n                                                        )\n                                                      right=\n                                                        Constant(\n                                                          type='int',\n                                                          value='0',\n                                                        )\n                                                    )\n                                                  iftrue=\n                                                    Compound(\n                                                      block_items[0]=\n                                                        FuncCall(\n                                                          name=\n                                                            ID(\n                                                              name='printf',\n                                                            )\n                                                          args=\n                                                            ExprList(\n                                                              exprs[0]=\n                                                                Constant(\n                                                                  type='string',\n                                                                  value='\"Fichier introuvable\\\\n\"',\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                  iffalse=\n                                                    Compound(\n                                                      block_items[0]=\n                                                        For(\n                                                          init=\n                                                            DeclList(\n                                                              decls[0]=\n                                                                Decl(\n                                                                  name='i',\n                                                                  quals=[],\n                                                                  align=[],\n                                                                  storage=[],\n                                                                  funcspec=[],\n                                                                  type=\n                                                                    TypeDecl(\n                                                                      declname='i',\n                                                                      quals=[],\n                                                                      align=None,\n                                                                      type=\n                                                                        IdentifierType(\n                                                                          names=['int'],\n                                                                        )\n                                                                    )\n                                                                  init=\n                                                                    Constant(\n                                                                      type='int',\n                                                                      value='0',\n                                                                    )\n                                                                )\n                                                            )\n                                                          cond=\n                                                            BinaryOp(\n                                                              op='<',\n                                                              left=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                              right=\n                                                                Constant(\n                                                                  type='int',\n                                                                  value='4',\n                                                                )\n                                                            )\n                                                          next=\n                                                            UnaryOp(\n                                                              op='p++',\n                                                              expr=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                            )\n                                                          stmt=\n                                                            Compound(\n                                                              block_items[0]=\n                                                                For(\n                                                                  init=\n                                                                    DeclList(\n                                                                      decls[0]=\n                                                                        Decl(\n                                                                          name='j',\n                                                                          quals=[],\n                                                                          align=[],\n                                                                          storage=[],\n                                                                          funcspec=[],\n                                                                          type=\n                                                                            TypeDecl(\n                                                                              declname='j',\n                                                                              quals=[],\n                                                                              align=None,\n                                                                              type=\n                                                                                IdentifierType(\n                                                                                  names=['int'],\n                                                                                )\n                                                                            )\n                                                                          init=\n                                                                            Constant(\n                                                                              type='int',\n                                                                              value='0',\n                                                                            )\n                                                                        )\n                                                                    )\n                                                                  cond=\n                                                                    BinaryOp(\n                                                                      op='<',\n                                                                      left=\n                                                                        ID(\n                                                                          name='j',\n                                                                        )\n                                                                      right=\n                                                                        Constant(\n                                                                          type='int',\n                                                                          value='2',\n                                                                        )\n                                                                    )\n                                                                  next=\n                                                                    UnaryOp(\n                                                                      op='p++',\n                                                                      expr=\n                                                                        ID(\n                                                                          name='j',\n                                                                        )\n                                                                    )\n                                                                  stmt=\n                                                                    Compound(\n                                                                      block_items[0]=\n                                                                        Assignment(\n                                                                          op='=',\n                                                                          lvalue=\n                                                                            ArrayRef(\n                                                                              name=\n                                                                                ArrayRef(\n                                                                                  name=\n                                                                                    ID(\n                                                                                      name='pile_solution',\n                                                                                    )\n                                                                                  subscript=\n                                                                                    ID(\n                                                                                      name='i',\n                                                                                    )\n                                                                                )\n                                                                              subscript=\n                                                                                ID(\n                                                                                  name='j',\n                                                                                )\n                                                                            )\n                                                                          rvalue=\n                                                                            Constant(\n                                                                              type='int',\n                                                                              value='0',\n                                                                            )\n                                                                        )\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                      block_items[1]=\n                                                        FuncCall(\n                                                          name=\n                                                            ID(\n                                                              name='printf',\n                                                            )\n                                                          args=\n                                                            ExprList(\n                                                              exprs[0]=\n                                                                Constant(\n                                                                  type='string',\n                                                                  value='\"Grille charger avec success\\\\n\"',\n                                                                )\n                                                            )\n                                                        )\n                                                      block_items[2]=\n                                                        FuncCall(\n                                                          name=\n                                                            ID(\n                                                              name='lab_afficher_grille',\n                                                            )\n                                                          args=\n                                                            ExprList(\n                                                              exprs[0]=\n                                                                ID(\n                                                                  name='grille',\n                                                                )\n                                                              exprs[1]=\n                                                                ID(\n                                                                  name='hauteur_grille',\n                                                                )\n                                                              exprs[2]=\n                                                                ID(\n                                                                  name='largeur_grille',\n                                                                )\n                                                              exprs[3]=\n                                                                ID(\n                                                                  name='pile_solution',\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='debug',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='solution_trouver',\n                                )\n                              rvalue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[5]=\n                                        ID(\n                                          name='debug',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[3]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='solution_trouver',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Resolue\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Le labyrinthe ne peut pas etre resolue.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='3',\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='debug',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='solution_trouver',\n                                )\n                              rvalue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[5]=\n                                        ID(\n                                          name='debug',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[3]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='solution_trouver',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Resolue\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Le labyrinthe ne peut pas etre resolue.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                          stmts[0]=\n                            Break(\n                            )\n                        )\n                      block_items[4]=\n                        Default(\n                          stmts[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Erreur, veuillez reesayer\\\\n\"',\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[12]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.20709270238876343,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.21815764904022217,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.23353415467950686,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.23407717049121857,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.23818403482437134,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                }
            ]
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 4.180460668312633e-05,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 6.0157996978757485e-05,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.2675427794456482,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "nb_combinaisons",
                    "function_code": "int nb_combinaisons(int n, int k)\n{\n\tint resultat; \n\n\tresultat = factorielle(n) / (factorielle(k) * factorielle(n - k));\n\n\treturn resultat;\n}"
                },
                {
                    "distance": 0.26972950641068305,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.27103325724601746,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_tirees; \n\tint nb_total; \n\tint combinaisons; \n\n\tbienvenue();\n\n\tprintf(\"Combien de boules tirees: \");\n\tscanf(\"%d\", &nb_tirees);\n\n\tprintf(\"Combien de boules au total: \");\n\tscanf(\"%d\", &nb_total);\n\n\tcombinaisons = nb_combinaisons(nb_total, nb_tirees);\n\n\t \n\n\tprintf(\"Nombre de combinaisons : %d\\n\", combinaisons);\n\n\t \n\n\n\t \n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "dplc_haut",
            "function_code": "void dplc_haut(int coordo[], int pos_lig, int pos_col)\n{\n    coordo[0]=pos_col;\n    coordo[1]=pos_lig-1;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='dplc_haut',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='coordo',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='coordo',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='pos_lig',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_lig',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='pos_col',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_col',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='dplc_haut',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            ID(\n              name='pos_col',\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='-',\n              left=\n                ID(\n                  name='pos_lig',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.3079245089165689,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                },
                {
                    "distance": 0.30840447545051575,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.3091932535171509,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.310007244348526,
                    "project_name": "20233_02_17_PassageParReference",
                    "function_name": "min_max_de_3",
                    "function_code": "void min_max_de_3(int val1, int val2, int val3, int* adr_pour_min, int* adr_pour_max)\n{\n    int min = val1;\n    int max = val1;\n\n    if(val2 < min){\n        min = val2;\n    }"
                },
                {
                    "distance": 0.3192096260933629,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "moyenne_tableau_entier",
                    "function_code": "double moyenne_tableau_entier(int tableau[], int taille)\n{\n    double moyenne = 0;\n    for(int i=0; i<taille; i++)\n    {\n        moyenne += tableau[i];\n    }"
                }
            ]
        },
        {
            "function_name": "dplc_bas",
            "function_code": "void dplc_bas(int coordo[], int pos_lig, int pos_col)\n{\n    coordo[0]=pos_col;\n    coordo[1]=pos_lig+1;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='dplc_bas',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='coordo',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='coordo',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='pos_lig',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_lig',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='pos_col',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_col',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='dplc_bas',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            ID(\n              name='pos_col',\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='pos_lig',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31693947315216064,
                    "project_name": "20233_02_17_PassageParReference",
                    "function_name": "min_max_de_3",
                    "function_code": "void min_max_de_3(int val1, int val2, int val3, int* adr_pour_min, int* adr_pour_max)\n{\n    int min = val1;\n    int max = val1;\n\n    if(val2 < min){\n        min = val2;\n    }"
                },
                {
                    "distance": 0.3174123466014862,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.3199988901615143,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.32077330350875854,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.3252876268042676,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                }
            ]
        },
        {
            "function_name": "dplc_gauche",
            "function_code": "void dplc_gauche(int coordo[], int pos_lig, int pos_col)\n{\n    coordo[0]=pos_col-1;\n    coordo[1]=pos_lig;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='dplc_gauche',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='coordo',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='coordo',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='pos_lig',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_lig',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='pos_col',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_col',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='dplc_gauche',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='-',\n              left=\n                ID(\n                  name='pos_col',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            ID(\n              name='pos_lig',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.3051190811497149,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                },
                {
                    "distance": 0.31336522102355957,
                    "project_name": "20233_02_17_PassageParReference",
                    "function_name": "min_max_de_3",
                    "function_code": "void min_max_de_3(int val1, int val2, int val3, int* adr_pour_min, int* adr_pour_max)\n{\n    int min = val1;\n    int max = val1;\n\n    if(val2 < min){\n        min = val2;\n    }"
                },
                {
                    "distance": 0.3182000517845154,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.31852471828460693,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.31895768642425537,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "dplc_droite",
            "function_code": "void dplc_droite(int coordo[], int pos_lig, int pos_col)\n{\n    coordo[0]=pos_col+1;\n    coordo[1]=pos_lig;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='dplc_droite',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='coordo',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='coordo',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='pos_lig',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_lig',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='pos_col',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_col',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='dplc_droite',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='pos_col',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='coordo',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            ID(\n              name='pos_lig',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2901951059995737,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                },
                {
                    "distance": 0.2928982377052307,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29350754618644714,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.2997795045375824,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3018205165863037,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char* nom_fichier, int grille[][100],\n                       int point_entree[2], int* hauteur_grille, int* largeur_grille)\n{\n    FILE* fichier;\n    char caractere_lu;\n    int i = 0,  \n    j = 0;\n    fichier = fopen(nom_fichier, \"r\");\n    if (!fichier)\n    {\n        return 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le meme nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2268654704093933,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2270743153032381,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "machine_charge_machines",
                    "function_code": "t_machine_ptr* machine_charge_machines(const char* nom_fichier, int* nb_machines)\n{\n    FILE* fichier;\n\n    t_machine_ptr* tab;\n\n    fichier = fopen(nom_fichier, \"r\");\n    if(fichier == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.24736659228801727,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.24862660467624664,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2684230415484328,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                }
            ]
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n\n    int choix_utilisateur = 0;  \n\n     \n    printf(\"********************\\n\");\n    printf(\"**   Labyrinthe   **\\n\");\n    printf(\"********************\\n\");\n\n     \n    if (grille_chargee == 0)\n    {\n         \n        printf(\"Veuillez choisir une des options suivantes:\\n\");\n        printf(\"1) Charger un labyrinthe\\n\");\n        printf(\"2) Resoudre un labyrinthe [INDISPONIBLE]\\n\");\n        printf(\"3) Resoudre un labyrinthe pas-a-pas [INDISPONIBLE]\\n\");\n        printf(\"4) Quitter le programme\\n\");\n        printf(\"Votre choix: \");\n        scanf(\"%d\", &choix_utilisateur);\n\n         \n        while ((choix_utilisateur == 2) || (choix_utilisateur == 3))\n        {\n            printf(\"Ce choix est invalide, veuillez reesayer\\n\");\n            printf(\"Votre choix: \");\n            scanf(\"%d\", &choix_utilisateur);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix_utilisateur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix_utilisateur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"********************\\\\n\"',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"**   Labyrinthe   **\\\\n\"',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"********************\\\\n\"',\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='grille_chargee',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Veuillez choisir une des options suivantes:\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"1) Charger un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2) Resoudre un labyrinthe [INDISPONIBLE]\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3) Resoudre un labyrinthe pas-a-pas [INDISPONIBLE]\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"4) Quitter le programme\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Votre choix: \"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix_utilisateur',\n                            )\n                        )\n                    )\n                )\n              block_items[7]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='choix_utilisateur',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='choix_utilisateur',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='3',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Ce choix est invalide, veuillez reesayer\\\\n\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Votre choix: \"',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix_utilisateur',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[8]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_utilisateur',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[9]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_utilisateur',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='grille_chargee',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Veuillez choisir une des options suivantes:\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"1) Charger un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2) Resoudre un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3) Resoudre un labyrinthe pas-a-pas\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"4) Quitter le programme\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Votre choix: \"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix_utilisateur',\n                            )\n                        )\n                    )\n                )\n              block_items[7]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_utilisateur',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[8]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_utilisateur',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              block_items[9]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_utilisateur',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='3',\n                            )\n                        )\n                    )\n                )\n              block_items[10]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_utilisateur',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2638034522533417,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.2666095495223999,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2667886842097063,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.2748517096042633,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.27623894810676575,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char* buf_nom_fichier, int buf_taille)\n{\n     \n    fflush(stdin);\n    printf(\"Veuillez saisir le nom du fichier: \");\n    fgets(buf_nom_fichier,buf_taille, stdin);\n    buf_nom_fichier[strlen(buf_nom_fichier)-1] = '\\0';\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='fflush',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Veuillez saisir le nom du fichier: \"',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_taille',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='buf_nom_fichier',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2755825494846242,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.28481611609458923,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.28689804673194885,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.28768259286880493,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29056456685066223,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                }
            ]
        }
    ]
}