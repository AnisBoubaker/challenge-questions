{
    "project_name": "TP1-Gr02-EquipeF_219669_assignsubmission_file",
    "functions": [
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille(\n        int grille[][100],\n        int hauteur_grille,\n        int largeur_grille,\n        int pile_solution[][2])\n        {\n            printf(\"\\n\");\n            char mur = 219;  \n\n             \n            for(int i=0; i<hauteur_grille; i++)\n            {\n                for (int j = 0; j < largeur_grille; j++)\n                {\n                        if(grille[i][j] == 2)\n                        {\n                            printf(\"E\");\n                        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\"',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='mur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='mur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='219',\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='j',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='j',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='j',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='j',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='2',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"E\"',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_contient',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='i',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"X\"',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='i',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='j',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"%c\"',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='mur',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  iffalse=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\" \"',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.19243305921554565,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2112450748682022,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.23371587693691254,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                },
                {
                    "distance": 0.2355804065490352,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.2417214810848236,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_calculer_deplacements_possibles",
            "function_code": "void lab_calculer_deplacements_possibles(\n        int grille[][100],\n        int hauteur_grille,\n        int largeur_grille,\n        int pos_ligne,\n        int pos_colonne,\n        int solution_partielle[][2],\n        int *nb_deplacements,\n        int deplacements[4][2])\n        {\n            *nb_deplacements = 0;  \n\n             \n             \n            if((grille[pos_ligne][pos_colonne+1] == 0) && (pile_contient(solution_partielle, pos_ligne, pos_colonne+1) == 0) && (pos_colonne+1 <= largeur_grille))\n            {\n                deplacements[*nb_deplacements][0] = pos_colonne+1;\n                deplacements[*nb_deplacements][1] = pos_ligne;\n                (*nb_deplacements)++;  \n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                            )\n                          subscript=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              exprs[2]=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ID(\n                                      name='pos_colonne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='<=',\n                  left=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_ligne',\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                            )\n                          subscript=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              exprs[2]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='pos_colonne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>=',\n                  left=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='pos_colonne',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_ligne',\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='pos_colonne',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>=',\n                  left=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_colonne',\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='pos_ligne',\n                        )\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='pos_colonne',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='<=',\n                  left=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_colonne',\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='pos_ligne',\n                        )\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='*',\n                  expr=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.18312706053256989,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.20273752172601564,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.21161604649540128,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.21446485817432404,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.21921725571155548,
                    "project_name": "20223_01_27_ExerciceEnregistrements",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client un_client; \n\n\tstrcpy(un_client.num_ass_sociale , \"345 673 123\");\n\tstrcpy(un_client.nom, \"Valjean\");\n\tstrcpy(un_client.prenom, \"Jean\");\n\t \n\tun_client.date_naiss.jour = 10;\n\tun_client.date_naiss.mois = 5; \n\tun_client.date_naiss.annee = 1562;\n\n\tun_client.nb_comptes = 0;\n\n\tstrcpy(un_client.comptes[0].identifiant,  \"AB5676\");\n\tun_client.comptes[0].solde = 2000;\n\tun_client.comptes[0].limite_decouvert = 1500;\n\tun_client.comptes[0].taux_interets = 1.5;\n\n\tun_client.nb_comptes++;\n\n\tstrcpy(un_client.comptes[1].identifiant, \"DF6789\");\n\tun_client.comptes[1].solde = 150;\n\tun_client.comptes[1].limite_decouvert = 0;\n\tun_client.comptes[1].taux_interets = 0.4;\n\n\tun_client.nb_comptes++; \n\n\tclient_afficher(&un_client);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(int deplacements_possibles[][2],int nb_deplacements_possibles)\n{\n    int indice_deplacements_possible;     \n\n     \n    srand((unsigned)time(0));\n\n     \n    indice_deplacements_possible = rand()  % nb_deplacements_possibles;\n\n    return indice_deplacements_possible;     \n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='indice_deplacements_possible',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='indice_deplacements_possible',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='srand',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['unsigned'],\n                            )\n                        )\n                    )\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='time',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='indice_deplacements_possible',\n            )\n          rvalue=\n            BinaryOp(\n              op='%',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='rand',\n                    )\n                )\n              right=\n                ID(\n                  name='nb_deplacements_possibles',\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            ID(\n              name='indice_deplacements_possible',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.27364207640055493,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.280419603928812,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.28079915046691895,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.28112903091209657,
                    "project_name": "20233_02_02_ConversionTypes",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double distance;  \n    float trajet_parcouru;  \n    int valeur_entiere;\n    double salaire;\n\n\n    distance = 1345.50;\n\n    trajet_parcouru = (float)distance;\n\n    valeur_entiere = (int)distance;\n\n    printf(\"Contenu de valeur_entirere: %i\\n\", valeur_entiere);\n\n     \n     \n    printf(\"Conetnu de salaire: %f\\n\", salaire);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2813257520719137,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n     \n    if((case1[0] - case2[0] == 1   || case1[0] - case2[0] == -1) && (case1[1] == case2[1]))\n    {\n        return 1;      \n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case2',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case2',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        UnaryOp(\n                          op='-',\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case2',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            UnaryOp(\n                              op='-',\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    Return(\n                      expr=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              iffalse=\n                Compound(\n                  block_items[0]=\n                    Return(\n                      expr=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2977181077003479,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.31876679920906575,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3228517174720764,
                    "project_name": "20233_02_23_Tri_Tab1D",
                    "function_name": "main",
                    "function_code": "int main() {\n    int mon_tableau[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau2[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau3[] = {45, 10, 2, 28, 55, 46, 78, 32};\n\n    tri_insertion(mon_tableau, 8);\n    afficher_tab(mon_tableau, 8);\n\n    tri_selection(mon_tableau2, 8);\n    afficher_tab(mon_tableau2, 8);\n\n    tri_bulles(mon_tableau3, 8);\n    afficher_tab(mon_tableau3, 8);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.32779669761657715,
                    "project_name": "20233_02_19_InitialisationTableau",
                    "function_name": "main",
                    "function_code": "int main() {\n\n     \n     \n    int mon_tab[100] = { 10, 20 , 30 , 40 , 50};\n\n     \n    int tab2[] = {1, 2, 3, 4, 5};\n\n    for(int i=0; i< 100; i++)\n    {\n        printf(\"%i\\n\", mon_tab[i]);\n    }"
                },
                {
                    "distance": 0.3280402719974518,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(int position[2],int grille[][100],int hauteur_grille,int largeur_grille)\n{\n     \n    if(grille[position[1]][position[0]] == 0)\n    {\n        if(position[0] == 0 || position[0] == largeur_grille)  \n        {\n            return 1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='grille',\n                        )\n                      subscript=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  subscript=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2734946608543396,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.2798147201538086,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2850164912405863,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2858354811365446,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.2918049991130829,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(\n        int grille[][100],\n        int hauteur_grille,\n        int largeur_grille,\n        int entree[2],\n        int pile_solution[][2],\n        int debug)\n{\n     \n    int pile_chemins_alternatifs[100][2];\n    int deplacements_possibles[4][2];\n    int nb_deplacements_possibles=0;\n    int nouvelle_position[2];  \n\n     \n    pile_initialiser(pile_solution, 100 );\n    pile_initialiser(pile_chemins_alternatifs, 100 );\n\n     \n    pile_empiler(pile_solution, entree[0], entree[1]);\n\n     \n    do\n    {\n        pile_haut_pile(pile_solution, &nouvelle_position[0], &nouvelle_position[1]);\n        int valeurs_haut_pile[2]; \n        valeurs_haut_pile[0] = nouvelle_position[0];\n        valeurs_haut_pile[1] = nouvelle_position[1];\n\n\n        lab_calculer_deplacements_possibles(grille,hauteur_grille,largeur_grille,\n        nouvelle_position[0],nouvelle_position[1], pile_solution, &nb_deplacements_possibles,\n        deplacements_possibles);  \n\n        if(nb_deplacements_possibles>0)  \n        {\n             \n            int choix_deplacement = lab_choisir_deplacement(deplacements_possibles,nb_deplacements_possibles);  \n            pile_empiler(pile_solution,deplacements_possibles[choix_deplacement][0], deplacements_possibles[choix_deplacement][1]); \n\n             \n            for(int i = 0 ; i < nb_deplacements_possibles; i++){\n                if(i != choix_deplacement)  \n                {\n                    pile_empiler(pile_chemins_alternatifs, deplacements_possibles[i][0], deplacements_possibles[i][1]);\n                }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_chemins_alternatifs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemins_alternatifs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nouvelle_position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemins_alternatifs',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='pile_est_vide',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='pile_solution',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='nouvelle_position',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_haut_pile',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='nouvelle_position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='nouvelle_position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                Decl(\n                  name='valeurs_haut_pile',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='valeurs_haut_pile',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='valeurs_haut_pile',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='nouvelle_position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              block_items[3]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='valeurs_haut_pile',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='nouvelle_position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='nouvelle_position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      exprs[4]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='nouvelle_position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[6]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='nb_deplacements_possibles',\n                            )\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                    )\n                )\n              block_items[5]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Decl(\n                          name='choix_deplacement',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='choix_deplacement',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_choisir_deplacement',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='nb_deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='choix_deplacement',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              exprs[2]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='choix_deplacement',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        For(\n                          init=\n                            DeclList(\n                              decls[0]=\n                                Decl(\n                                  name='i',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    TypeDecl(\n                                      declname='i',\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                  init=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='i',\n                                )\n                              right=\n                                ID(\n                                  name='nb_deplacements_possibles',\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ID(\n                                          name='i',\n                                        )\n                                      right=\n                                        ID(\n                                          name='choix_deplacement',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='pile_empiler',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='pile_chemins_alternatifs',\n                                                )\n                                              exprs[1]=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        ID(\n                                                          name='i',\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              exprs[2]=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        ID(\n                                                          name='i',\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_est_vide',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_depiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            While(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='pile_est_vide',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='pile_solution',\n                                                )\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='lab_est_cases_adjacentes',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='valeurs_haut_pile',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='nouvelle_position',\n                                                )\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                              stmt=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_haut_pile',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='valeurs_haut_pile',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='valeurs_haut_pile',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_depiler',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='valeurs_haut_pile',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='valeurs_haut_pile',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[2]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='nouvelle_position',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      iffalse=\n                        Compound(\n                          block_items[0]=\n                            Return(\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[6]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='debug',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_afficher_grille',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\nPour continuer, cliquez sur la touche [ENTER]\"',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='system',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"pause\"',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_est_vide',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.22000175714492798,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.22702407836914062,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.2432887548365135,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.24542730922546577,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.24925000965595245,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                }
            ]
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n     \n     \n\n\n    int grille[100][100];  \n\n    int hauteur_grille, largeur_grille;  \n\n        int *pile_solution[1000][2]= {};\n        int grille_chargee = 0;  \n        int choix;  \n         \n        char buf_nom_fichier[100];\n        int *entree[2];  \n\n        do{\n\n            choix = selection_menu(grille_chargee);  \n\n            if (choix ==1)  \n            {\n                menu_charger_labyrinthe(buf_nom_fichier, sizeof(buf_nom_fichier));\n\n                grille_chargee = charger_labyrinthe(buf_nom_fichier, grille, entree, &hauteur_grille, &largeur_grille);\n                lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='pile_solution',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n          init=\n            InitList(\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='grille_chargee',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='grille_chargee',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='buf_nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='buf_nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                PtrDecl(\n                  quals=[],\n                  type=\n                    TypeDecl(\n                      declname='entree',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[8]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='choix',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='selection_menu',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='grille_chargee',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='menu_charger_labyrinthe',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='buf_nom_fichier',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='sizeof',\n                                  expr=\n                                    ID(\n                                      name='buf_nom_fichier',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='grille_chargee',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='charger_labyrinthe',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='buf_nom_fichier',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='entree',\n                                    )\n                                  exprs[3]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='hauteur_grille',\n                                        )\n                                    )\n                                  exprs[4]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='largeur_grille',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_afficher_grille',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_resoudre_profondeur',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='entree',\n                                )\n                              exprs[4]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                )\n                              exprs[5]=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[3]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_resoudre_profondeur',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='entree',\n                                )\n                              exprs[4]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                )\n                              exprs[5]=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[4]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"FIN\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.08636094629764557,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.09506390243768692,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.12266223132610321,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.12322451174259186,
                    "project_name": "20233_02_16_Pointeurs",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.13030344247817993,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                }
            ]
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min,int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.0003752526916615202,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.0004470757658709366,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.2694087326526642,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "nb_combinaisons",
                    "function_code": "int nb_combinaisons(int n, int k)\n{\n\tint resultat; \n\n\tresultat = factorielle(n) / (factorielle(k) * factorielle(n - k));\n\n\treturn resultat;\n}"
                },
                {
                    "distance": 0.2723852203095506,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.27271297574043274,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_tirees; \n\tint nb_total; \n\tint combinaisons; \n\n\tbienvenue();\n\n\tprintf(\"Combien de boules tirees: \");\n\tscanf(\"%d\", &nb_tirees);\n\n\tprintf(\"Combien de boules au total: \");\n\tscanf(\"%d\", &nb_total);\n\n\tcombinaisons = nb_combinaisons(nb_total, nb_tirees);\n\n\t \n\n\tprintf(\"Nombre de combinaisons : %d\\n\", combinaisons);\n\n\t \n\n\n\t \n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int choix;\n    char buf_nom_fichier[100];\n\n    printf(\"\\t***********************\\n\");\n    printf(\"\\t***LABYRINTHE EXPERT***\\n\");\n    printf(\"\\t***********************\\n\");\n\n    if (grille_chargee == 0)\n    {\n        printf(\"\\t1. Charger un labyrinthe\\n\");\n        printf(\"\\t2. [INDISPONIBLE] Resoudre le labyrinthe\\n\");\n        printf(\"\\t3. [INDISPONIBLE] Resoudre le labyrinthe pas-a-pas\\n\");\n        printf(\"\\t4. Quitter le programme\\n\");\n\n        printf(\"\\t\\n> \");\n        scanf(\"%d\", &choix);\n\n        while (choix != 1 && choix != 4)\n        {\n            printf(\"\\t\\nChoix invalide!\\n\");\n            printf(\"\\t\\n> \");\n            scanf(\"%d\", &choix);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='buf_nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='buf_nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\t***********************\\\\n\"',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\t***LABYRINTHE EXPERT***\\\\n\"',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\t***********************\\\\n\"',\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='grille_chargee',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t1. Charger un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t2. [INDISPONIBLE] Resoudre le labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t3. [INDISPONIBLE] Resoudre le labyrinthe pas-a-pas\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t4. Quitter le programme\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\n> \"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[6]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\t\\\\nChoix invalide!\\\\n\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\t\\\\n> \"',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='grille_chargee',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t1. Charger un labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t2. Resoudre le labyrinthe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t3. Resoudre le labyrinthe pas-a-pas\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t4. Quitter le programme\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\t\\\\n> \"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[6]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\t\\\\nChoix invalide!\\\\n\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\t\\\\n> \"',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2562146782875061,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.25841546058654785,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.26410239934921265,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.271852046251297,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.27391790141348277,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                }
            ]
        },
        {
            "function_name": "caller",
            "function_code": "int caller()\n{\n    union Data data;\n\n    data.i = 10;\n    printf(\"Integer: %d\\n\", data.i);\n\n    data.f = 220.5;\n    printf(\"Float: %.2f\\n\", data.f);\n\n    snprintf(data.str, sizeof(data.str), \"C Programming\");\n    printf(\"String: %s\\n\", data.str);\n\n    printf(\"After assigning string, Integer: %d\\n\", data.i);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='caller',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='caller',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='data',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='data',\n              quals=[],\n              align=None,\n              type=\n                Union(\n                  name='Data',\n                )\n            )\n        )\n      block_items[1]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ID(\n                  name='data',\n                )\n              field=\n                ID(\n                  name='i',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='10',\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Integer: %d\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='data',\n                    )\n                  field=\n                    ID(\n                      name='i',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='.',\n              name=\n                ID(\n                  name='data',\n                )\n              field=\n                ID(\n                  name='f',\n                )\n            )\n          rvalue=\n            Constant(\n              type='double',\n              value='220.5',\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Float: %.2f\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='data',\n                    )\n                  field=\n                    ID(\n                      name='f',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='snprintf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='data',\n                    )\n                  field=\n                    ID(\n                      name='str',\n                    )\n                )\n              exprs[1]=\n                UnaryOp(\n                  op='sizeof',\n                  expr=\n                    StructRef(\n                      type='.',\n                      name=\n                        ID(\n                          name='data',\n                        )\n                      field=\n                        ID(\n                          name='str',\n                        )\n                    )\n                )\n              exprs[2]=\n                Constant(\n                  type='string',\n                  value='\"C Programming\"',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"String: %s\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='data',\n                    )\n                  field=\n                    ID(\n                      name='str',\n                    )\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"After assigning string, Integer: %d\\\\n\"',\n                )\n              exprs[1]=\n                StructRef(\n                  type='.',\n                  name=\n                    ID(\n                      name='data',\n                    )\n                  field=\n                    ID(\n                      name='i',\n                    )\n                )\n            )\n        )\n      block_items[8]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.15109194815158844,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.16004221141338348,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.1647886484861374,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                },
                {
                    "distance": 0.16622892022132874,
                    "project_name": "20233_02_15_Exercice_Minimum",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}"
                },
                {
                    "distance": 0.18004073297991263,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char *buf_nom_fichier, int buf_taille)\n{\n\n    char nom_fichier[buf_taille];\n\n    char directory[4] = \"..\\\\\";\n    directory[strlen(directory)] = '\\0';\n\n    printf(\"Nom du fichier: \");\n    do{} while (getchar()!='\\n');\n\n    fgets(nom_fichier, 100, stdin);\n    nom_fichier[strlen(nom_fichier) - 1] = '\\0';\n\n    if (strlen(nom_fichier) <= buf_taille)\n    {\n        sprintf(buf_nom_fichier, \"%s%s\", directory, nom_fichier);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                ID(\n                  name='buf_taille',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='directory',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='directory',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          init=\n            Constant(\n              type='string',\n              value='\"..\\\\\\\\\"',\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='directory',\n                )\n              subscript=\n                FuncCall(\n                  name=\n                    ID(\n                      name='strlen',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='directory',\n                        )\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nom du fichier: \"',\n                )\n            )\n        )\n      block_items[4]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='getchar',\n                    )\n                )\n              right=\n                Constant(\n                  type='char',\n                  value=\"'\\\\n'\",\n                )\n            )\n          stmt=\n            Compound(\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='nom_fichier',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='nom_fichier',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='nom_fichier',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n      block_items[7]=\n        If(\n          cond=\n            BinaryOp(\n              op='<=',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='strlen',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='nom_fichier',\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='buf_taille',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='sprintf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='buf_nom_fichier',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='string',\n                          value='\"%s%s\"',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='directory',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='nom_fichier',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2786336295337016,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.28124269600452334,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_etudiant classe[40];\n\tint nb_etudiants;\n\t\n\tprintf(\"Combien d'etudiants? \");\n\tscanf(\"%d\", &nb_etudiants);\n\tdo{} while (getchar()!='\\n');\n\n\tfor (int i = 0; i < nb_etudiants; i++)\n\t{\n\t\tetudiant_saisir(&classe[i]);\n\t}"
                },
                {
                    "distance": 0.28146666933523035,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.28448745608329773,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2868508994579315,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char *nom_fichier, int grille[][100], int point_entree[2], int *hauteur_grille,\n                       int *largeur_grille)\n{\n    FILE *fichier;\n    char caractere_lu;\n    int i = 0,\n        j = 0;\n    fichier = fopen(nom_fichier, \"r\");\n    if (!fichier)\n    {\n        return 0;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='2',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le m\ufffdme nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.23311034496691957,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "machine_charge_machines",
                    "function_code": "t_machine_ptr* machine_charge_machines(const char* nom_fichier, int* nb_machines)\n{\n    FILE* fichier;\n\n    t_machine_ptr* tab;\n\n    fichier = fopen(nom_fichier, \"r\");\n    if(fichier == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.23663330078125,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.25589948892593384,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.25750961899757385,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2768350255719243,
                    "project_name": "20233_02_34_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_date date1, date2;\n    t_machine* machine1;\n    int nb_machines;\n     \n    t_machine** machines;\n\n    printf(\"Combien de machines? \");\n    scanf(\"%i\", &nb_machines);\n\n    machines = (t_machine**)malloc(sizeof(t_machine*) * nb_machines);\n    if(machines == 0)\n    {\n        printf(\"Erreur d'allocation!\\n\");\n        exit(1);\n    }"
                }
            ]
        },
        {
            "function_name": "tester_fonction_lab_choisir_deplacement",
            "function_code": "void tester_fonction_lab_choisir_deplacement()\n{\n    int deplacements_possibles[][2]={{1,2},{3,2},{4,1},};\n    int nb_deplacements_possibles = 3;\n\n    printf(\"L'indice choisi al\u00e9atoirement : %d \\n\", lab_choisir_deplacement(deplacements_possibles,nb_deplacements_possibles));\n\n    int deplacements_possibles_2[][2]={{4,2},{1,7}};\n    int nb_deplacements_possibles_2 = 2;\n\n    printf(\"L'indice choisi al\u00e9atoirement : %d \\n\", lab_choisir_deplacement(deplacements_possibles_2,nb_deplacements_possibles_2));\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='tester_fonction_lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='tester_fonction_lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='3',\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"L\\'indice choisi al\u00e9atoirement : %d \\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='deplacements_possibles_2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles_2',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='7',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='nb_deplacements_possibles_2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles_2',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='2',\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"L\\'indice choisi al\u00e9atoirement : %d \\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_choisir_deplacement',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='deplacements_possibles_2',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='nb_deplacements_possibles_2',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.26635080986093923,
                    "project_name": "20233_02_26_String_functions",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine[100];\n    char chaine2[100];\n    char resultat[100];\n    int tab1[10] = {4, 5, 6, 8};\n    int tab2[10];\n\n\n    \n    \n    \n    \n    \n    \n    \n    strncpy(chaine, \"Bonjour \", 100);\n    printf(\"%s\\n\", chaine);\n\n    strncpy(chaine2, \"a tous\", 100);\n    strncat(chaine, \"a tous\", 100);\n\n    int nb_etudiants = 30;\n\n    sprintf(resultat,\"%s les %i etudant-es\\n\", chaine, nb_etudiants);\n\n    printf(\"Le resultat est: %s\", resultat);\n\n     \n     \n\n     \n     \n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2697899341583252,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.27819343395702445,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2869841754436493,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2887753621262068,
                    "project_name": "20233_02_02_ConversionTypes",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double distance;  \n    float trajet_parcouru;  \n    int valeur_entiere;\n    double salaire;\n\n\n    distance = 1345.50;\n\n    trajet_parcouru = (float)distance;\n\n    valeur_entiere = (int)distance;\n\n    printf(\"Contenu de valeur_entirere: %i\\n\", valeur_entiere);\n\n     \n     \n    printf(\"Conetnu de salaire: %f\\n\", salaire);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "tester_fonction_lab_est_adjacentes",
            "function_code": "void tester_fonction_lab_est_adjacentes()\n{\n    int case1[] ={5,3};\n    int case2[] ={5,2};\n    int case3[] ={2,5};\n    int case4[] ={3,5};\n\n     \n\n\n    if(lab_est_cases_adjacentes(case1,case2)==1)\n    {\n        printf(\"La case 5,3 et la case 5,2 sont adjacentes \");\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='tester_fonction_lab_est_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='tester_fonction_lab_est_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='case1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='case2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='case3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case3',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='case4',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case4',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='case1',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='case2',\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"La case 5,3 et la case 5,2 sont adjacentes \"',\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Error\"',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_cases_adjacentes',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='case3',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='case4',\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"La case 2,5 et la case 3,5 sont adjacentes \"',\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Error\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.24661442637443542,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2703885016212771,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2757804951851845,
                    "project_name": "20233_02_26_String_functions",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine[100];\n    char chaine2[100];\n    char resultat[100];\n    int tab1[10] = {4, 5, 6, 8};\n    int tab2[10];\n\n\n    \n    \n    \n    \n    \n    \n    \n    strncpy(chaine, \"Bonjour \", 100);\n    printf(\"%s\\n\", chaine);\n\n    strncpy(chaine2, \"a tous\", 100);\n    strncat(chaine, \"a tous\", 100);\n\n    int nb_etudiants = 30;\n\n    sprintf(resultat,\"%s les %i etudant-es\\n\", chaine, nb_etudiants);\n\n    printf(\"Le resultat est: %s\", resultat);\n\n     \n     \n\n     \n     \n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.27848368883132935,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2868635583004726,
                    "project_name": "20233_02_27_AlloDynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int* entier_dynamique;\n\n    entier_dynamique = (int*)malloc( sizeof(int) );\n    if(entier_dynamique == 0){ \n        printf(\"Plus de memoire...\\n\");\n         \n        exit(1);\n    }"
                }
            ]
        },
        {
            "function_name": "tester_fonction_lab_est_une_sortie",
            "function_code": "void tester_fonction_lab_est_une_sortie()\n{\n    int grille[100][100] = {\n\n            {1,1,1},\n            {1,0,1},\n            {1,0,1}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='tester_fonction_lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='tester_fonction_lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_est_une_sortie',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='position',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[2]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                      exprs[3]=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"La case est une sortie\"',\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Error\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.28340044617652893,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.28593847155570984,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29357073284447904,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.2967875651797734,
                    "project_name": "20233_02_07_Structures_CondIfElse",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n    printf(\"Saisir une valeur entiere: \");\n    scanf(\"%i\", &saisie);\n\n    if( saisie % 2 == 0 )\n    {\n        printf(\"Le nombre est pair!\\n\");\n    }"
                },
                {
                    "distance": 0.29729053378105164,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                }
            ]
        }
    ]
}