{
    "project_name": "TP1-Gr02-EquipeG_219670_assignsubmission_file",
    "functions": [
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille(\n    int grille[][100], int hauteur_grille,\n    int largeur_grille,\n    int pile_solution[][2])\n{\n\n    for (int l = 0; l < hauteur_grille; l++)\n    {\n        for (int c = 0; c < largeur_grille; c++)\n        {\n\n            if (pile_contient(pile_solution, l, c) && pile_est_vide(pile_solution) == 0)\n            {\n                printf(\"X\");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='l',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='l',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='l',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='l',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='c',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='c',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='c',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='c',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_contient',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='l',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='c',\n                                        )\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_est_vide',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"X\"',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='l',\n                                            )\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='c',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"%c\"',\n                                            )\n                                          exprs[1]=\n                                            Constant(\n                                              type='int',\n                                              value='219',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='l',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='c',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\" \"',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.20403124392032623,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.22941358387470245,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2477377951145172,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                },
                {
                    "distance": 0.24923546612262726,
                    "project_name": "20233_02_36_Tab2D_Dyn",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int tab2d[3][4];\n    int** tab2d_dyn;\n    int nb_lignes = 3;\n    int nb_colonnes = 4;\n\n    tab2d_dyn = creer_tab2d_dyn(nb_lignes, nb_colonnes);\n\n    for(int i=0; i<nb_lignes; i++)\n    {\n        for(int j=0; j<nb_colonnes; j++)\n        {\n            tab2d_dyn[i][j] = i*j;\n        }"
                },
                {
                    "distance": 0.2544633448123932,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "client_afficher",
                    "function_code": "void client_afficher(const t_client* client)\n{\n\tprintf(\"FICHE DU CLIENT: \\n ---------------------\\n\");\n\tprintf(\"Num. Assurance sociale: %s\\n\", client->num_ass_sociale);\n\t \n\tprintf(\"Nom et prenom: %s, %s\\n\", client->nom, client->prenom);\n\tprintf(\"Date de naissance: %d/%d/%d\\n\",\n\t\tclient->date_naiss.jour,\n\t\tclient->date_naiss.mois,\n\t\tclient->date_naiss.annee);\n\tprintf(\"LISTE DES COMPTES:\\n\");\n\tfor (int i = 0; i < client->nb_comptes; i++)\n\t{\n\t\tprintf(\"\\tNum. Compte: %s\\n\", client->comptes[i]->identifiant);\n\t\tprintf(\"\\tSolde: %.2lf\\n\", client->comptes[i]->solde);\n\t\tprintf(\"\\tDecouvert autorise: %.2lf\\n\", client->comptes[i]->limite_decouvert);\n\t\tprintf(\"\\tTaux d'interets: %.2lf\\n\", client->comptes[i]->taux_interets);\n\t\tprintf(\"\\t--------------------------------\\n\");\n\t}"
                }
            ]
        },
        {
            "function_name": "multiply",
            "function_code": "int multiply(int a, int b)\n{\n    return a * b;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='multiply',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='a',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='a',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='b',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='b',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='multiply',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='*',\n              left=\n                ID(\n                  name='a',\n                )\n              right=\n                ID(\n                  name='b',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.3249989876620539,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "somme_produit",
                    "function_code": "void somme_produit(int n, int* adr_somme, double* adr_produit)\n{\n    *adr_somme = 0;\n    *adr_produit = 1;\n    for(int i = 1; i<= n; i++)\n    {\n        *adr_somme += i;\n        *adr_produit *= i;\n    }"
                },
                {
                    "distance": 0.3358920376766358,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "fonction_bidon",
                    "function_code": "void fonction_bidon(int a)\n{\n    a = a * 20;\n}"
                },
                {
                    "distance": 0.33641457025961174,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.34205296635627747,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3435474932193756,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "compute",
            "function_code": "int compute(int (*operation)(int, int), int x, int y)\n{\n    return operation(x, y);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='compute',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='operation',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        FuncDecl(\n                          args=\n                            ParamList(\n                              params[0]=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                )\n                              params[1]=\n                                Typename(\n                                  name=None,\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    TypeDecl(\n                                      declname=None,\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                )\n                            )\n                          type=\n                            TypeDecl(\n                              declname='operation',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='x',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='x',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='y',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='y',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='compute',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='operation',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='x',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='y',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31396886706352234,
                    "project_name": "20233_02_15_Exercice_Minimum",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}"
                },
                {
                    "distance": 0.32406579209966435,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3244837522506714,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.32541605830192566,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                },
                {
                    "distance": 0.32622477412223816,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                }
            ]
        },
        {
            "function_name": "caller",
            "function_code": "int caller()\n{\n    int result = compute(multiply, 3, 4);\n    printf(\"Multiplication result: %d\\n\", result);\n\n    return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='caller',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='caller',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='result',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='result',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='compute',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='multiply',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Multiplication result: %d\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='result',\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.19152134656906128,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.1984005868434906,
                    "project_name": "20233_02_15_Exercice_Minimum",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2074325680732727,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                },
                {
                    "distance": 0.21005022525787354,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.21385778486728668,
                    "project_name": "20233_02_09_Boucles",
                    "function_name": "main",
                    "function_code": "int main() {\n    int x = 10;\n\n    while( x > 0)\n    {\n        printf(\"Je suis fatigant! \\n\");\n        x = x - 2 ;\n    }"
                }
            ]
        },
        {
            "function_name": "lab_calculer_deplacements_possibles",
            "function_code": "void lab_calculer_deplacements_possibles(int grille[][100],\n                                         int hauteur_grille,\n                                         int largeur_grille,\n                                         int pos_ligne,\n                                         int pos_colonne,\n                                         int solution_partielle[][2],\n                                         int *nb_deplacements,\n                                         int deplacements[4][2])\n{\n    *nb_deplacements = 0;\n\n    if (grille[pos_ligne - 1][pos_colonne] != 1 && 0 == pile_contient(solution_partielle, pos_ligne - 1, pos_colonne) && pos_ligne - 1 >= 0)\n    {\n        deplacements[*nb_deplacements][0] = pos_ligne - 1;\n        deplacements[*nb_deplacements][1] = pos_colonne;\n        (*nb_deplacements)++;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='pos_colonne',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                      right=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>=',\n                  left=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_colonne',\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ID(\n                              name='pos_colonne',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                      right=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ID(\n                                      name='pos_ligne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='<',\n                  left=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_ligne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_colonne',\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                            )\n                          subscript=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                      right=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              exprs[2]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='pos_colonne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='>=',\n                  left=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_ligne',\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='!=',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                            )\n                          subscript=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                ID(\n                                  name='pos_colonne',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                      right=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_contient',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='solution_partielle',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='pos_ligne',\n                                )\n                              exprs[2]=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ID(\n                                      name='pos_colonne',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='<',\n                  left=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ID(\n                      name='pos_ligne',\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='deplacements',\n                            )\n                          subscript=\n                            UnaryOp(\n                              op='*',\n                              expr=\n                                ID(\n                                  name='nb_deplacements',\n                                )\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ID(\n                          name='pos_colonne',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[2]=\n                UnaryOp(\n                  op='p++',\n                  expr=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.1851605325937271,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2005367946248908,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.21298693211089983,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.21580688655376434,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.21984130144119263,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                }
            ]
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(int deplacements_possibles[][2], int nb_deplacements_possibles)\n{\n    return nb_aleatoire(0, nb_deplacements_possibles - 1);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='nb_aleatoire',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.29325818145591276,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.2940740657071382,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.33006280711879515,
                    "project_name": "20233_02_02_ConversionTypes",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double distance;  \n    float trajet_parcouru;  \n    int valeur_entiere;\n    double salaire;\n\n\n    distance = 1345.50;\n\n    trajet_parcouru = (float)distance;\n\n    valeur_entiere = (int)distance;\n\n    printf(\"Contenu de valeur_entirere: %i\\n\", valeur_entiere);\n\n     \n     \n    printf(\"Conetnu de salaire: %f\\n\", salaire);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.33245931748010865,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3352905809879303,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n\n    if ((case1[0] == case2[0] - 1 || case1[0] == case2[0] + 1) && case1[1] == case2[1])\n    {\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case2',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case2',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case2',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    Return(\n                      expr=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.3007766008377075,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.31724962829587827,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.32895606756210327,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.3300543613342742,
                    "project_name": "20233_02_21_Exercice_MinMaj",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int nb_minuscules, nb_majuscules;\n    char caracteres[100] = {'B', 'o', 'n', 'j', 'o', 'u', 'r', ' ', 'E', 'T', 'S'};\n\n    majuscules_minuscules(caracteres, 11, &nb_majuscules, &nb_minuscules);\n\n    printf(\"Il y a %i majuscules et %i minuscules\\n\", nb_majuscules, nb_minuscules);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3310091477621948,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_machine_ptr** machines_classees;\n    t_machine_ptr* machines_lues;\n    int nb_machines;\n\n    machines_lues = machine_charge_machines(\"../sauvegarde_machines.txt\", &nb_machines);\n    if(machines_lues == 0)\n    {\n        printf(\"Erreur lors de la lecture du fichier.\");\n        exit(1);\n    }"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(\n    int position[2],\n    int grille[][100],\n    int hauteur_grille,\n    int largeur_grille)\n{\n\n    if ((position[0] >= 0 && position[0] <= hauteur_grille - 1) && (position[1] == 0 || position[1] == largeur_grille - 1) || ((position[1] >= 0 && position[1] <= largeur_grille - 1) && (position[0] == 0 || position[0] == hauteur_grille - 1)))\n    {\n        return 1;\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='<=',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31624650955200195,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.32320165634155273,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.32541856891715115,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.32965603470802307,
                    "project_name": "20233_02_04_expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n    int nombre_etudiants;\n    int etudiants_par_groupe;  \n    int resultat;  \n    int etudiants_orphelins;\n\n    int x;\n    int y;\n\n    nombre_etudiants = 10;\n    etudiants_par_groupe = 3;\n\n     \n     \n\n\n    resultat = nombre_etudiants / etudiants_par_groupe;\n\n    etudiants_orphelins = nombre_etudiants % etudiants_par_groupe;\n\n    printf(\"Le nombre de groupes est: %i\\n\", resultat);\n    printf(\"Et il reste %i etudiants malheureux.\\n\", etudiants_orphelins);\n\n    x = 11;\n    y = ++x / 3;\n\n    printf(\"LE contenu de x: %i\\n\", x);\n    printf(\"LE contenu de y: %i\\n\", y);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.33124215184140476,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                }
            ]
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(\n    int grille[][100], int hauteur_grille,\n    int largeur_grille,\n    int entree[2],\n    int pile_solution[][2], int debug)\n{\n    int pile_chemins_alternatifs[1000][2];\n    int deplacements_possibles[4][2];\n    int nb_deplacements_possibles;\n    int nouvelle_position[2];\n    int haut_pile_solution[2];\n    int ligne_actuelle_pile_solution;\n    int colonne_actuelle_pile_solution;\n    int indice;\n    int l;\n    int c;\n    int l_nouvelle_position;\n    int c_nouvelle_position;\n    int c_pile_solution;\n    int l_pile_solution;\n    int pas_de_sortie = 0;\n\n    srand((unsigned int)time(0));\n    rand();\n\n    pile_initialiser(pile_solution, 1000);\n    pile_initialiser(pile_chemins_alternatifs, 1000);\n\n    pile_empiler(pile_solution, entree[0], entree[1]);\n\n    do\n    {\n\n        pile_haut_pile(pile_solution, &ligne_actuelle_pile_solution, &colonne_actuelle_pile_solution);\n\n        lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille, ligne_actuelle_pile_solution,\n                                            colonne_actuelle_pile_solution, pile_solution,\n                                            &nb_deplacements_possibles, deplacements_possibles);\n\n        if (nb_deplacements_possibles > 0)\n        {\n\n            indice = lab_choisir_deplacement(deplacements_possibles, nb_deplacements_possibles);\n            l = deplacements_possibles[indice][0];\n            c = deplacements_possibles[indice][1];\n            pile_empiler(pile_solution, l, c);\n\n            if (nb_deplacements_possibles > 1)\n            {\n                for (int i = 0; i < nb_deplacements_possibles; i++)\n                {\n                    if (i != indice)\n                    {\n                        l = deplacements_possibles[i][0];\n                        c = deplacements_possibles[i][1];\n                        pile_empiler(pile_chemins_alternatifs, l, c);\n                    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_chemins_alternatifs',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemins_alternatifs',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nouvelle_position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='haut_pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='haut_pile_solution',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='ligne_actuelle_pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ligne_actuelle_pile_solution',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='colonne_actuelle_pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='colonne_actuelle_pile_solution',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='indice',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='indice',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='l',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='l',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[9]=\n        Decl(\n          name='c',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='c',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[10]=\n        Decl(\n          name='l_nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='l_nouvelle_position',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[11]=\n        Decl(\n          name='c_nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='c_nouvelle_position',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[12]=\n        Decl(\n          name='c_pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='c_pile_solution',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[13]=\n        Decl(\n          name='l_pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='l_pile_solution',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[14]=\n        Decl(\n          name='pas_de_sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='pas_de_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='srand',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['unsigned', 'int'],\n                            )\n                        )\n                    )\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='time',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='rand',\n            )\n        )\n      block_items[17]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[18]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemins_alternatifs',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[19]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[20]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                UnaryOp(\n                  op='!',\n                  expr=\n                    ID(\n                      name='pas_de_sortie',\n                    )\n                )\n              right=\n                UnaryOp(\n                  op='!',\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='haut_pile_solution',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='grille',\n                            )\n                          exprs[2]=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          exprs[3]=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_haut_pile',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='ligne_actuelle_pile_solution',\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='colonne_actuelle_pile_solution',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='ligne_actuelle_pile_solution',\n                        )\n                      exprs[4]=\n                        ID(\n                          name='colonne_actuelle_pile_solution',\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[6]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='nb_deplacements_possibles',\n                            )\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='indice',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_choisir_deplacement',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='nb_deplacements_possibles',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='l',\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='indice',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='c',\n                            )\n                          rvalue=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='indice',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='l',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='c',\n                                )\n                            )\n                        )\n                      block_items[4]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='>',\n                              left=\n                                ID(\n                                  name='nb_deplacements_possibles',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                For(\n                                  init=\n                                    DeclList(\n                                      decls[0]=\n                                        Decl(\n                                          name='i',\n                                          quals=[],\n                                          align=[],\n                                          storage=[],\n                                          funcspec=[],\n                                          type=\n                                            TypeDecl(\n                                              declname='i',\n                                              quals=[],\n                                              align=None,\n                                              type=\n                                                IdentifierType(\n                                                  names=['int'],\n                                                )\n                                            )\n                                          init=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  cond=\n                                    BinaryOp(\n                                      op='<',\n                                      left=\n                                        ID(\n                                          name='i',\n                                        )\n                                      right=\n                                        ID(\n                                          name='nb_deplacements_possibles',\n                                        )\n                                    )\n                                  next=\n                                    UnaryOp(\n                                      op='p++',\n                                      expr=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  stmt=\n                                    Compound(\n                                      block_items[0]=\n                                        If(\n                                          cond=\n                                            BinaryOp(\n                                              op='!=',\n                                              left=\n                                                ID(\n                                                  name='i',\n                                                )\n                                              right=\n                                                ID(\n                                                  name='indice',\n                                                )\n                                            )\n                                          iftrue=\n                                            Compound(\n                                              block_items[0]=\n                                                Assignment(\n                                                  op='=',\n                                                  lvalue=\n                                                    ID(\n                                                      name='l',\n                                                    )\n                                                  rvalue=\n                                                    ArrayRef(\n                                                      name=\n                                                        ArrayRef(\n                                                          name=\n                                                            ID(\n                                                              name='deplacements_possibles',\n                                                            )\n                                                          subscript=\n                                                            ID(\n                                                              name='i',\n                                                            )\n                                                        )\n                                                      subscript=\n                                                        Constant(\n                                                          type='int',\n                                                          value='0',\n                                                        )\n                                                    )\n                                                )\n                                              block_items[1]=\n                                                Assignment(\n                                                  op='=',\n                                                  lvalue=\n                                                    ID(\n                                                      name='c',\n                                                    )\n                                                  rvalue=\n                                                    ArrayRef(\n                                                      name=\n                                                        ArrayRef(\n                                                          name=\n                                                            ID(\n                                                              name='deplacements_possibles',\n                                                            )\n                                                          subscript=\n                                                            ID(\n                                                              name='i',\n                                                            )\n                                                        )\n                                                      subscript=\n                                                        Constant(\n                                                          type='int',\n                                                          value='1',\n                                                        )\n                                                    )\n                                                )\n                                              block_items[2]=\n                                                FuncCall(\n                                                  name=\n                                                    ID(\n                                                      name='pile_empiler',\n                                                    )\n                                                  args=\n                                                    ExprList(\n                                                      exprs[0]=\n                                                        ID(\n                                                          name='pile_chemins_alternatifs',\n                                                        )\n                                                      exprs[1]=\n                                                        ID(\n                                                          name='l',\n                                                        )\n                                                      exprs[2]=\n                                                        ID(\n                                                          name='c',\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[5]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_haut_pile',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='l_pile_solution',\n                                    )\n                                )\n                              exprs[2]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='c_pile_solution',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[6]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='haut_pile_solution',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ID(\n                              name='l_pile_solution',\n                            )\n                        )\n                      block_items[7]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='haut_pile_solution',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ID(\n                              name='c_pile_solution',\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        UnaryOp(\n                          op='!',\n                          expr=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_est_vide',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_depiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemins_alternatifs',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='l_nouvelle_position',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='c_nouvelle_position',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='l_nouvelle_position',\n                                )\n                            )\n                          block_items[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='nouvelle_position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='c_nouvelle_position',\n                                )\n                            )\n                          block_items[3]=\n                            DoWhile(\n                              cond=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_est_cases_adjacentes',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='haut_pile_solution',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              stmt=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_depiler',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='l_pile_solution',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='c_pile_solution',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_haut_pile',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='l_pile_solution',\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ID(\n                                                  name='c_pile_solution',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  block_items[2]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='haut_pile_solution',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      rvalue=\n                                        ID(\n                                          name='l_pile_solution',\n                                        )\n                                    )\n                                  block_items[3]=\n                                    Assignment(\n                                      op='=',\n                                      lvalue=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='haut_pile_solution',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                      rvalue=\n                                        ID(\n                                          name='c_pile_solution',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[4]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='l_nouvelle_position',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='c_nouvelle_position',\n                                    )\n                                )\n                            )\n                          block_items[5]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_haut_pile',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='l_pile_solution',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='c_pile_solution',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[6]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='haut_pile_solution',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='l_pile_solution',\n                                )\n                            )\n                          block_items[7]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='haut_pile_solution',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='c_pile_solution',\n                                )\n                            )\n                        )\n                      iffalse=\n                        Compound(\n                          block_items[0]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='pas_de_sortie',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[3]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='debug',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_afficher_grille',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='system',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"pause\"',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[21]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_une_sortie',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='haut_pile_solution',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.1868457794189453,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.19522777199745178,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.20619208010608478,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.20683116536645527,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.2153143733739853,
                    "project_name": "20223_01_29_Encapsulation",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client* un_client = 0;\n\n\tun_client = client_init();\n\n\n\n\tstrcpy(un_client->num_ass_sociale, \"345 673 123\");\n\tstrcpy(un_client->nom, \"Valjean\");\n\tstrcpy(un_client->prenom, \"Jean\");\n\t \n\tun_client->date_naiss.jour = 10;\n\tun_client->date_naiss.mois = 5;\n\tun_client->date_naiss.annee = 1562;\n\n\tun_client->nb_comptes = 0;\n\n\tstrcpy(un_client->comptes[0].identifiant, \"AB5676\");\n\tun_client->comptes[0].solde = 2000;\n\tun_client->comptes[0].limite_decouvert = 1500;\n\tun_client->comptes[0].taux_interets = 1.5;\n\n\tun_client->nb_comptes++;\n\n\tstrcpy(un_client->comptes[1].identifiant, \"DF6789\");\n\tun_client->comptes[1].solde = 150;\n\tun_client->comptes[1].limite_decouvert = 0;\n\tun_client->comptes[1].taux_interets = 0.4;\n\n\tun_client->nb_comptes++;\n\n\tclient_afficher(un_client);\n\n\tfree(un_client);\n\n\n\tt_client* client2; \n\n\tclient2 = client_init();\n\n\tclient_afficher(client2);\n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "main",
            "function_code": "int main(void){\n\n    int grille[100][100];    \n    int nb_lignes;                                       \n    int nb_colonnes;                                     \n    int entree[2];                                       \n    int choix_menu;                                      \n    char buf_nom_fichier[100];        \n    int pile_solution[1000][2];               \n    int succes_chargement=0;                               \n    int solution_trouve;                                 \n\n     \n    do\n    {\n         \n        choix_menu = selection_menu(succes_chargement);\n\n         \n        if(choix_menu == 1)\n        {\n             \n            pile_initialiser(pile_solution, 1000);\n\n             \n            menu_charger_labyrinthe(buf_nom_fichier, 100);\n            succes_chargement = charger_labyrinthe(buf_nom_fichier, grille, entree, &nb_lignes, &nb_colonnes);\n\n             \n            if(succes_chargement)\n            {\n                printf(\"Grille chargee avec success: \\n\");\n                lab_afficher_grille(grille, nb_lignes, nb_colonnes, pile_solution);\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='nb_lignes',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_lignes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_colonnes',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_colonnes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='choix_menu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='buf_nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='buf_nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='1000',\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='succes_chargement',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='succes_chargement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='solution_trouve',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='solution_trouve',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[9]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='choix_menu',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix_menu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='selection_menu',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='succes_chargement',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix_menu',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_initialiser',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='1000',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='menu_charger_labyrinthe',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='buf_nom_fichier',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='succes_chargement',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='charger_labyrinthe',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='buf_nom_fichier',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='entree',\n                                    )\n                                  exprs[3]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                    )\n                                  exprs[4]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        If(\n                          cond=\n                            ID(\n                              name='succes_chargement',\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Grille chargee avec success: \\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_afficher_grille',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Une erreur c\\'est produite lors du chargement de la grille.\\\\n\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[4]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='demande_pour_continuer',\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='choix_menu',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='solution_trouve',\n                                )\n                              rvalue=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='lab_resoudre_profondeur',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      exprs[1]=\n                                        ID(\n                                          name='nb_lignes',\n                                        )\n                                      exprs[2]=\n                                        ID(\n                                          name='nb_colonnes',\n                                        )\n                                      exprs[3]=\n                                        ID(\n                                          name='entree',\n                                        )\n                                      exprs[4]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[5]=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            If(\n                              cond=\n                                ID(\n                                  name='solution_trouve',\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_afficher_grille',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='nb_lignes',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='nb_colonnes',\n                                            )\n                                          exprs[3]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                        )\n                                    )\n                                )\n                              iffalse=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Aucune solution trouvee :-(\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[2]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='demande_pour_continuer',\n                                )\n                            )\n                        )\n                      iffalse=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='choix_menu',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='3',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ID(\n                                      name='solution_trouve',\n                                    )\n                                  rvalue=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_resoudre_profondeur',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='nb_lignes',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='nb_colonnes',\n                                            )\n                                          exprs[3]=\n                                            ID(\n                                              name='entree',\n                                            )\n                                          exprs[4]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[5]=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                If(\n                                  cond=\n                                    UnaryOp(\n                                      op='!',\n                                      expr=\n                                        ID(\n                                          name='solution_trouve',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"Aucune solution trouvee :-(\\\\n\"',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='system',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"cls\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.10837280750274658,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.12239162623882294,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.13312886655330658,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.13783510029315948,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.13802319765090942,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min,int max)\n{\n    return min + (int)(rand()/(32767 +0.001)*(max-min+1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 6.86176266768565e-05,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.0001260186717332284,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.26649415493011475,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "nb_combinaisons",
                    "function_code": "int nb_combinaisons(int n, int k)\n{\n\tint resultat; \n\n\tresultat = factorielle(n) / (factorielle(k) * factorielle(n - k));\n\n\treturn resultat;\n}"
                },
                {
                    "distance": 0.2690830140790627,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.27047210931777954,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_tirees; \n\tint nb_total; \n\tint combinaisons; \n\n\tbienvenue();\n\n\tprintf(\"Combien de boules tirees: \");\n\tscanf(\"%d\", &nb_tirees);\n\n\tprintf(\"Combien de boules au total: \");\n\tscanf(\"%d\", &nb_total);\n\n\tcombinaisons = nb_combinaisons(nb_total, nb_tirees);\n\n\t \n\n\tprintf(\"Nombre de combinaisons : %d\\n\", combinaisons);\n\n\t \n\n\n\t \n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "demande_pour_continuer",
            "function_code": "void demande_pour_continuer(void)\n{\n    system(\"pause\");\n    system (\"cls\");\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='demande_pour_continuer',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='demande_pour_continuer',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"pause\"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='system',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"cls\"',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.25742587447166443,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.2723824269497052,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.28825852274894714,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2932164294801959,
                    "project_name": "20223_01_02_Boucles",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint compteur; \n\n\tcompteur = 0; \n\twhile (compteur < 20)\n\t{\n\t\tprintf(\"Je suis fatigant!\\n\");\n\t\tcompteur++;\n\t}"
                },
                {
                    "distance": 0.2966377001726536,
                    "project_name": "20223_01_23_Sprintf",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tchar prenom[100] = \"Marie\"; \n\tint age = 10;\n\tchar message[100]; \n\n\tprintf(\"%s a %d ans.\\n\", prenom, age);\n\n\tsprintf(message, \"%s a %d ans.\\n\", prenom, age);\n\n\tprintf(\"%s\", message);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char* nom_fichier, int grille[][100], int point_entree[2], int* hauteur_grille, int* largeur_grille)\n{\n\tFILE* fichier;\n\tchar caractere_lu;\n\tint i = 0,  \n\t\tj = 0;\n\tfichier = fopen(nom_fichier, \"r\");\n\tif (!fichier)\n\t{\n\t\treturn 0;\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le m\ufffdme nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.23104624772868876,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "machine_charge_machines",
                    "function_code": "t_machine_ptr* machine_charge_machines(const char* nom_fichier, int* nb_machines)\n{\n    FILE* fichier;\n\n    t_machine_ptr* tab;\n\n    fichier = fopen(nom_fichier, \"r\");\n    if(fichier == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.23236757516860962,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.25210630893707275,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.2535081207752228,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2724877533136931,
                    "project_name": "20233_02_34_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_date date1, date2;\n    t_machine* machine1;\n    int nb_machines;\n     \n    t_machine** machines;\n\n    printf(\"Combien de machines? \");\n    scanf(\"%i\", &nb_machines);\n\n    machines = (t_machine**)malloc(sizeof(t_machine*) * nb_machines);\n    if(machines == 0)\n    {\n        printf(\"Erreur d'allocation!\\n\");\n        exit(1);\n    }"
                }
            ]
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int option;\n\n     \n    if(!grille_chargee)\n    {\n        printf(\"******************************************************************************\\n\"\n               \"\\n\"\n               \"                             MENU LABYRINTHE\\n\"\n               \"\\n\"\n               \"******************************************************************************\\n\");\n        printf(\"1- Charger un labyrinthe\\n\"\n                      \"2- [INDISPONIBLE] Resoudre le labyrinthe\\n\"\n                      \"3- [INDISPONIBLE] Resoudre le labyrinthe pas-a-pas\\n\"\n                      \"4- Quitter le programme\\n\\n>\");\n\n         \n        do\n        {\n            scanf(\"%i\",&option);\n\n            if(option==2 || option==3 || option<1 || option>4)\n            {\n                printf(\"Choix invalide !\\n\");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='option',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='option',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='grille_chargee',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"******************************************************************************\\\\n\\\\n                             MENU LABYRINTHE\\\\n\\\\n******************************************************************************\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"1- Charger un labyrinthe\\\\n2- [INDISPONIBLE] Resoudre le labyrinthe\\\\n3- [INDISPONIBLE] Resoudre le labyrinthe pas-a-pas\\\\n4- Quitter le programme\\\\n\\\\n>\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                DoWhile(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='option',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='option',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%i\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='option',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='||',\n                              left=\n                                BinaryOp(\n                                  op='||',\n                                  left=\n                                    BinaryOp(\n                                      op='||',\n                                      left=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ID(\n                                              name='option',\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='2',\n                                            )\n                                        )\n                                      right=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            ID(\n                                              name='option',\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='3',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='<',\n                                      left=\n                                        ID(\n                                          name='option',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='>',\n                                  left=\n                                    ID(\n                                      name='option',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='4',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Choix invalide !\\\\n\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                ID(\n                  name='grille_chargee',\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"******************************************************************************\\\\n\\\\n                             MENU LABYRINTHE\\\\n\\\\n******************************************************************************\\\\n\"',\n                            )\n                        )\n                    )\n                  block_items[1]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"1- Charger un labyrinthe\\\\n2- Resoudre le labyrinthe\\\\n3- Resoudre le labyrinthe pas-a-pas\\\\n4- Quitter le programme\\\\n\\\\n>\"',\n                            )\n                        )\n                    )\n                  block_items[2]=\n                    DoWhile(\n                      cond=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='option',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='>',\n                              left=\n                                ID(\n                                  name='option',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                            )\n                        )\n                      stmt=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='scanf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"%i\"',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='option',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='||',\n                                  left=\n                                    BinaryOp(\n                                      op='<',\n                                      left=\n                                        ID(\n                                          name='option',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='>',\n                                      left=\n                                        ID(\n                                          name='option',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='4',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Choix invalide !\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='option',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.3081429898738861,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.3121434450149536,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.32196328043937683,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.32266965508461,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.3242567566308988,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                }
            ]
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char* buf_nom_fichier, int buf_taille)\n{\n     \n    printf(\"Nom du fichier:\\n\");\n\n    do{} while (getchar()!='\\n');\n    fgets(buf_nom_fichier,buf_taille,stdin);\n    buf_nom_fichier[strlen((buf_nom_fichier))-1] = '\\0';\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Nom du fichier:\\\\n\"',\n                )\n            )\n        )\n      block_items[1]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='getchar',\n                    )\n                )\n              right=\n                Constant(\n                  type='char',\n                  value=\"'\\\\n'\",\n                )\n            )\n          stmt=\n            Compound(\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_taille',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='strlen',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='buf_nom_fichier',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2648618711720766,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.26781946420669556,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.27027270197868347,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2774357795715332,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.2776382267475128,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                }
            ]
        }
    ]
}