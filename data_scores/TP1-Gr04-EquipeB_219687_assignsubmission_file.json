{
    "project_name": "TP1-Gr04-EquipeB_219687_assignsubmission_file",
    "functions": [
        {
            "function_name": "add",
            "function_code": "int add(int a, int b)\n{\n\treturn a + b;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='add',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='a',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='a',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='b',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='b',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='add',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='a',\n                )\n              right=\n                ID(\n                  name='b',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2580282193619878,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "fonction_bidon",
                    "function_code": "void fonction_bidon(int a)\n{\n    a = a * 20;\n}"
                },
                {
                    "distance": 0.2784259603092551,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2803088426589966,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.28051427006721497,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2817783057689667,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "get_add_function",
            "function_code": "int (*get_add_function())(int, int)\n{\n\treturn add;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='get_add_function',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                FuncDecl(\n                  args=\n                    ParamList(\n                      params[0]=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                      params[1]=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                    )\n                  type=\n                    TypeDecl(\n                      declname='get_add_function',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            ID(\n              name='add',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31161283988539346,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "fonction_bidon",
                    "function_code": "void fonction_bidon(int a)\n{\n    a = a * 20;\n}"
                },
                {
                    "distance": 0.3497812747955322,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3521673381328583,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.3527238368988037,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                },
                {
                    "distance": 0.35662458361670685,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "caller",
            "function_code": "int caller()\n{\n\tint (*func_ptr)(int, int) = get_add_function();\n\n\tprintf(\"Sum: %d\\n\", func_ptr(8, 12));\n\n\treturn 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='caller',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            TypeDecl(\n              declname='caller',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='func_ptr',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                FuncDecl(\n                  args=\n                    ParamList(\n                      params[0]=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                      params[1]=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                    )\n                  type=\n                    TypeDecl(\n                      declname='func_ptr',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          init=\n            FuncCall(\n              name=\n                ID(\n                  name='get_add_function',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Sum: %d\\\\n\"',\n                )\n              exprs[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='func_ptr',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='int',\n                          value='8',\n                        )\n                      exprs[1]=\n                        Constant(\n                          type='int',\n                          value='12',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.17566700279712677,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.17846563458442688,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.1815253645181656,
                    "project_name": "20233_02_15_Exercice_Minimum",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    printf(\"%lf\\n\", min_de_3(32, 2, 18) );\n    printf(\"%lf\\n\", min_de_3(30, -40, 50) );\n\n    return 0;\n}"
                },
                {
                    "distance": 0.18900324404239655,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                },
                {
                    "distance": 0.18912420615665956,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "nb_aleatoire",
            "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand()/(32767 +0.001)*(max-min+1));\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='nb_aleatoire',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='min',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='min',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='max',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='max',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='nb_aleatoire',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='min',\n                )\n              right=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                  expr=\n                    BinaryOp(\n                      op='*',\n                      left=\n                        BinaryOp(\n                          op='/',\n                          left=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='rand',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                Constant(\n                                  type='int',\n                                  value='32767',\n                                )\n                              right=\n                                Constant(\n                                  type='double',\n                                  value='0.001',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ID(\n                                  name='max',\n                                )\n                              right=\n                                ID(\n                                  name='min',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 3.3018288288408736e-06,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.00010573796556141426,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.2667578458786011,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "nb_combinaisons",
                    "function_code": "int nb_combinaisons(int n, int k)\n{\n\tint resultat; \n\n\tresultat = factorielle(n) / (factorielle(k) * factorielle(n - k));\n\n\treturn resultat;\n}"
                },
                {
                    "distance": 0.2692242282414273,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2704560458660126,
                    "project_name": "20223_01_09_SousProgrammes",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_tirees; \n\tint nb_total; \n\tint combinaisons; \n\n\tbienvenue();\n\n\tprintf(\"Combien de boules tirees: \");\n\tscanf(\"%d\", &nb_tirees);\n\n\tprintf(\"Combien de boules au total: \");\n\tscanf(\"%d\", &nb_total);\n\n\tcombinaisons = nb_combinaisons(nb_total, nb_tirees);\n\n\t \n\n\tprintf(\"Nombre de combinaisons : %d\\n\", combinaisons);\n\n\t \n\n\n\t \n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "afficher_grille_debug",
            "function_code": "void afficher_grille_debug(int grille[][100], int hauteur_grille, int largeur_grille,\n                           int pile_solution[][2], int debug)\n{\n     \n    if (debug == 1)\n    {\n         \n        for (int i = 0; i < (hauteur_grille+1); i++)\n            for (int k = 0; k < largeur_grille; k++)\n                printf(\"\\b\");\n\n         \n        lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='afficher_grille_debug',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='afficher_grille_debug',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='debug',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='i',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='i',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='i',\n                        )\n                      right=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            ID(\n                              name='hauteur_grille',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='i',\n                        )\n                    )\n                  stmt=\n                    For(\n                      init=\n                        DeclList(\n                          decls[0]=\n                            Decl(\n                              name='k',\n                              quals=[],\n                              align=[],\n                              storage=[],\n                              funcspec=[],\n                              type=\n                                TypeDecl(\n                                  declname='k',\n                                  quals=[],\n                                  align=None,\n                                  type=\n                                    IdentifierType(\n                                      names=['int'],\n                                    )\n                                )\n                              init=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      cond=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='k',\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                      next=\n                        UnaryOp(\n                          op='p++',\n                          expr=\n                            ID(\n                              name='k',\n                            )\n                        )\n                      stmt=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\b\"',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_afficher_grille',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ID(\n                          name='pile_solution',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.19892810608957737,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                },
                {
                    "distance": 0.2538239061832428,
                    "project_name": "20223_01_33_ProjetRevision-2",
                    "function_name": "afficher_province",
                    "function_code": "void afficher_province(const t_province* prov)\n{\n\tprintf(\"Province: %s\\n\", prov->nom);\n\tprintf(\"=====================================\\n\");\n\n\tfor (int i = 0; i < prov->nb_capteurs; i++)\n\t{\n\t\tcapteur_afficher(prov->capteurs[i]);\n\t}"
                },
                {
                    "distance": 0.2586604952812195,
                    "project_name": "20223_01_19_Tableaux2D",
                    "function_name": "afficher_tab2d",
                    "function_code": "void afficher_tab2d(const double tab[][100],\n\tint nb_lignes, int nb_colonnes)\n{\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\tprintf(\"%.2lf\\t\", tab[i][j]);\n\t\t}"
                },
                {
                    "distance": 0.2631734769683683,
                    "project_name": "20233_02_22_Tabs2D",
                    "function_name": "afficher_tab2d",
                    "function_code": "void afficher_tab2d(double tab[][20], int nb_lignes, int nb_colonnes)\n{\n    for(int i=0; i < nb_lignes ; i++)\n    {\n        for(int j=0; j< nb_colonnes; j++)\n        {\n            printf(\"%.2lf\\t\", tab[i][j]);\n        }"
                },
                {
                    "distance": 0.26626031541790035,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                }
            ]
        },
        {
            "function_name": "lab_afficher_grille",
            "function_code": "void lab_afficher_grille (int grille[][100],\n                          int hauteur_grille,\n                          int largeur_grille,\n                          int pile_solution[][2])\n{\n     \n    for (int ligne = 0; ligne < hauteur_grille; ligne++)\n    {\n        for (int colone = 0; colone < largeur_grille; colone++)\n        {\n            if (grille[ligne][colone] == 1)\n            {\n                 \n                 \n                printf(\"%c\", 219);\n                printf(\" \");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='ligne',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='ligne',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='colone',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='colone',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='colone',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='colone',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='ligne',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='colone',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"%c\"',\n                                        )\n                                      exprs[1]=\n                                        Constant(\n                                          type='int',\n                                          value='219',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\" \"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='ligne',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='colone',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\" \"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  iftrue=\n                                    If(\n                                      cond=\n                                        BinaryOp(\n                                          op='==',\n                                          left=\n                                            FuncCall(\n                                              name=\n                                                ID(\n                                                  name='pile_contient',\n                                                )\n                                              args=\n                                                ExprList(\n                                                  exprs[0]=\n                                                    ID(\n                                                      name='pile_solution',\n                                                    )\n                                                  exprs[1]=\n                                                    ID(\n                                                      name='ligne',\n                                                    )\n                                                  exprs[2]=\n                                                    ID(\n                                                      name='colone',\n                                                    )\n                                                )\n                                            )\n                                          right=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                      iftrue=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='printf',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                Constant(\n                                                  type='string',\n                                                  value='\"\\\\bx\"',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.19887588918209076,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.223899245262146,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2435002475976944,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                },
                {
                    "distance": 0.2435925304889679,
                    "project_name": "20233_02_36_Tab2D_Dyn",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int tab2d[3][4];\n    int** tab2d_dyn;\n    int nb_lignes = 3;\n    int nb_colonnes = 4;\n\n    tab2d_dyn = creer_tab2d_dyn(nb_lignes, nb_colonnes);\n\n    for(int i=0; i<nb_lignes; i++)\n    {\n        for(int j=0; j<nb_colonnes; j++)\n        {\n            tab2d_dyn[i][j] = i*j;\n        }"
                },
                {
                    "distance": 0.25324664245006245,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                }
            ]
        },
        {
            "function_name": "test_lab_afficher_grille",
            "function_code": "void test_lab_afficher_grille(void)\n{\n     \n    int grille1[7][100] = {{1, 0, 1, 1, 1},\n                                         {1, 0, 0, 0, 1},\n                                         {1, 1, 0, 1, 1},\n                                         {1, 0, 0, 0, 1},\n                                         {1, 0, 1, 0, 0},\n                                         {1, 0, 0, 1, 1},\n                                         {1, 1, 1, 1, 1}};\n\n     \n    int pile_solution[10][2] = {{10, 8},\n                                {0, 1},\n                                {1, 1},\n                                {1, 2},\n                                {2, 2},\n                                {3, 2},\n                                {3, 3},\n                                {4, 3},\n                                {4, 4}};\n\n     \n    int pile_vide[10][2];\n\n\n     \n     \n     \n    lab_afficher_grille(grille1, 7, 5, pile_vide);\n    printf(\"\\n\\n\");\n    lab_afficher_grille(grille1, 7, 5, pile_solution);\n    printf(\"\\n\\n\");\n    lab_afficher_grille(grille1, 0, 2, pile_vide);\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_afficher_grille',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_afficher_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille1',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[4]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[5]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[6]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='10',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='8',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[4]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[5]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[6]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                )\n              exprs[7]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                )\n              exprs[8]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='pile_vide',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_vide',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n        )\n      block_items[3]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_vide',\n                )\n            )\n        )\n      block_items[4]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[5]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='7',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_solution',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"\\\\n\\\\n\"',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_afficher_grille',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[2]=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n              exprs[3]=\n                ID(\n                  name='pile_vide',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.17041882872581482,
                    "project_name": "20233_02_16_Pointeurs",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.17561939358711243,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.17850953340530396,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.1787940114736557,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.18494776333621532,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                }
            ]
        },
        {
            "function_name": "lab_choisir_deplacement",
            "function_code": "int lab_choisir_deplacement(int deplacements_possibles[][2], int nb_deplacements_possibles)\n{\n    srand((unsigned int)time(0));\n    rand();\n\n     \n   return nb_aleatoire(0, nb_deplacements_possibles - 1);\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements_possibles',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='nb_deplacements_possibles',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='nb_deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='srand',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Cast(\n                  to_type=\n                    Typename(\n                      name=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        TypeDecl(\n                          declname=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['unsigned', 'int'],\n                            )\n                        )\n                    )\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='time',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='rand',\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='nb_aleatoire',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    BinaryOp(\n                      op='-',\n                      left=\n                        ID(\n                          name='nb_deplacements_possibles',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.24608472673864204,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.24677703283698266,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "nb_aleatoire",
                    "function_code": "int nb_aleatoire(int min, int max)\n{\n    return min + (int)(rand() / (32767 + 0.001) * (max - min + 1));\n}"
                },
                {
                    "distance": 0.2631129324436188,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2632998824119568,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2661527582480377,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                }
            ]
        },
        {
            "function_name": "test_lab_choisir_deplacement",
            "function_code": "int test_lab_choisir_deplacement(void)\n{\n     \n    int deplacements_possibles[][2] = { {1,1}, {1,0}, {0,1}, {0,0}};\n    int choix;\n\n     \n    for (int i = 0; i < 10; i++)\n    {\n        choix = lab_choisir_deplacement(deplacements_possibles, 4);\n         \n         \n        if ((choix < 0) || (choix >= 4))\n        {\n            printf(\"Erreur\");\n            return 0;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_choisir_deplacement',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_choisir_deplacement',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='10',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_choisir_deplacement',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='deplacements_possibles',\n                            )\n                          exprs[1]=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='>=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Erreur\"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  iffalse=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"%d\\\\n\"',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.217551589012146,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.22738589437007592,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2352234423160553,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.23618795583650978,
                    "project_name": "20233_02_26_String_functions",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine[100];\n    char chaine2[100];\n    char resultat[100];\n    int tab1[10] = {4, 5, 6, 8};\n    int tab2[10];\n\n\n    \n    \n    \n    \n    \n    \n    \n    strncpy(chaine, \"Bonjour \", 100);\n    printf(\"%s\\n\", chaine);\n\n    strncpy(chaine2, \"a tous\", 100);\n    strncat(chaine, \"a tous\", 100);\n\n    int nb_etudiants = 30;\n\n    sprintf(resultat,\"%s les %i etudant-es\\n\", chaine, nb_etudiants);\n\n    printf(\"Le resultat est: %s\", resultat);\n\n     \n     \n\n     \n     \n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.23985895446177072,
                    "project_name": "20233_02_02_ConversionTypes",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double distance;  \n    float trajet_parcouru;  \n    int valeur_entiere;\n    double salaire;\n\n\n    distance = 1345.50;\n\n    trajet_parcouru = (float)distance;\n\n    valeur_entiere = (int)distance;\n\n    printf(\"Contenu de valeur_entirere: %i\\n\", valeur_entiere);\n\n     \n     \n    printf(\"Conetnu de salaire: %f\\n\", salaire);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_calculer_deplacements_possibles",
            "function_code": "void lab_calculer_deplacements_possibles (int grille[][100],\n                                          int hauteur_grille,\n                                          int largeur_grille,\n                                          int pos_ligne,\n                                          int pos_colonne,\n                                          int solution_partielle[][2],\n                                          int *nb_deplacements,\n                                          int deplacements[4][2])\n{\n    *nb_deplacements = 0;\n    int tab_pos_acc[] = {pos_ligne,\n                         pos_colonne};                \n    int copie_grille[2];                                                 \n    int parcours;                                                       \n    parcours = pile_taille_pile(solution_partielle);\n\n    for (int i = 0; i < hauteur_grille; i++)                         \n    {\n        for (int a = 0; a < largeur_grille; a++)                      \n        {\n            copie_grille[0] = a;      \n            copie_grille[1] = i;      \n            if ((lab_est_cases_adjacentes(tab_pos_acc,copie_grille)))      \n            {\n                if (grille[a][i] != 1)                                                 \n                {\n                     \n                     \n                    for (int b = 0; b < (parcours -1); b++)\n                    {\n                        if (pile_est_vide(solution_partielle))\n                        {\n                            pile_empiler(deplacements, a + 1, i);\n\n                            *nb_deplacements++;\n\n                        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_calculer_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='pos_ligne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_ligne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pos_colonne',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='pos_colonne',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='solution_partielle',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='solution_partielle',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[6]=\n                Decl(\n                  name='nb_deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nb_deplacements',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[7]=\n                Decl(\n                  name='deplacements',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='deplacements',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='4',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_calculer_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='tab_pos_acc',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='tab_pos_acc',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                ID(\n                  name='pos_ligne',\n                )\n              exprs[1]=\n                ID(\n                  name='pos_colonne',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='copie_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='copie_grille',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='parcours',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='parcours',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='parcours',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='pile_taille_pile',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='solution_partielle',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='i',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='i',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='i',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                For(\n                  init=\n                    DeclList(\n                      decls[0]=\n                        Decl(\n                          name='a',\n                          quals=[],\n                          align=[],\n                          storage=[],\n                          funcspec=[],\n                          type=\n                            TypeDecl(\n                              declname='a',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          init=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  cond=\n                    BinaryOp(\n                      op='<',\n                      left=\n                        ID(\n                          name='a',\n                        )\n                      right=\n                        ID(\n                          name='largeur_grille',\n                        )\n                    )\n                  next=\n                    UnaryOp(\n                      op='p++',\n                      expr=\n                        ID(\n                          name='a',\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='copie_grille',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          rvalue=\n                            ID(\n                              name='a',\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='copie_grille',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          rvalue=\n                            ID(\n                              name='i',\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_est_cases_adjacentes',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='tab_pos_acc',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='copie_grille',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='grille',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='a',\n                                                )\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='i',\n                                            )\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        For(\n                                          init=\n                                            DeclList(\n                                              decls[0]=\n                                                Decl(\n                                                  name='b',\n                                                  quals=[],\n                                                  align=[],\n                                                  storage=[],\n                                                  funcspec=[],\n                                                  type=\n                                                    TypeDecl(\n                                                      declname='b',\n                                                      quals=[],\n                                                      align=None,\n                                                      type=\n                                                        IdentifierType(\n                                                          names=['int'],\n                                                        )\n                                                    )\n                                                  init=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                          cond=\n                                            BinaryOp(\n                                              op='<',\n                                              left=\n                                                ID(\n                                                  name='b',\n                                                )\n                                              right=\n                                                BinaryOp(\n                                                  op='-',\n                                                  left=\n                                                    ID(\n                                                      name='parcours',\n                                                    )\n                                                  right=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                          next=\n                                            UnaryOp(\n                                              op='p++',\n                                              expr=\n                                                ID(\n                                                  name='b',\n                                                )\n                                            )\n                                          stmt=\n                                            Compound(\n                                              block_items[0]=\n                                                If(\n                                                  cond=\n                                                    FuncCall(\n                                                      name=\n                                                        ID(\n                                                          name='pile_est_vide',\n                                                        )\n                                                      args=\n                                                        ExprList(\n                                                          exprs[0]=\n                                                            ID(\n                                                              name='solution_partielle',\n                                                            )\n                                                        )\n                                                    )\n                                                  iftrue=\n                                                    Compound(\n                                                      block_items[0]=\n                                                        FuncCall(\n                                                          name=\n                                                            ID(\n                                                              name='pile_empiler',\n                                                            )\n                                                          args=\n                                                            ExprList(\n                                                              exprs[0]=\n                                                                ID(\n                                                                  name='deplacements',\n                                                                )\n                                                              exprs[1]=\n                                                                BinaryOp(\n                                                                  op='+',\n                                                                  left=\n                                                                    ID(\n                                                                      name='a',\n                                                                    )\n                                                                  right=\n                                                                    Constant(\n                                                                      type='int',\n                                                                      value='1',\n                                                                    )\n                                                                )\n                                                              exprs[2]=\n                                                                ID(\n                                                                  name='i',\n                                                                )\n                                                            )\n                                                        )\n                                                      block_items[1]=\n                                                        UnaryOp(\n                                                          op='*',\n                                                          expr=\n                                                            UnaryOp(\n                                                              op='p++',\n                                                              expr=\n                                                                ID(\n                                                                  name='nb_deplacements',\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                  iffalse=\n                                                    If(\n                                                      cond=\n                                                        BinaryOp(\n                                                          op='==',\n                                                          left=\n                                                            FuncCall(\n                                                              name=\n                                                                ID(\n                                                                  name='pile_contient',\n                                                                )\n                                                              args=\n                                                                ExprList(\n                                                                  exprs[0]=\n                                                                    ID(\n                                                                      name='solution_partielle',\n                                                                    )\n                                                                  exprs[1]=\n                                                                    BinaryOp(\n                                                                      op='+',\n                                                                      left=\n                                                                        ID(\n                                                                          name='a',\n                                                                        )\n                                                                      right=\n                                                                        Constant(\n                                                                          type='int',\n                                                                          value='1',\n                                                                        )\n                                                                    )\n                                                                  exprs[2]=\n                                                                    ID(\n                                                                      name='i',\n                                                                    )\n                                                                )\n                                                            )\n                                                          right=\n                                                            Constant(\n                                                              type='int',\n                                                              value='0',\n                                                            )\n                                                        )\n                                                      iftrue=\n                                                        Compound(\n                                                          block_items[0]=\n                                                            FuncCall(\n                                                              name=\n                                                                ID(\n                                                                  name='pile_empiler',\n                                                                )\n                                                              args=\n                                                                ExprList(\n                                                                  exprs[0]=\n                                                                    ID(\n                                                                      name='deplacements',\n                                                                    )\n                                                                  exprs[1]=\n                                                                    ID(\n                                                                      name='a',\n                                                                    )\n                                                                  exprs[2]=\n                                                                    ID(\n                                                                      name='i',\n                                                                    )\n                                                                )\n                                                            )\n                                                          block_items[1]=\n                                                            UnaryOp(\n                                                              op='*',\n                                                              expr=\n                                                                UnaryOp(\n                                                                  op='p++',\n                                                                  expr=\n                                                                    ID(\n                                                                      name='nb_deplacements',\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.20045354962348938,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.2047358602285385,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.22047365875709304,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.2210787981748581,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.23694731295108795,
                    "project_name": "20223_01_27_ExerciceEnregistrements",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client un_client; \n\n\tstrcpy(un_client.num_ass_sociale , \"345 673 123\");\n\tstrcpy(un_client.nom, \"Valjean\");\n\tstrcpy(un_client.prenom, \"Jean\");\n\t \n\tun_client.date_naiss.jour = 10;\n\tun_client.date_naiss.mois = 5; \n\tun_client.date_naiss.annee = 1562;\n\n\tun_client.nb_comptes = 0;\n\n\tstrcpy(un_client.comptes[0].identifiant,  \"AB5676\");\n\tun_client.comptes[0].solde = 2000;\n\tun_client.comptes[0].limite_decouvert = 1500;\n\tun_client.comptes[0].taux_interets = 1.5;\n\n\tun_client.nb_comptes++;\n\n\tstrcpy(un_client.comptes[1].identifiant, \"DF6789\");\n\tun_client.comptes[1].solde = 150;\n\tun_client.comptes[1].limite_decouvert = 0;\n\tun_client.comptes[1].taux_interets = 0.4;\n\n\tun_client.nb_comptes++; \n\n\tclient_afficher(&un_client);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "test_lab_deplacements_possibles",
            "function_code": "int test_lab_deplacements_possibles(void)\n{\n    int hauteur_grille = 7;\n    int largeur_grille = 7;\n\n     \n    int grille[][100] = {{1, 0, 1, 1, 1, 1, 1},\n                                       {1, 0, 0, 0, 0, 0, 1},\n                                       {1, 1, 0, 1, 1, 0, 1},\n                                       {1, 0, 0, 0, 1, 0, 1},\n                                       {1, 0, 1, 1, 1, 0, 1},\n                                       {1, 0, 0, 0, 0, 0, 1},\n                                       {1, 1, 1, 1, 1, 0, 1}};\n\n     \n    int solution_partielle[][2] = {{9, 4},\n                                   {0, 1},\n                                   {1, 1},\n                                   {2, 2},\n                                   {3, 2},\n                                   {0, 0},\n                                   {0, 0},\n                                   {0, 0},\n                                   {0, 0}};\n\n    int nb_deplacements;\n    int deplacements[4][2];\n\n\n    lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille,3,1,\n                                        solution_partielle, &nb_deplacements, deplacements);\n\n     \n    printf(\"%i\\n\", nb_deplacements);\n    printf(\"D\u00e9placements possibles: \\n\");\n\n     \n    for (int k = 0; k < 4; k++)\n    {\n        printf(\"[%d, %d]\\n\", deplacements[k][0], deplacements[k][1]);\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_deplacements_possibles',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_deplacements_possibles',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='hauteur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='7',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='largeur_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur_grille',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='7',\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[4]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[5]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[6]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[4]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[5]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[6]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='solution_partielle',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='solution_partielle',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='9',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='4',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[4]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='3',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              exprs[5]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[6]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[7]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[8]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[6]=\n        FuncCall(\n          name=\n            ID(\n              name='lab_calculer_deplacements_possibles',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='grille',\n                )\n              exprs[1]=\n                ID(\n                  name='hauteur_grille',\n                )\n              exprs[2]=\n                ID(\n                  name='largeur_grille',\n                )\n              exprs[3]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n              exprs[4]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[5]=\n                ID(\n                  name='solution_partielle',\n                )\n              exprs[6]=\n                UnaryOp(\n                  op='&',\n                  expr=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                )\n              exprs[7]=\n                ID(\n                  name='deplacements',\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%i\\\\n\"',\n                )\n              exprs[1]=\n                ID(\n                  name='nb_deplacements',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"D\u00e9placements possibles: \\\\n\"',\n                )\n            )\n        )\n      block_items[9]=\n        For(\n          init=\n            DeclList(\n              decls[0]=\n                Decl(\n                  name='k',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='k',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          cond=\n            BinaryOp(\n              op='<',\n              left=\n                ID(\n                  name='k',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          next=\n            UnaryOp(\n              op='p++',\n              expr=\n                ID(\n                  name='k',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"[%d, %d]\\\\n\"',\n                        )\n                      exprs[1]=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='deplacements',\n                                )\n                              subscript=\n                                ID(\n                                  name='k',\n                                )\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      exprs[2]=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='deplacements',\n                                )\n                              subscript=\n                                ID(\n                                  name='k',\n                                )\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.16925759613513947,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.19400334358215332,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.21407753229141235,
                    "project_name": "20233_02_18_Tableaux1D",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    double notes[65];\n    int nb_etudiants_effectif;\n    double moyenne;\n    double max;\n\n    int ma_var = 10;\n\n \n \n \n \n \n \n\n    printf(\"Combien d'etudiants: \");\n    scanf(\"%i\", &nb_etudiants_effectif);\n\n    for(int i=0; i<nb_etudiants_effectif ; i++)\n    {\n        printf(\"Saisir la note de l'etudiant-e num. %i: \", i+1);\n        scanf(\"%lf\", &notes[i]);\n    }"
                },
                {
                    "distance": 0.21736399393000666,
                    "project_name": "20233_02_34_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_date date1, date2;\n    t_machine* machine1;\n    int nb_machines;\n     \n    t_machine** machines;\n\n    printf(\"Combien de machines? \");\n    scanf(\"%i\", &nb_machines);\n\n    machines = (t_machine**)malloc(sizeof(t_machine*) * nb_machines);\n    if(machines == 0)\n    {\n        printf(\"Erreur d'allocation!\\n\");\n        exit(1);\n    }"
                },
                {
                    "distance": 0.21848897635936737,
                    "project_name": "20233_02_16_Pointeurs",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n     \n    if(case1[0] == case2[0])\n    {\n         \n        if(case1[1] == (case2[1]+1) || case1[1] == (case2[1]-1))\n        {\n            return 1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  iffalse=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            Return(\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      iffalse=\n                        Compound(\n                          block_items[0]=\n                            Return(\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2930094301700592,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.31309714190086263,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3201814293861389,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.32329708337783813,
                    "project_name": "20233_02_23_Tri_Tab1D",
                    "function_name": "main",
                    "function_code": "int main() {\n    int mon_tableau[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau2[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau3[] = {45, 10, 2, 28, 55, 46, 78, 32};\n\n    tri_insertion(mon_tableau, 8);\n    afficher_tab(mon_tableau, 8);\n\n    tri_selection(mon_tableau2, 8);\n    afficher_tab(mon_tableau2, 8);\n\n    tri_bulles(mon_tableau3, 8);\n    afficher_tab(mon_tableau3, 8);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3265896102002773,
                    "project_name": "20233_02_21_Exercice_MinMaj",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int nb_minuscules, nb_majuscules;\n    char caracteres[100] = {'B', 'o', 'n', 'j', 'o', 'u', 'r', ' ', 'E', 'T', 'S'};\n\n    majuscules_minuscules(caracteres, 11, &nb_majuscules, &nb_minuscules);\n\n    printf(\"Il y a %i majuscules et %i minuscules\\n\", nb_majuscules, nb_minuscules);\n\n\n\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "test_lab_est_cases_adjacentes",
            "function_code": "int test_lab_est_cases_adjacentes(void)\n{\n     \n    int case1[] = {5,4};\n    int case2[] = {5,3};\n\n    return lab_est_cases_adjacentes(case1, case2);;\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='case1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='case2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_cases_adjacentes',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='case1',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='case2',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        EmptyStatement(\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2804272174835205,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.28300678730010986,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29491063952445984,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.299258587423716,
                    "project_name": "20233_02_32_Exercice_Etudiants",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_etudiant* e1;\n\n    e1 = t_etudiant_init(\"Baggins\", \"Bilbo\");\n\n    strcpy(e1->code_perm, \"BAGB00000000\");\n    e1->intra = 75;\n    e1->finale = 86.5;\n    e1->tp1 = 80;\n    e1->tp2 = 85;\n\n    t_etudiant_afficher(e1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.30139995245026613,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(const int position[2], int grille[][100], int hauteur_grille, int largeur_grille)\n{\n     \n     \n\n    if ((position[0] == 0) || (position[0] == largeur_grille) || (position[1] == 0) || (position[1] == hauteur_grille)\n                                                                                       && (grille[position[0]][position[1]] == 0))\n        return 1;\n\n         \n    else\n        return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iffalse=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2838035523891449,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.2929234504699707,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.299614150864349,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3058847926590524,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.30642463437821327,
                    "project_name": "20233_02_06_operateurs_logiques",
                    "function_name": "main",
                    "function_code": "int main() {\n    int x;\n\n    x = 15;\n\n    if( 10 < x  &&  x< 20 )\n    {\n        printf(\"x est dans l'intervalle!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "test_lab_est_une_sortie",
            "function_code": "int test_lab_est_une_sortie(void)\n{\n     \n     \n     \n     \n    int position1[2] = {0, 1};\n    int position2[2] = {1, 1};\n    int position3[2] = {1, 0};\n    int exemple_grille[4][100] = {{1, 0, 1, 1},\n                                                {1, 0, 0, 1},\n                                                {1, 0, 1, 1},\n                                                {1, 1, 1, 1}};\n\n     \n     \n    if ((lab_est_une_sortie(position1, exemple_grille, 4, 4) == 1)\n        && (lab_est_une_sortie(position2, exemple_grille, 4, 4) == 0)\n        && (lab_est_une_sortie(position3, exemple_grille, 4, 4) == 0))\n        return 1;\n\n    else\n        return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='position1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='position2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='position3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position3',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='exemple_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='exemple_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_est_une_sortie',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='position1',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='exemple_grille',\n                                )\n                              exprs[2]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                              exprs[3]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_est_une_sortie',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='position2',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='exemple_grille',\n                                )\n                              exprs[2]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                              exprs[3]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position3',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='exemple_grille',\n                            )\n                          exprs[2]=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                          exprs[3]=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iffalse=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.27079513669013977,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.2747628390789032,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2892804309082799,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.29392072558403015,
                    "project_name": "20233_02_04_expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n    int nombre_etudiants;\n    int etudiants_par_groupe;  \n    int resultat;  \n    int etudiants_orphelins;\n\n    int x;\n    int y;\n\n    nombre_etudiants = 10;\n    etudiants_par_groupe = 3;\n\n     \n     \n\n\n    resultat = nombre_etudiants / etudiants_par_groupe;\n\n    etudiants_orphelins = nombre_etudiants % etudiants_par_groupe;\n\n    printf(\"Le nombre de groupes est: %i\\n\", resultat);\n    printf(\"Et il reste %i etudiants malheureux.\\n\", etudiants_orphelins);\n\n    x = 11;\n    y = ++x / 3;\n\n    printf(\"LE contenu de x: %i\\n\", x);\n    printf(\"LE contenu de y: %i\\n\", y);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29541374395388703,
                    "project_name": "20233_02_26_String_functions",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine[100];\n    char chaine2[100];\n    char resultat[100];\n    int tab1[10] = {4, 5, 6, 8};\n    int tab2[10];\n\n\n    \n    \n    \n    \n    \n    \n    \n    strncpy(chaine, \"Bonjour \", 100);\n    printf(\"%s\\n\", chaine);\n\n    strncpy(chaine2, \"a tous\", 100);\n    strncat(chaine, \"a tous\", 100);\n\n    int nb_etudiants = 30;\n\n    sprintf(resultat,\"%s les %i etudant-es\\n\", chaine, nb_etudiants);\n\n    printf(\"Le resultat est: %s\", resultat);\n\n     \n     \n\n     \n     \n\n\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(\n        int grille[][100],\n        int hauteur_grille,\n        int largeur_grille,\n        int entree[2],\n        int pile_solution[][2],\n        int debug)\n{\n    int pile_chemin_alternatif[100][2];\n    int deplacements_possibles[4][2];\n    int nb_deplacements = 1;\n    int nouvelle_position[2];\n\n    int pile_temporaire[100][2];\n    int pos_temp[2];\n    int indice;\n\n    pile_initialiser(pile_solution, 100);\n    pile_initialiser(pile_chemin_alternatif, 100);\n\n    pile_empiler(pile_solution, entree[0], entree[1]);\n     \n    if (debug == 1)\n        lab_afficher_grille(grille, hauteur_grille, largeur_grille, pile_solution);\n\n     \n    while ((nb_deplacements != 0) && (pile_solution != 0))\n    {\n        pile_haut_pile(pile_solution, &nouvelle_position[0], &nouvelle_position[1]);\n\n        lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille, nouvelle_position[0],\n                                            nouvelle_position[1],pile_temporaire,\n                                            &nb_deplacements,deplacements_possibles);\n\n         \n         \n        if (nb_deplacements > 0)\n        {\n            indice = lab_choisir_deplacement(deplacements_possibles, nb_deplacements);\n            pile_empiler(pile_solution, deplacements_possibles[indice][0], deplacements_possibles[indice][1]);\n\n            afficher_grille_debug(grille, hauteur_grille, largeur_grille, pile_solution, debug);\n\n            for(int i=0; i<nb_deplacements-1; i++)  \n            {\n                if (i != indice) {\n\n                    pile_empiler(pile_chemin_alternatif, deplacements_possibles[i][0], deplacements_possibles[i][0]);\n                    pile_chemin_alternatif[0][1]++;\n                }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_chemin_alternatif',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemin_alternatif',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='deplacements_possibles',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacements_possibles',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacements',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='nouvelle_position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='nouvelle_position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='pile_temporaire',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_temporaire',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='pos_temp',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='pos_temp',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='indice',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='indice',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemin_alternatif',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='debug',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iftrue=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_afficher_grille',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='pile_solution',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        While(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    ID(\n                      name='nb_deplacements',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    ID(\n                      name='pile_solution',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='pile_haut_pile',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='nouvelle_position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      exprs[2]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='nouvelle_position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='nouvelle_position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      exprs[4]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='nouvelle_position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_temporaire',\n                        )\n                      exprs[6]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='nb_deplacements',\n                            )\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacements_possibles',\n                        )\n                    )\n                )\n              block_items[2]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='>',\n                      left=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='indice',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_choisir_deplacement',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='deplacements_possibles',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='nb_deplacements',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='indice',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              exprs[2]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacements_possibles',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='indice',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='afficher_grille_debug',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[4]=\n                                ID(\n                                  name='debug',\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        For(\n                          init=\n                            DeclList(\n                              decls[0]=\n                                Decl(\n                                  name='i',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    TypeDecl(\n                                      declname='i',\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                  init=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          cond=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='i',\n                                )\n                              right=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='nb_deplacements',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          next=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmt=\n                            Compound(\n                              block_items[0]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        ID(\n                                          name='i',\n                                        )\n                                      right=\n                                        ID(\n                                          name='indice',\n                                        )\n                                    )\n                                  iftrue=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='pile_empiler',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='pile_chemin_alternatif',\n                                                )\n                                              exprs[1]=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        ID(\n                                                          name='i',\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              exprs[2]=\n                                                ArrayRef(\n                                                  name=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='deplacements_possibles',\n                                                        )\n                                                      subscript=\n                                                        ID(\n                                                          name='i',\n                                                        )\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                      block_items[1]=\n                                        UnaryOp(\n                                          op='p++',\n                                          expr=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pile_chemin_alternatif',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pile_chemin_alternatif',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_haut_pile',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemin_alternatif',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            DoWhile(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_est_cases_adjacentes',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='nouvelle_position',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='pos_temp',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              stmt=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='pile_depiler',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[1]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pos_temp',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                            )\n                                          exprs[2]=\n                                            UnaryOp(\n                                              op='&',\n                                              expr=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pos_temp',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='1',\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[2]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_empiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[1]=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pile_chemin_alternatif',\n                                            )\n                                          subscript=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pile_chemin_alternatif',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  exprs[2]=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pile_chemin_alternatif',\n                                            )\n                                          subscript=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pile_chemin_alternatif',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[3]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='afficher_grille_debug',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='hauteur_grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                  exprs[3]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  exprs[4]=\n                                    ID(\n                                      name='debug',\n                                    )\n                                )\n                            )\n                          block_items[4]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='pile_depiler',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='pile_chemin_alternatif',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pos_temp',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                  exprs[2]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pos_temp',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      iffalse=\n                        Break(\n                        )\n                    )\n                )\n            )\n        )\n      block_items[12]=\n        Decl(\n          name='sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='sortie',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[13]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='sortie',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='pile_solution',\n                    )\n                  subscript=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='pile_solution',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[14]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='sortie',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='pile_solution',\n                    )\n                  subscript=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='pile_solution',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[15]=\n        If(\n          cond=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_une_sortie',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='sortie',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n          iftrue=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iffalse=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.1954319179058075,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.20308510959148407,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.21579827216778955,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.21778515665646117,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.22746717929840088,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                }
            ]
        },
        {
            "function_name": "main",
            "function_code": "int main(void)\n{\n    int grille_chargee = 0;\n    char buf_nom_fichier[100];\n    int choix;\n\n    int solution;\n\n    int grille[100][100];\n    int point_entree[2];\n    int hauteur, largeur;\n    int pile_solution[100][2];\n\n    do\n    {\n        choix = selection_menu(grille_chargee);\n        if (choix == 1)\n        {\n            menu_charger_labyrinthe(buf_nom_fichier, 100);\n\n            grille_chargee = charger_labyrinthe(buf_nom_fichier, grille, point_entree,\n                               &hauteur, &largeur);\n            if (grille_chargee == 0)\n            {\n                printf(\"\\033[0;31m\");\n                printf(\"\\nErreur - (Le chargement de la grille n'a pas ete effectue, pour eviter un malfonctionnement\"\n                       \"il est conseille de quitter et de relancer le programme)\\n\\n\");\n                printf(\"\\033[0m\");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='main',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='main',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='grille_chargee',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='grille_chargee',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='buf_nom_fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='buf_nom_fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['char'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='solution',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='point_entree',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='point_entree',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n        )\n      block_items[6]=\n        Decl(\n          name='hauteur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='hauteur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='largeur',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='largeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        Decl(\n          name='pile_solution',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_solution',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='100',\n                )\n            )\n        )\n      block_items[9]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                ID(\n                  name='choix',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='choix',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='selection_menu',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='grille_chargee',\n                            )\n                        )\n                    )\n                )\n              block_items[1]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='choix',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='menu_charger_labyrinthe',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='buf_nom_fichier',\n                                )\n                              exprs[1]=\n                                Constant(\n                                  type='int',\n                                  value='100',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        Assignment(\n                          op='=',\n                          lvalue=\n                            ID(\n                              name='grille_chargee',\n                            )\n                          rvalue=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='charger_labyrinthe',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='buf_nom_fichier',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  exprs[3]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='hauteur',\n                                        )\n                                    )\n                                  exprs[4]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='largeur',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='grille_chargee',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\033[0;31m\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\nErreur - (Le chargement de la grille n\\'a pas ete effectue, pour eviter un malfonctionnementil est conseille de quitter et de relancer le programme)\\\\n\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\033[0m\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                  iffalse=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='lab_afficher_grille',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    ID(\n                                      name='grille',\n                                    )\n                                  exprs[1]=\n                                    ID(\n                                      name='hauteur',\n                                    )\n                                  exprs[2]=\n                                    ID(\n                                      name='largeur',\n                                    )\n                                  exprs[3]=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                )\n                            )\n                        )\n                      iffalse=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='3',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ID(\n                                      name='solution',\n                                    )\n                                  rvalue=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_resoudre_profondeur',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='hauteur',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='largeur',\n                                            )\n                                          exprs[3]=\n                                            ID(\n                                              name='point_entree',\n                                            )\n                                          exprs[4]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[5]=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                If(\n                                  cond=\n                                    BinaryOp(\n                                      op='==',\n                                      left=\n                                        ID(\n                                          name='solution',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  iftrue=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Le labyrinthe a ete resolu!\"',\n                                            )\n                                        )\n                                    )\n                                  iffalse=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"Le labyrinthe n\\'a pas de solution.\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='==',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='4',\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='lab_resoudre_profondeur',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            ID(\n                                              name='grille',\n                                            )\n                                          exprs[1]=\n                                            ID(\n                                              name='hauteur',\n                                            )\n                                          exprs[2]=\n                                            ID(\n                                              name='largeur',\n                                            )\n                                          exprs[3]=\n                                            ID(\n                                              name='point_entree',\n                                            )\n                                          exprs[4]=\n                                            ID(\n                                              name='pile_solution',\n                                            )\n                                          exprs[5]=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[10]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.0984543189406395,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.11971710622310638,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.12232659757137299,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.12623004615306854,
                    "project_name": "20233_02_16_Pointeurs",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int val1;\n    char val2 = 'A';\n    int val3;\n    int* adresse_val1 = &val1;\n    char* adresse_val2 = &val2;\n\n    int** ptr;\n\n    ptr = &adresse_val1;\n\n    val1 = 10;\n\n    printf(\"Valeur bizarre: %p\\n\", &val1);\n    printf(\"Contenu de adresse_val1: %p \\n\", adresse_val1);\n\n    *adresse_val1 = 50;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    **ptr = 100;\n\n    printf(\"La valeur de val1: %i\\n\", val1);\n\n    *ptr = &val3;\n\n    *adresse_val1 = 25;\n     \n    printf(\"La valeur de val3: %d\\n\", val3);\n\n    printf(\"L'adresse de val1: %p\\n\", &val1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.1396784782409668,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                }
            ]
        },
        {
            "function_name": "charger_labyrinthe",
            "function_code": "int charger_labyrinthe(char* nom_fichier, int grille[][100], int point_entree[2], int* hauteur_grille, int* largeur_grille)\n{\n\tFILE* fichier;\n\tchar caractere_lu;\n\tint i = 0,  \n\t\tj = 0;\n\tfichier = fopen(nom_fichier, \"r\");\n\tif (!fichier)\n\t{\n\t\treturn 0;\n\t}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='point_entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='point_entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='hauteur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='largeur_grille',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='fichier',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='fichier',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['FILE'],\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='caractere_lu',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='caractere_lu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['char'],\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='i',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='i',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='j',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='j',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='fichier',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='fopen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='nom_fichier',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='string',\n                      value='\"r\"',\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        If(\n          cond=\n            UnaryOp(\n              op='!',\n              expr=\n                ID(\n                  name='fichier',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='largeur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[7]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            UnaryOp(\n              op='-',\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[8]=\n        While(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  rvalue=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='getc',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='fichier',\n                            )\n                        )\n                    )\n                )\n              right=\n                ID(\n                  name='EOF',\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Switch(\n                  cond=\n                    ID(\n                      name='caractere_lu',\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'*'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[1]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"' '\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Break(\n                            )\n                        )\n                      block_items[2]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'E'\",\n                            )\n                          stmts[0]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='grille',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='i',\n                                        )\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='j',\n                                    )\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='point_entree',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                      block_items[3]=\n                        Case(\n                          expr=\n                            Constant(\n                              type='char',\n                              value=\"'\\\\n'\",\n                            )\n                          stmts[0]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='&&',\n                                  left=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        UnaryOp(\n                                          op='-',\n                                          expr=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='!=',\n                                      left=\n                                        UnaryOp(\n                                          op='*',\n                                          expr=\n                                            ID(\n                                              name='largeur_grille',\n                                            )\n                                        )\n                                      right=\n                                        ID(\n                                          name='j',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"ERREUR DE LECTURE: Les lignes du labyrinthe n\\'ont pas toutes le m\u00eame nombre de colonnes.\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    Return(\n                                      expr=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                            )\n                          stmts[1]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                UnaryOp(\n                                  op='*',\n                                  expr=\n                                    ID(\n                                      name='largeur_grille',\n                                    )\n                                )\n                              rvalue=\n                                ID(\n                                  name='j',\n                                )\n                            )\n                          stmts[2]=\n                            Assignment(\n                              op='=',\n                              lvalue=\n                                ID(\n                                  name='j',\n                                )\n                              rvalue=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          stmts[3]=\n                            UnaryOp(\n                              op='p++',\n                              expr=\n                                ID(\n                                  name='i',\n                                )\n                            )\n                          stmts[4]=\n                            Break(\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[9]=\n        Assignment(\n          op='=',\n          lvalue=\n            UnaryOp(\n              op='*',\n              expr=\n                ID(\n                  name='hauteur_grille',\n                )\n            )\n          rvalue=\n            BinaryOp(\n              op='+',\n              left=\n                ID(\n                  name='i',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='fclose',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='fichier',\n                )\n            )\n        )\n      block_items[11]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='1',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2296286576123734,
                    "project_name": "20233_02_39_Exercice_Machines",
                    "function_name": "machine_charge_machines",
                    "function_code": "t_machine_ptr* machine_charge_machines(const char* nom_fichier, int* nb_machines)\n{\n    FILE* fichier;\n\n    t_machine_ptr* tab;\n\n    fichier = fopen(nom_fichier, \"r\");\n    if(fichier == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.23024317622184753,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.25060442090034485,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.2521345913410187,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.2724516510951443,
                    "project_name": "20233_02_34_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_date date1, date2;\n    t_machine* machine1;\n    int nb_machines;\n     \n    t_machine** machines;\n\n    printf(\"Combien de machines? \");\n    scanf(\"%i\", &nb_machines);\n\n    machines = (t_machine**)malloc(sizeof(t_machine*) * nb_machines);\n    if(machines == 0)\n    {\n        printf(\"Erreur d'allocation!\\n\");\n        exit(1);\n    }"
                }
            ]
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int choix;\n\n    if (grille_chargee == 0)  \n    {\n        printf(\"------------------------- MENU -------------------------\\n\"\n               \"1. Charger une grille\\n\"\n               \"2. Afficher le labyrinthe(NON DISPONNIBLE)\\n\"\n               \"3. R\u00e9soudre le labyrinthe (NON DISPONNIBLE)\\n\"\n               \"4. R\u00e9soudre et afficher le labyrinthe (NON DISPONNIBLE)\\n\"\n               \"5. Quitter\\n\"\n               \"------------------------- MENU -------------------------\\n\\n\");\n        do\n        {\n            printf(\"Veuillez saisir votre choix: \");\n            scanf(\"%d\", &choix);\n\n             \n            if ((choix != 1) && (choix != 5))\n            {\n                printf(\"\\033[0;31m\");\n                printf(\"Erreur - (Referez-vous au menu ci-dessus pour faire votre choix)\\n\\n\");\n                printf(\"\\033[0m\");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='grille_chargee',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"------------------------- MENU -------------------------\\\\n1. Charger une grille\\\\n2. Afficher le labyrinthe(NON DISPONNIBLE)\\\\n3. R\u00e9soudre le labyrinthe (NON DISPONNIBLE)\\\\n4. R\u00e9soudre et afficher le labyrinthe (NON DISPONNIBLE)\\\\n5. Quitter\\\\n------------------------- MENU -------------------------\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                DoWhile(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='5',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Veuillez saisir votre choix: \"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='5',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\033[0;31m\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Erreur - (Referez-vous au menu ci-dessus pour faire votre choix)\\\\n\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\033[0m\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='grille_chargee',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"\\\\n\\\\n------------------------- MENU -------------------------\\\\n1. Charger une grille\\\\n2. Afficher le labyrinthe\\\\n3. R\u00e9soudre le labyrinthe\\\\n4. R\u00e9soudre et afficher le labyrinthe\\\\n5. Quitter\\\\n------------------------- MENU -------------------------\\\\n\\\\n\"',\n                            )\n                        )\n                    )\n                  block_items[1]=\n                    DoWhile(\n                      cond=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='>',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='5',\n                                )\n                            )\n                        )\n                      stmt=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Veuillez saisir votre choix: \"',\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='scanf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"%d\"',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='choix',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[2]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='||',\n                                  left=\n                                    BinaryOp(\n                                      op='<',\n                                      left=\n                                        ID(\n                                          name='choix',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='>',\n                                      left=\n                                        ID(\n                                          name='choix',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='5',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\033[0;31m\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\nErreur - (Referez-vous au menu ci-dessus pour faire votre choix)\\\\n\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[2]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\033[0m\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              iffalse=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2904411256313324,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.296317994594574,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.30581697821617126,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.3088212013244629,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.30943411588668823,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                }
            ]
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char* buf_nom_fichier, int buf_taille)\n{\n    printf(\"Saisir un nom de fichier correspondant au fichier contenant le labyrinthe \u00e0 charger:\\n\");\n     \n    scanf(\"%s\", buf_nom_fichier);\n\n    if (buf_nom_fichier == 0)\n    {\n        printf(\"Mauvaise saisie\");\n    }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Saisir un nom de fichier correspondant au fichier contenant le labyrinthe \u00e0 charger:\\\\n\"',\n                )\n            )\n        )\n      block_items[1]=\n        FuncCall(\n          name=\n            ID(\n              name='scanf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"%s\"',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n            )\n        )\n      block_items[2]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Mauvaise saisie\"',\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2646479593721211,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.27445313334465027,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.2760697305202484,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.27658685457546683,
                    "project_name": "20233_02_07_Structures_CondIfElse",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n    printf(\"Saisir une valeur entiere: \");\n    scanf(\"%i\", &saisie);\n\n    if( saisie % 2 == 0 )\n    {\n        printf(\"Le nombre est pair!\\n\");\n    }"
                },
                {
                    "distance": 0.2870210111141205,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                }
            ]
        }
    ]
}