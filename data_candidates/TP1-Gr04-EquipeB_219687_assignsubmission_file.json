{
    "project_name": "TP1-Gr04-EquipeB_219687_assignsubmission_file",
    "functions": [
        {
            "function_name": "get_add_function",
            "function_code": "int (*get_add_function())(int, int)\n{\n\treturn add;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='get_add_function',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                FuncDecl(\n                  args=\n                    ParamList(\n                      params[0]=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                      params[1]=\n                        Typename(\n                          name=None,\n                          quals=[],\n                          align=None,\n                          type=\n                            TypeDecl(\n                              declname=None,\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                        )\n                    )\n                  type=\n                    TypeDecl(\n                      declname='get_add_function',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Return(\n          expr=\n            ID(\n              name='add',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31161283988539346,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "fonction_bidon",
                    "function_code": "void fonction_bidon(int a)\n{\n    a = a * 20;\n}"
                },
                {
                    "distance": 0.3497812747955322,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3521673381328583,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.3527238368988037,
                    "project_name": "20233_02_05_Expressions_Comp",
                    "function_name": "main",
                    "function_code": "int main() {\n    int val;\n    int resultat;\n\n    val = 10;\n    resultat = (val > 0) + val /2;\n\n    printf(\"Resultat = %i\\n\", resultat);\n\n    if( val == 10)\n    {\n        printf(\"Val vaut bien 10!\\n\");\n    }"
                },
                {
                    "distance": 0.35662458361670685,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n{\n     \n    if(case1[0] == case2[0])\n    {\n         \n        if(case1[1] == (case2[1]+1) || case1[1] == (case2[1]-1))\n        {\n            return 1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case1',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='case2',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='+',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case2',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  iffalse=\n                    Compound(\n                      block_items[0]=\n                        Return(\n                          expr=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case1',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    If(\n                      cond=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='+',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case2',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      iftrue=\n                        Compound(\n                          block_items[0]=\n                            Return(\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      iffalse=\n                        Compound(\n                          block_items[0]=\n                            Return(\n                              expr=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2930094301700592,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.31309714190086263,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3201814293861389,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.32329708337783813,
                    "project_name": "20233_02_23_Tri_Tab1D",
                    "function_name": "main",
                    "function_code": "int main() {\n    int mon_tableau[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau2[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau3[] = {45, 10, 2, 28, 55, 46, 78, 32};\n\n    tri_insertion(mon_tableau, 8);\n    afficher_tab(mon_tableau, 8);\n\n    tri_selection(mon_tableau2, 8);\n    afficher_tab(mon_tableau2, 8);\n\n    tri_bulles(mon_tableau3, 8);\n    afficher_tab(mon_tableau3, 8);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.3265896102002773,
                    "project_name": "20233_02_21_Exercice_MinMaj",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int nb_minuscules, nb_majuscules;\n    char caracteres[100] = {'B', 'o', 'n', 'j', 'o', 'u', 'r', ' ', 'E', 'T', 'S'};\n\n    majuscules_minuscules(caracteres, 11, &nb_majuscules, &nb_minuscules);\n\n    printf(\"Il y a %i majuscules et %i minuscules\\n\", nb_majuscules, nb_minuscules);\n\n\n\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int choix;\n\n    if (grille_chargee == 0)  \n    {\n        printf(\"------------------------- MENU -------------------------\\n\"\n               \"1. Charger une grille\\n\"\n               \"2. Afficher le labyrinthe(NON DISPONNIBLE)\\n\"\n               \"3. R\u00e9soudre le labyrinthe (NON DISPONNIBLE)\\n\"\n               \"4. R\u00e9soudre et afficher le labyrinthe (NON DISPONNIBLE)\\n\"\n               \"5. Quitter\\n\"\n               \"------------------------- MENU -------------------------\\n\\n\");\n        do\n        {\n            printf(\"Veuillez saisir votre choix: \");\n            scanf(\"%d\", &choix);\n\n             \n            if ((choix != 1) && (choix != 5))\n            {\n                printf(\"\\033[0;31m\");\n                printf(\"Erreur - (Referez-vous au menu ci-dessus pour faire votre choix)\\n\\n\");\n                printf(\"\\033[0m\");\n            }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            BinaryOp(\n              op='==',\n              left=\n                ID(\n                  name='grille_chargee',\n                )\n              right=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"------------------------- MENU -------------------------\\\\n1. Charger une grille\\\\n2. Afficher le labyrinthe(NON DISPONNIBLE)\\\\n3. R\u00e9soudre le labyrinthe (NON DISPONNIBLE)\\\\n4. R\u00e9soudre et afficher le labyrinthe (NON DISPONNIBLE)\\\\n5. Quitter\\\\n------------------------- MENU -------------------------\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                DoWhile(\n                  cond=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='!=',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='5',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Veuillez saisir votre choix: \"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='&&',\n                              left=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                              right=\n                                BinaryOp(\n                                  op='!=',\n                                  left=\n                                    ID(\n                                      name='choix',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='5',\n                                    )\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\033[0;31m\"',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Erreur - (Referez-vous au menu ci-dessus pour faire votre choix)\\\\n\\\\n\"',\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"\\\\033[0m\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='==',\n                  left=\n                    ID(\n                      name='grille_chargee',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='printf',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            Constant(\n                              type='string',\n                              value='\"\\\\n\\\\n------------------------- MENU -------------------------\\\\n1. Charger une grille\\\\n2. Afficher le labyrinthe\\\\n3. R\u00e9soudre le labyrinthe\\\\n4. R\u00e9soudre et afficher le labyrinthe\\\\n5. Quitter\\\\n------------------------- MENU -------------------------\\\\n\\\\n\"',\n                            )\n                        )\n                    )\n                  block_items[1]=\n                    DoWhile(\n                      cond=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='<',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='>',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='5',\n                                )\n                            )\n                        )\n                      stmt=\n                        Compound(\n                          block_items[0]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='printf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"Veuillez saisir votre choix: \"',\n                                    )\n                                )\n                            )\n                          block_items[1]=\n                            FuncCall(\n                              name=\n                                ID(\n                                  name='scanf',\n                                )\n                              args=\n                                ExprList(\n                                  exprs[0]=\n                                    Constant(\n                                      type='string',\n                                      value='\"%d\"',\n                                    )\n                                  exprs[1]=\n                                    UnaryOp(\n                                      op='&',\n                                      expr=\n                                        ID(\n                                          name='choix',\n                                        )\n                                    )\n                                )\n                            )\n                          block_items[2]=\n                            If(\n                              cond=\n                                BinaryOp(\n                                  op='||',\n                                  left=\n                                    BinaryOp(\n                                      op='<',\n                                      left=\n                                        ID(\n                                          name='choix',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  right=\n                                    BinaryOp(\n                                      op='>',\n                                      left=\n                                        ID(\n                                          name='choix',\n                                        )\n                                      right=\n                                        Constant(\n                                          type='int',\n                                          value='5',\n                                        )\n                                    )\n                                )\n                              iftrue=\n                                Compound(\n                                  block_items[0]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\033[0;31m\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[1]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\nErreur - (Referez-vous au menu ci-dessus pour faire votre choix)\\\\n\\\\n\"',\n                                            )\n                                        )\n                                    )\n                                  block_items[2]=\n                                    FuncCall(\n                                      name=\n                                        ID(\n                                          name='printf',\n                                        )\n                                      args=\n                                        ExprList(\n                                          exprs[0]=\n                                            Constant(\n                                              type='string',\n                                              value='\"\\\\033[0m\"',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              iffalse=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2904411256313324,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.296317994594574,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.30581697821617126,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.3088212013244629,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "saisie_nom_prenom",
                    "function_code": "char* saisie_nom_prenom(void)\n{\n    char buffer[100];\n    char* nom_prenom;\n    char* ptr_temporaire;\n\n    nom_prenom = (char*)malloc(sizeof(char)*250);\n    if(nom_prenom == 0)\n    {\n        return 0;\n    }"
                },
                {
                    "distance": 0.30943411588668823,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(const int position[2], int grille[][100], int hauteur_grille, int largeur_grille)\n{\n     \n     \n\n    if ((position[0] == 0) || (position[0] == largeur_grille) || (position[1] == 0) || (position[1] == hauteur_grille)\n                                                                                       && (grille[position[0]][position[1]] == 0))\n        return 1;\n\n         \n    else\n        return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=['const'],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=['const'],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='100',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ID(\n                              name='largeur_grille',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ArrayRef(\n                          name=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='grille',\n                                )\n                              subscript=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='position',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                            )\n                          subscript=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='position',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iffalse=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2838035523891449,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.2929234504699707,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.299614150864349,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.3058847926590524,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.30642463437821327,
                    "project_name": "20233_02_06_operateurs_logiques",
                    "function_name": "main",
                    "function_code": "int main() {\n    int x;\n\n    x = 15;\n\n    if( 10 < x  &&  x< 20 )\n    {\n        printf(\"x est dans l'intervalle!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "test_lab_est_cases_adjacentes",
            "function_code": "int test_lab_est_cases_adjacentes(void)\n{\n     \n    int case1[] = {5,4};\n    int case2[] = {5,3};\n\n    return lab_est_cases_adjacentes(case1, case2);;\n\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='case1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='case2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='case2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='5',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='3',\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_cases_adjacentes',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='case1',\n                    )\n                  exprs[1]=\n                    ID(\n                      name='case2',\n                    )\n                )\n            )\n        )\n      block_items[3]=\n        EmptyStatement(\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.2804272174835205,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.28300678730010986,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29491063952445984,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.299258587423716,
                    "project_name": "20233_02_32_Exercice_Etudiants",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_etudiant* e1;\n\n    e1 = t_etudiant_init(\"Baggins\", \"Bilbo\");\n\n    strcpy(e1->code_perm, \"BAGB00000000\");\n    e1->intra = 75;\n    e1->finale = 86.5;\n    e1->tp1 = 80;\n    e1->tp2 = 85;\n\n    t_etudiant_afficher(e1);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.30139995245026613,
                    "project_name": "20233_02_14_Exerccie2_SommeProduit",
                    "function_name": "main",
                    "function_code": "int main(void) {\n\n    int somme;\n    double produit;\n\n    somme_produit(50, &somme, &produit);\n\n    printf(\"La somme = %i, Le produit = %.0lf\\n\", somme, produit);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "test_lab_est_une_sortie",
            "function_code": "int test_lab_est_une_sortie(void)\n{\n     \n     \n     \n     \n    int position1[2] = {0, 1};\n    int position2[2] = {1, 1};\n    int position3[2] = {1, 0};\n    int exemple_grille[4][100] = {{1, 0, 1, 1},\n                                                {1, 0, 0, 1},\n                                                {1, 0, 1, 1},\n                                                {1, 1, 1, 1}};\n\n     \n     \n    if ((lab_est_une_sortie(position1, exemple_grille, 4, 4) == 1)\n        && (lab_est_une_sortie(position2, exemple_grille, 4, 4) == 0)\n        && (lab_est_une_sortie(position3, exemple_grille, 4, 4) == 0))\n        return 1;\n\n    else\n        return 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='test_lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Typename(\n                  name=None,\n                  quals=[],\n                  align=None,\n                  type=\n                    TypeDecl(\n                      declname=None,\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['void'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='test_lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='position1',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position1',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='position2',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position2',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='position3',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position3',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n              exprs[1]=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='exemple_grille',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='exemple_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='100',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[1]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[2]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n              exprs[3]=\n                InitList(\n                  exprs[0]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[1]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[2]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                  exprs[3]=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='&&',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_est_une_sortie',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='position1',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='exemple_grille',\n                                )\n                              exprs[2]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                              exprs[3]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_est_une_sortie',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='position2',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='exemple_grille',\n                                )\n                              exprs[2]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                              exprs[3]=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_est_une_sortie',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='position3',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='exemple_grille',\n                            )\n                          exprs[2]=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                          exprs[3]=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n          iftrue=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n          iffalse=\n            Return(\n              expr=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.27079513669013977,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.2747628390789032,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2892804309082799,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.29392072558403015,
                    "project_name": "20233_02_04_expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n    int nombre_etudiants;\n    int etudiants_par_groupe;  \n    int resultat;  \n    int etudiants_orphelins;\n\n    int x;\n    int y;\n\n    nombre_etudiants = 10;\n    etudiants_par_groupe = 3;\n\n     \n     \n\n\n    resultat = nombre_etudiants / etudiants_par_groupe;\n\n    etudiants_orphelins = nombre_etudiants % etudiants_par_groupe;\n\n    printf(\"Le nombre de groupes est: %i\\n\", resultat);\n    printf(\"Et il reste %i etudiants malheureux.\\n\", etudiants_orphelins);\n\n    x = 11;\n    y = ++x / 3;\n\n    printf(\"LE contenu de x: %i\\n\", x);\n    printf(\"LE contenu de y: %i\\n\", y);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29541374395388703,
                    "project_name": "20233_02_26_String_functions",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine[100];\n    char chaine2[100];\n    char resultat[100];\n    int tab1[10] = {4, 5, 6, 8};\n    int tab2[10];\n\n\n    \n    \n    \n    \n    \n    \n    \n    strncpy(chaine, \"Bonjour \", 100);\n    printf(\"%s\\n\", chaine);\n\n    strncpy(chaine2, \"a tous\", 100);\n    strncat(chaine, \"a tous\", 100);\n\n    int nb_etudiants = 30;\n\n    sprintf(resultat,\"%s les %i etudant-es\\n\", chaine, nb_etudiants);\n\n    printf(\"Le resultat est: %s\", resultat);\n\n     \n     \n\n     \n     \n\n\n\n    return 0;\n}"
                }
            ]
        }
    ]
}