{
    "project_name": "TP1-Gr02-EquipeE_219668_assignsubmission_file",
    "functions": [
        {
            "function_name": "init_pool",
            "function_code": "void init_pool(MemoryPool *pool)\n{\n    pool->offset = 0;\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='init_pool',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='pool',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='pool',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['MemoryPool'],\n                            )\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='init_pool',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Assignment(\n          op='=',\n          lvalue=\n            StructRef(\n              type='->',\n              name=\n                ID(\n                  name='pool',\n                )\n              field=\n                ID(\n                  name='offset',\n                )\n            )\n          rvalue=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.38646670990850873,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "fonction_bidon",
                    "function_code": "void fonction_bidon(int a)\n{\n    a = a * 20;\n}"
                },
                {
                    "distance": 0.404228538274765,
                    "project_name": "20233_02_29_NomPrenom_Dynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char* personne;\n\n\n    personne = saisie_nom_prenom();\n     \n    if(personne!=0) {\n        printf(\"%s\\n\", personne);\n    }"
                },
                {
                    "distance": 0.4089558904581406,
                    "project_name": "20223_01_32_ProblemeRevision",
                    "function_name": "mesure_init",
                    "function_code": "t_mesure* mesure_init(void)\n{\n\tt_mesure* nouv_mesure; \n\n\tnouv_mesure = (t_mesure*)malloc(sizeof(t_mesure));\n\tif (nouv_mesure == 0)\n\t{\n\t\tprintf(\"Plus de memoire!\");\n\t\texit(1);\n\t}"
                },
                {
                    "distance": 0.4247411787509918,
                    "project_name": "20233_02_28_Exercice_NomPrenom",
                    "function_name": "main",
                    "function_code": "int main() {\n    int a;\n    char personne[250];\n\n    saisie_nom_prenom(personne, 250);\n    printf(\"%s\\n\", personne);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.4287768608011885,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "mettre_a_zero",
                    "function_code": "void mettre_a_zero(int tableau[], int taille)\n{\n    for(int i=0; i<taille; i++)\n    {\n        tableau[i] = 0;\n    }"
                }
            ]
        },
        {
            "function_name": "lab_resoudre_profondeur",
            "function_code": "int lab_resoudre_profondeur(int grille[][TAILLE_MAX_GRILLE], int hauteur_grille, int largeur_grille, int entree[2], int pile_solution[][2], int debug)\n{\n    int pile_chemain_alternatif[TAILLE_MAX_GRILLE][2];\n    int deplacement_possible[4][2];\n    int nombre_deplacement_possible;\n    int sortie = 0;\n\n    int *nb_deplacements;\n    int nb_deplacement_temp = 0;\n    nb_deplacements = &nb_deplacement_temp;\n\n    int top_pile;\n\n     \n    pile_initialiser(pile_solution, TAILLE_MAX_GRILLE);\n    pile_initialiser(pile_chemain_alternatif, TAILLE_MAX_GRILLE);\n\n     \n    pile_empiler(pile_solution, entree[0], entree[1]);\n    top_pile = pile_solution[0][1];\n\n    int position[2] = {pile_solution[top_pile][0], pile_solution[top_pile][1]};\n \n\n \n    while((!(lab_est_une_sortie(pile_solution[top_pile], grille, hauteur_grille, largeur_grille)) || ((pile_solution[top_pile][0] == entree[0]) && (pile_solution[top_pile][1] == entree[1]))) && (!pile_est_vide(pile_solution)))\n    {\n        top_pile = pile_solution[0][1];\n\n\n        position[0] = pile_solution[top_pile][0];\n        position[1] = pile_solution[top_pile][1];\n\n         \n\n        lab_calculer_deplacements_possibles(grille, hauteur_grille, largeur_grille, position[0], position[1],\n                                            pile_solution, nb_deplacements, deplacement_possible);\n         \n        nombre_deplacement_possible = *nb_deplacements;\n\n         \n        int le_deplacement = lab_choisir_deplacement(deplacement_possible, nombre_deplacement_possible);\n\n         \n        if (nombre_deplacement_possible == 1) {\n             \n            pile_empiler(pile_solution, deplacement_possible[le_deplacement][0],\n                         deplacement_possible[le_deplacement][1]);\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_resoudre_profondeur',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            ID(\n                              name='TAILLE_MAX_GRILLE',\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='entree',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='entree',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[4]=\n                Decl(\n                  name='pile_solution',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='pile_solution',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            Constant(\n                              type='int',\n                              value='2',\n                            )\n                        )\n                    )\n                )\n              params[5]=\n                Decl(\n                  name='debug',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='debug',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_resoudre_profondeur',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='pile_chemain_alternatif',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='pile_chemain_alternatif',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                ID(\n                  name='TAILLE_MAX_GRILLE',\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='deplacement_possible',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                ArrayDecl(\n                  dim_quals=[],\n                  type=\n                    TypeDecl(\n                      declname='deplacement_possible',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  dim=\n                    Constant(\n                      type='int',\n                      value='2',\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='4',\n                )\n            )\n        )\n      block_items[2]=\n        Decl(\n          name='nombre_deplacement_possible',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nombre_deplacement_possible',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[3]=\n        Decl(\n          name='sortie',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[4]=\n        Decl(\n          name='nb_deplacements',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            PtrDecl(\n              quals=[],\n              type=\n                TypeDecl(\n                  declname='nb_deplacements',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n            )\n        )\n      block_items[5]=\n        Decl(\n          name='nb_deplacement_temp',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='nb_deplacement_temp',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n          init=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n      block_items[6]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='nb_deplacements',\n            )\n          rvalue=\n            UnaryOp(\n              op='&',\n              expr=\n                ID(\n                  name='nb_deplacement_temp',\n                )\n            )\n        )\n      block_items[7]=\n        Decl(\n          name='top_pile',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='top_pile',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[8]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ID(\n                  name='TAILLE_MAX_GRILLE',\n                )\n            )\n        )\n      block_items[9]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_initialiser',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_chemain_alternatif',\n                )\n              exprs[1]=\n                ID(\n                  name='TAILLE_MAX_GRILLE',\n                )\n            )\n        )\n      block_items[10]=\n        FuncCall(\n          name=\n            ID(\n              name='pile_empiler',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='pile_solution',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='entree',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[11]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='top_pile',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='pile_solution',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[12]=\n        Decl(\n          name='position',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            ArrayDecl(\n              dim_quals=[],\n              type=\n                TypeDecl(\n                  declname='position',\n                  quals=[],\n                  align=None,\n                  type=\n                    IdentifierType(\n                      names=['int'],\n                    )\n                )\n              dim=\n                Constant(\n                  type='int',\n                  value='2',\n                )\n            )\n          init=\n            InitList(\n              exprs[0]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pile_solution',\n                        )\n                      subscript=\n                        ID(\n                          name='top_pile',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pile_solution',\n                        )\n                      subscript=\n                        ID(\n                          name='top_pile',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[13]=\n        While(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='||',\n                  left=\n                    UnaryOp(\n                      op='!',\n                      expr=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_est_une_sortie',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='top_pile',\n                                    )\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='&&',\n                      left=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='top_pile',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='entree',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ArrayRef(\n                              name=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='pile_solution',\n                                    )\n                                  subscript=\n                                    ID(\n                                      name='top_pile',\n                                    )\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='entree',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                )\n              right=\n                UnaryOp(\n                  op='!',\n                  expr=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='pile_est_vide',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='pile_solution',\n                            )\n                        )\n                    )\n                )\n            )\n          stmt=\n            Compound(\n              block_items[0]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='top_pile',\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='pile_solution',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[1]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='pile_solution',\n                            )\n                          subscript=\n                            ID(\n                              name='top_pile',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              block_items[2]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='position',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='pile_solution',\n                            )\n                          subscript=\n                            ID(\n                              name='top_pile',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='lab_calculer_deplacements_possibles',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        ID(\n                          name='grille',\n                        )\n                      exprs[1]=\n                        ID(\n                          name='hauteur_grille',\n                        )\n                      exprs[2]=\n                        ID(\n                          name='largeur_grille',\n                        )\n                      exprs[3]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      exprs[4]=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='position',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      exprs[5]=\n                        ID(\n                          name='pile_solution',\n                        )\n                      exprs[6]=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                      exprs[7]=\n                        ID(\n                          name='deplacement_possible',\n                        )\n                    )\n                )\n              block_items[4]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='nombre_deplacement_possible',\n                    )\n                  rvalue=\n                    UnaryOp(\n                      op='*',\n                      expr=\n                        ID(\n                          name='nb_deplacements',\n                        )\n                    )\n                )\n              block_items[5]=\n                Decl(\n                  name='le_deplacement',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='le_deplacement',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                  init=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='lab_choisir_deplacement',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            ID(\n                              name='deplacement_possible',\n                            )\n                          exprs[1]=\n                            ID(\n                              name='nombre_deplacement_possible',\n                            )\n                        )\n                    )\n                )\n              block_items[6]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='nombre_deplacement_possible',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='pile_empiler',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                              exprs[1]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacement_possible',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='le_deplacement',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              exprs[2]=\n                                ArrayRef(\n                                  name=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='deplacement_possible',\n                                        )\n                                      subscript=\n                                        ID(\n                                          name='le_deplacement',\n                                        )\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[7]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='nombre_deplacement_possible',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='le_deplacement',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[8]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='nombre_deplacement_possible',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='3',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='le_deplacement',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='3',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='3',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='le_deplacement',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='2',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='3',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='3',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='le_deplacement',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='3',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='2',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='3',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='deplacement_possible',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='3',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[9]=\n                If(\n                  cond=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='nombre_deplacement_possible',\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        If(\n                          cond=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_est_vide',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          iftrue=\n                            Compound(\n                              block_items[0]=\n                                Decl(\n                                  name='top_alternatif',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    TypeDecl(\n                                      declname='top_alternatif',\n                                      quals=[],\n                                      align=None,\n                                      type=\n                                        IdentifierType(\n                                          names=['int'],\n                                        )\n                                    )\n                                  init=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pile_chemain_alternatif',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                              block_items[1]=\n                                Decl(\n                                  name='position_alternative',\n                                  quals=[],\n                                  align=[],\n                                  storage=[],\n                                  funcspec=[],\n                                  type=\n                                    ArrayDecl(\n                                      dim_quals=[],\n                                      type=\n                                        TypeDecl(\n                                          declname='position_alternative',\n                                          quals=[],\n                                          align=None,\n                                          type=\n                                            IdentifierType(\n                                              names=['int'],\n                                            )\n                                        )\n                                      dim=\n                                        Constant(\n                                          type='int',\n                                          value='2',\n                                        )\n                                    )\n                                  init=\n                                    InitList(\n                                      exprs[0]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='pile_chemain_alternatif',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='top_alternatif',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='pile_chemain_alternatif',\n                                                )\n                                              subscript=\n                                                ID(\n                                                  name='top_alternatif',\n                                                )\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[2]=\n                                While(\n                                  cond=\n                                    UnaryOp(\n                                      op='!',\n                                      expr=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='lab_est_cases_adjacentes',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='position_alternative',\n                                                )\n                                              exprs[1]=\n                                                ID(\n                                                  name='position',\n                                                )\n                                            )\n                                        )\n                                    )\n                                  stmt=\n                                    Compound(\n                                      block_items[0]=\n                                        FuncCall(\n                                          name=\n                                            ID(\n                                              name='pile_depiler',\n                                            )\n                                          args=\n                                            ExprList(\n                                              exprs[0]=\n                                                ID(\n                                                  name='pile_solution',\n                                                )\n                                              exprs[1]=\n                                                UnaryOp(\n                                                  op='&',\n                                                  expr=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='position',\n                                                        )\n                                                      subscript=\n                                                        Constant(\n                                                          type='int',\n                                                          value='0',\n                                                        )\n                                                    )\n                                                )\n                                              exprs[2]=\n                                                UnaryOp(\n                                                  op='&',\n                                                  expr=\n                                                    ArrayRef(\n                                                      name=\n                                                        ID(\n                                                          name='position',\n                                                        )\n                                                      subscript=\n                                                        Constant(\n                                                          type='int',\n                                                          value='1',\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                      block_items[1]=\n                                        Assignment(\n                                          op='=',\n                                          lvalue=\n                                            ID(\n                                              name='top_pile',\n                                            )\n                                          rvalue=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pile_solution',\n                                                    )\n                                                  subscript=\n                                                    Constant(\n                                                      type='int',\n                                                      value='0',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                      block_items[2]=\n                                        Assignment(\n                                          op='=',\n                                          lvalue=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='position',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='0',\n                                                )\n                                            )\n                                          rvalue=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pile_solution',\n                                                    )\n                                                  subscript=\n                                                    ID(\n                                                      name='top_pile',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='0',\n                                                )\n                                            )\n                                        )\n                                      block_items[3]=\n                                        Assignment(\n                                          op='=',\n                                          lvalue=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='position',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                          rvalue=\n                                            ArrayRef(\n                                              name=\n                                                ArrayRef(\n                                                  name=\n                                                    ID(\n                                                      name='pile_solution',\n                                                    )\n                                                  subscript=\n                                                    ID(\n                                                      name='top_pile',\n                                                    )\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[3]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ID(\n                                      name='top_alternatif',\n                                    )\n                                  rvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pile_chemain_alternatif',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                              block_items[4]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='position_alternative',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                  rvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pile_chemain_alternatif',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='top_alternatif',\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='0',\n                                        )\n                                    )\n                                )\n                              block_items[5]=\n                                Assignment(\n                                  op='=',\n                                  lvalue=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='position_alternative',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  rvalue=\n                                    ArrayRef(\n                                      name=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='pile_chemain_alternatif',\n                                            )\n                                          subscript=\n                                            ID(\n                                              name='top_alternatif',\n                                            )\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                )\n                              block_items[6]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_depiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_chemain_alternatif',\n                                        )\n                                      exprs[1]=\n                                        UnaryOp(\n                                          op='&',\n                                          expr=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='position_alternative',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='0',\n                                                )\n                                            )\n                                        )\n                                      exprs[2]=\n                                        UnaryOp(\n                                          op='&',\n                                          expr=\n                                            ArrayRef(\n                                              name=\n                                                ID(\n                                                  name='position_alternative',\n                                                )\n                                              subscript=\n                                                Constant(\n                                                  type='int',\n                                                  value='1',\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                              block_items[7]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='pile_empiler',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        ID(\n                                          name='pile_solution',\n                                        )\n                                      exprs[1]=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='position_alternative',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='0',\n                                            )\n                                        )\n                                      exprs[2]=\n                                        ArrayRef(\n                                          name=\n                                            ID(\n                                              name='position_alternative',\n                                            )\n                                          subscript=\n                                            Constant(\n                                              type='int',\n                                              value='1',\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                          iffalse=\n                            Compound(\n                              block_items[0]=\n                                FuncCall(\n                                  name=\n                                    ID(\n                                      name='printf',\n                                    )\n                                  args=\n                                    ExprList(\n                                      exprs[0]=\n                                        Constant(\n                                          type='string',\n                                          value='\"Le d\u00e9placement est impossible\\\\n\"',\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n              block_items[10]=\n                Assignment(\n                  op='=',\n                  lvalue=\n                    ID(\n                      name='top_pile',\n                    )\n                  rvalue=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='pile_solution',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n              block_items[11]=\n                If(\n                  cond=\n                    ID(\n                      name='debug',\n                    )\n                  iftrue=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='lab_afficher_grille',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='grille',\n                                )\n                              exprs[1]=\n                                ID(\n                                  name='hauteur_grille',\n                                )\n                              exprs[2]=\n                                ID(\n                                  name='largeur_grille',\n                                )\n                              exprs[3]=\n                                ID(\n                                  name='pile_solution',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Press any key to continue...\\\\n\"',\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='fflush',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                ID(\n                                  name='stdin',\n                                )\n                            )\n                        )\n                      block_items[3]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='getchar',\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[14]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='top_pile',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ArrayRef(\n                  name=\n                    ID(\n                      name='pile_solution',\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[15]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\" Le labyrinthe fut compl\u00e9t\u00e9 avec brio! \\\\n\"',\n                )\n            )\n        )\n      block_items[16]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"la sortie poss\u00e8de les coordonn\u00e9es suivantes :%d, %d\\\\n\"',\n                )\n              exprs[1]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pile_solution',\n                        )\n                      subscript=\n                        ID(\n                          name='top_pile',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              exprs[2]=\n                ArrayRef(\n                  name=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pile_solution',\n                        )\n                      subscript=\n                        ID(\n                          name='top_pile',\n                        )\n                    )\n                  subscript=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n        )\n      block_items[17]=\n        Return(\n          expr=\n            FuncCall(\n              name=\n                ID(\n                  name='lab_est_une_sortie',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='pile_solution',\n                        )\n                      subscript=\n                        ID(\n                          name='top_pile',\n                        )\n                    )\n                  exprs[1]=\n                    ID(\n                      name='grille',\n                    )\n                  exprs[2]=\n                    ID(\n                      name='hauteur_grille',\n                    )\n                  exprs[3]=\n                    ID(\n                      name='largeur_grille',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.36995633547552526,
                    "project_name": "20223_01_30_EtudeDeCas",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\n\tt_client* liste_clients[1000];\n\n\tliste_clients[0] = client_init(\"345 673 123\", \"Laporte\", \"Jean\");\n\t \n\t\n\t \n\tliste_clients[0]->date_naiss.jour = 10;\n\tliste_clients[0]->date_naiss.mois = 5;\n\tliste_clients[0]->date_naiss.annee = 1562;\n\n\tliste_clients[0]->nb_comptes = 0;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tstrcpy(liste_clients[0]->comptes[0]->identifiant, \"AB5676\");\n\tliste_clients[0]->comptes[0]->solde = 2000;\n\tliste_clients[0]->comptes[0]->limite_decouvert = 1500;\n\tliste_clients[0]->comptes[0]->taux_interets = 1.5;\n\n\tclient_ajouter_compte(liste_clients[0]);\n\tliste_clients[0]->comptes[1] = compte_init();\n\tstrcpy(liste_clients[0]->comptes[1]->identifiant, \"DF6789\");\n\tliste_clients[0]->comptes[1]->solde = 150;\n\tliste_clients[0]->comptes[1]->limite_decouvert = 0;\n\tliste_clients[0]->comptes[1]->taux_interets = 0.4;\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_supprimer_compte(liste_clients[0], 0);\n\n\tclient_afficher(liste_clients[0]);\n\n\tclient_destroy(liste_clients[0]);\n\tliste_clients[0] = 0;\n\n\n\n\t \n\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.38405776023864746,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.39444175362586975,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.4034303076445632,
                    "project_name": "20223_01_26_TableauEtudiants",
                    "function_name": "etudiant_saisir",
                    "function_code": "void etudiant_saisir(t_etudiant* et)\n{\n\tprintf(\"Nom: \");\n\tfgets(et->nom, 100, stdin);\n\tet->nom[strlen(et->nom) - 1] = '\\0';\n\n\tprintf(\"Prenom: \");\n\tfgets(et->prenom, 100, stdin);\n\tet->prenom[strlen(et->prenom) - 1] = '\\0';\n\n\tprintf(\"Code Perm.: \");\n\tfgets(et->code_perm, 15, stdin);\n\tet->code_perm[strlen(et->code_perm) - 1] = '\\0';\n\n\tprintf(\"TP1: \");\n\tscanf(\"%lf\", &(et->tp1));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"TP2: \");\n\tscanf(\"%lf\", &(et->tp2));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Intra: \");\n\tscanf(\"%lf\", &(et->intra));\n\tdo{} while (getchar()!='\\n');\n\tprintf(\"Final: \");\n\tscanf(\"%lf\", &(et->finale));\n\tdo{} while (getchar()!='\\n');\n}"
                },
                {
                    "distance": 0.41198140382766724,
                    "project_name": "20223_01_27_ExerciceEnregistrements",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tt_client un_client; \n\n\tstrcpy(un_client.num_ass_sociale , \"345 673 123\");\n\tstrcpy(un_client.nom, \"Valjean\");\n\tstrcpy(un_client.prenom, \"Jean\");\n\t \n\tun_client.date_naiss.jour = 10;\n\tun_client.date_naiss.mois = 5; \n\tun_client.date_naiss.annee = 1562;\n\n\tun_client.nb_comptes = 0;\n\n\tstrcpy(un_client.comptes[0].identifiant,  \"AB5676\");\n\tun_client.comptes[0].solde = 2000;\n\tun_client.comptes[0].limite_decouvert = 1500;\n\tun_client.comptes[0].taux_interets = 1.5;\n\n\tun_client.nb_comptes++;\n\n\tstrcpy(un_client.comptes[1].identifiant, \"DF6789\");\n\tun_client.comptes[1].solde = 150;\n\tun_client.comptes[1].limite_decouvert = 0;\n\tun_client.comptes[1].taux_interets = 0.4;\n\n\tun_client.nb_comptes++; \n\n\tclient_afficher(&un_client);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                }
            ]
        },
        {
            "function_name": "lab_est_cases_adjacentes",
            "function_code": "int lab_est_cases_adjacentes(int case1[2], int case2[2])\n    {\n        if(case1[0] + 1 == case2[0] || abs(case1[0] - 1) == case2[0])\n        {\n            return 1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_cases_adjacentes',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='case1',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case1',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='case2',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='case2',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_cases_adjacentes',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        If(\n          cond=\n            BinaryOp(\n              op='||',\n              left=\n                BinaryOp(\n                  op='==',\n                  left=\n                    BinaryOp(\n                      op='+',\n                      left=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case1',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                      right=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='==',\n                  left=\n                    FuncCall(\n                      name=\n                        ID(\n                          name='abs',\n                        )\n                      args=\n                        ExprList(\n                          exprs[0]=\n                            BinaryOp(\n                              op='-',\n                              left=\n                                ArrayRef(\n                                  name=\n                                    ID(\n                                      name='case1',\n                                    )\n                                  subscript=\n                                    Constant(\n                                      type='int',\n                                      value='0',\n                                    )\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                        )\n                    )\n                  right=\n                    ArrayRef(\n                      name=\n                        ID(\n                          name='case2',\n                        )\n                      subscript=\n                        Constant(\n                          type='int',\n                          value='0',\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            If(\n              cond=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        BinaryOp(\n                          op='+',\n                          left=\n                            ArrayRef(\n                              name=\n                                ID(\n                                  name='case1',\n                                )\n                              subscript=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case2',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='abs',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ArrayRef(\n                                      name=\n                                        ID(\n                                          name='case1',\n                                        )\n                                      subscript=\n                                        Constant(\n                                          type='int',\n                                          value='1',\n                                        )\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='case2',\n                            )\n                          subscript=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n              iftrue=\n                Compound(\n                  block_items[0]=\n                    Return(\n                      expr=\n                        Constant(\n                          type='int',\n                          value='1',\n                        )\n                    )\n                )\n            )\n        )\n      block_items[1]=\n        Return(\n          expr=\n            Constant(\n              type='int',\n              value='0',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.31742337346076965,
                    "project_name": "20223_01_18_ExerciceTableaux",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tint tab[100] = {12, 15, 17, 22, 15, 11};\n\t \n\tint tab2[50] = { 0 };\n\t \n\tint tab3[] = { 10, 20 , 30 , 40, 50, 60, 70, 80 };\n\n\tint la_position; \n\n\tif ( trouver_val(tab, 6, 15, &la_position) )\n\t{\n\t\tprintf(\"La valeur a ete trouvee a la position %d\\n\", la_position);\n\t}"
                },
                {
                    "distance": 0.325252890586853,
                    "project_name": "20233_02_17_PassageParReference",
                    "function_name": "min_max_de_3",
                    "function_code": "void min_max_de_3(int val1, int val2, int val3, int* adr_pour_min, int* adr_pour_max)\n{\n    int min = val1;\n    int max = val1;\n\n    if(val2 < min){\n        min = val2;\n    }"
                },
                {
                    "distance": 0.33591043589553826,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.34512857087481796,
                    "project_name": "20233_02_21_Exercice_MinMaj",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int nb_minuscules, nb_majuscules;\n    char caracteres[100] = {'B', 'o', 'n', 'j', 'o', 'u', 'r', ' ', 'E', 'T', 'S'};\n\n    majuscules_minuscules(caracteres, 11, &nb_majuscules, &nb_minuscules);\n\n    printf(\"Il y a %i majuscules et %i minuscules\\n\", nb_majuscules, nb_minuscules);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.349778950214386,
                    "project_name": "20233_02_23_Tri_Tab1D",
                    "function_name": "main",
                    "function_code": "int main() {\n    int mon_tableau[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau2[] = {45, 10, 2, 28, 55, 46, 78, 32};\n    int mon_tableau3[] = {45, 10, 2, 28, 55, 46, 78, 32};\n\n    tri_insertion(mon_tableau, 8);\n    afficher_tab(mon_tableau, 8);\n\n    tri_selection(mon_tableau2, 8);\n    afficher_tab(mon_tableau2, 8);\n\n    tri_bulles(mon_tableau3, 8);\n    afficher_tab(mon_tableau3, 8);\n\n    return 0;\n}"
                }
            ]
        },
        {
            "function_name": "selection_menu",
            "function_code": "int selection_menu(int grille_chargee)\n{\n    int choix;\n\n     \n    if(grille_chargee)\n    {\n         \n        printf(\"****** Menu Principal ******\\n\\n\");\n        printf(\"1. Charger le labyrithe\\n\");\n        printf(\"2. Resoudre le labyrithe\\n\");\n        printf(\"3. Resoudre le labyrithe etape par etape\\n\");\n        printf(\"4. Quitter\\n\\n\");\n\n         \n        printf(\"Veuillez saisir votre choix:\");\n        scanf(\"%d\", &choix);\n        printf(\"\\n\");\n\n        while(choix < 1 || choix > 4)\n        {\n            printf(\"Saisie invalide. Veuillez faire un different choix: \");\n            scanf(\"%d\", &choix);\n            printf(\"\\n\");\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='selection_menu',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='grille_chargee',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='grille_chargee',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='selection_menu',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='choix',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='choix',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        If(\n          cond=\n            ID(\n              name='grille_chargee',\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"****** Menu Principal ******\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"1. Charger le labyrithe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2. Resoudre le labyrithe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3. Resoudre le labyrithe etape par etape\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"4. Quitter\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Veuillez saisir votre choix:\"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[7]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n              block_items[8]=\n                While(\n                  cond=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='<',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='>',\n                          left=\n                            ID(\n                              name='choix',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='4',\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Saisie invalide. Veuillez faire un different choix: \"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\n\"',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Veuillez charger votre grille.\\\\n\"',\n                        )\n                    )\n                )\n              block_items[1]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"****** Menu Principal ******\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[2]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"1. Charger le labyrithe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[3]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"2. [Indisponible] Resoudre le labyrithe\\\\n\"',\n                        )\n                    )\n                )\n              block_items[4]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"3. [Indisponible] Resoudre le labyrithe etape par etape\\\\n\"',\n                        )\n                    )\n                )\n              block_items[5]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"4. Quitter\\\\n\\\\n\"',\n                        )\n                    )\n                )\n              block_items[6]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"Veuillez saisir votre choix:\"',\n                        )\n                    )\n                )\n              block_items[7]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='scanf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"%d\"',\n                        )\n                      exprs[1]=\n                        UnaryOp(\n                          op='&',\n                          expr=\n                            ID(\n                              name='choix',\n                            )\n                        )\n                    )\n                )\n              block_items[8]=\n                FuncCall(\n                  name=\n                    ID(\n                      name='printf',\n                    )\n                  args=\n                    ExprList(\n                      exprs[0]=\n                        Constant(\n                          type='string',\n                          value='\"\\\\n\"',\n                        )\n                    )\n                )\n              block_items[9]=\n                While(\n                  cond=\n                    UnaryOp(\n                      op='!',\n                      expr=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='1',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='choix',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='4',\n                                )\n                            )\n                        )\n                    )\n                  stmt=\n                    Compound(\n                      block_items[0]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"Saisie invalide. Veuillez faire un different choix: \"',\n                                )\n                            )\n                        )\n                      block_items[1]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='scanf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"%d\"',\n                                )\n                              exprs[1]=\n                                UnaryOp(\n                                  op='&',\n                                  expr=\n                                    ID(\n                                      name='choix',\n                                    )\n                                )\n                            )\n                        )\n                      block_items[2]=\n                        FuncCall(\n                          name=\n                            ID(\n                              name='printf',\n                            )\n                          args=\n                            ExprList(\n                              exprs[0]=\n                                Constant(\n                                  type='string',\n                                  value='\"\\\\n\"',\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n      block_items[2]=\n        Return(\n          expr=\n            ID(\n              name='choix',\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.29354771971702576,
                    "project_name": "20223_01_22_Strings",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\t \n\tchar salutation[100] = \"Bonjour\";\n\tchar prenom[100];\n\tchar copie_prenom[100];\n\tchar nom[100];\n\tchar nom_et_prenom[100];\n\tchar prenom2[100];\n\n\tprintf(\"%s\\n\", salutation);\n\n\tprintf(\"Veuillez saisir votre prenom: \");\n\t \n\t \n\t \n\tfgets(prenom, 100, stdin);\n\tprenom[ strlen(prenom) - 1 ] = '\\0';\n\n\tprintf(\"Veuillez saisir votre nom: \");\n\t \n\t \n\t \n\tfgets(nom, 100, stdin);\n\tnom[strlen(nom) - 1] = '\\0';\n\n\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\n\t \n\t \n\t \n\t \n\tstrncpy(copie_prenom, prenom, 100);\n\tprintf(\"La copie du prenom: %s\\n\", copie_prenom);\n\n\tstrcpy(salutation , \"Bonsoir\");\n\tprintf(\"%s %s\\n\", salutation, prenom);\n\n\t \n\tstrcpy(nom_et_prenom, prenom);\n\tstrcat(nom_et_prenom, \" \");\n\tstrcat(nom_et_prenom, nom);\n\n\tprintf(\"Nom complet: %s\\n\", nom_et_prenom);\n\n\tprintf(\"Veuillez saisir un 2e prenom: \");\n\tfgets(prenom2, 100, stdin);\n\tprenom2[strlen(prenom2) - 1] = '\\0';\n\n\t \n\tint comparaison = strcmp(prenom, prenom2);\n\tif ( comparaison == 0 )\n\t{\n\t\tprintf(\"Les deux prenoms sont identiques!\\n\");\n\t}"
                },
                {
                    "distance": 0.29952096939086914,
                    "project_name": "20223_01_28_Allocation_Dynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint a; \n\tint* entier_alloue;\n\tint* foo;\n\tint nb_valeurs; \n\tint* copie_adresse; \n\n\t \n\n\tentier_alloue = (int*)malloc(sizeof(int));\n\t*entier_alloue = 10;\n\tprintf(\"La valeur stockee dans l'entier alloue: %d\\n\", *entier_alloue);\n\n\tprintf(\"Combien de valeurs du veux? \");\n\tscanf(\"%d\", &nb_valeurs);\n\n\tfoo = (int*)malloc(sizeof(int) * nb_valeurs);\n\t \n\tfoo[0] = 25;\n\tfoo[1] = 120;\n\tfoo[2] = 250;\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tprintf(\"contenu de la case %d: %d\\n\", i, foo[i]);\n\t}"
                },
                {
                    "distance": 0.3066162168979645,
                    "project_name": "20223_01_21_Tri_suite",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint mon_tableau1[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau2[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau3[100] = { 44, 10, 20, 55, 10, 24, 35 };\n\tint mon_tableau4[100] = { 44, 10, 20, 55, 10, 24, 35, 17 };\n\n\tprintf(\"Avant le tri: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\ttri_insertion(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri insertion: \\n\");\n\tafficher_tab(mon_tableau1, 7);\n\n\tprintf(\"Apres le tri selection: \\n\");\n\ttri_selection(mon_tableau2, 7);\n\tafficher_tab(mon_tableau2, 7);\n\n\tprintf(\"La mediane de tab3: %.2lf\\n\", mediane_tab(mon_tableau3, 7));\n\n\tprintf(\"La mediane de tab4: %.2lf\\n\", mediane_tab(mon_tableau4, 8));\n\n\ttri_insertion(mon_tableau4, 8);\n\tafficher_tab(mon_tableau4, 8);\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.3157717287540436,
                    "project_name": "20223_01_31_Tab2DDynamique",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint nb_lignes = 4; \n\tint nb_colonnes = 5;\n\n\tint** tab;  \n\n\ttab = creer_tab2d_int(4, 5);\n\n\tfor (int i = 0; i < nb_lignes; i++)\n\t{\n\t\tfor (int j = 0; j < nb_colonnes; j++)\n\t\t{\n\t\t\ttab[i][j] = i + j * 10;\n\t\t}"
                },
                {
                    "distance": 0.31630006432533264,
                    "project_name": "20223_01_34_Fichiers",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tFILE* mon_fichier; \n\tchar ligne_lue[1000];\n\n\tmon_fichier = fopen(\"fichier_texte.txt\", \"r\");\n\tif (mon_fichier == 0)\n\t{\n\t\tprintf(\"Erreur d'ouverture du fichier!\\n\");\n\t\tsystem(\"pause\");\n\t\texit(1);\n\t}"
                }
            ]
        },
        {
            "function_name": "menu_charger_labyrinthe",
            "function_code": "void menu_charger_labyrinthe(char* buf_nom_fichier, int buf_taille)\n{\n     \n    printf(\"Veuillez saisir le nom de la grille que vous souhaitez charger: \");\n    do{} while (getchar()!='\\n');\n    fgets(buf_nom_fichier, buf_taille, stdin);\n\n     \n    buf_taille = strlen(buf_nom_fichier);\n\n     \n    buf_nom_fichier[buf_taille - 1] = '\\0';\n}",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='menu_charger_labyrinthe',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='buf_nom_fichier',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    PtrDecl(\n                      quals=[],\n                      type=\n                        TypeDecl(\n                          declname='buf_nom_fichier',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['char'],\n                            )\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='buf_taille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='buf_taille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='menu_charger_labyrinthe',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['void'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        FuncCall(\n          name=\n            ID(\n              name='printf',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                Constant(\n                  type='string',\n                  value='\"Veuillez saisir le nom de la grille que vous souhaitez charger: \"',\n                )\n            )\n        )\n      block_items[1]=\n        DoWhile(\n          cond=\n            BinaryOp(\n              op='!=',\n              left=\n                FuncCall(\n                  name=\n                    ID(\n                      name='getchar',\n                    )\n                )\n              right=\n                Constant(\n                  type='char',\n                  value=\"'\\\\n'\",\n                )\n            )\n          stmt=\n            Compound(\n            )\n        )\n      block_items[2]=\n        FuncCall(\n          name=\n            ID(\n              name='fgets',\n            )\n          args=\n            ExprList(\n              exprs[0]=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              exprs[1]=\n                ID(\n                  name='buf_taille',\n                )\n              exprs[2]=\n                ID(\n                  name='stdin',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='buf_taille',\n            )\n          rvalue=\n            FuncCall(\n              name=\n                ID(\n                  name='strlen',\n                )\n              args=\n                ExprList(\n                  exprs[0]=\n                    ID(\n                      name='buf_nom_fichier',\n                    )\n                )\n            )\n        )\n      block_items[4]=\n        Assignment(\n          op='=',\n          lvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='buf_nom_fichier',\n                )\n              subscript=\n                BinaryOp(\n                  op='-',\n                  left=\n                    ID(\n                      name='buf_taille',\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          rvalue=\n            Constant(\n              type='char',\n              value=\"'\\\\0'\",\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.28526152084868817,
                    "project_name": "20223_01_05_Expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie; \n\n\tprintf(\"Saisir une valeur: \");\n\tscanf(\"%d\", &saisie);\n\n\tif (saisie == 0)\n\t{\n\t\tprintf(\"Vous avaez saisi une valeur nulle!\\n\");\n\t}"
                },
                {
                    "distance": 0.29183870553970337,
                    "project_name": "20223_01_07_BoucleDoWhile",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n\tint saisie;  \n\n\t \n\t \n\t \n\n\tdo\n\t{\n\t\tprintf(\"Veuillez saisir un nombre positif: \");\n\t\tscanf(\"%d\", &saisie);\n\t} while (saisie < 0);\n\n\t \n\n\t \n\t \n\t \n\t \n\t \n\t \n\n\t \n\tprintf(\"Merci!\\n\");\n\n\tsystem(\"pause\");\n\treturn 0;\n}"
                },
                {
                    "distance": 0.29324431623300734,
                    "project_name": "20233_02_20_TableauxFonctions",
                    "function_name": "afficher_tableau",
                    "function_code": "void afficher_tableau(int tableau[], int taille)\n{\n    for(int i=0; i< taille; i++)\n    {\n        printf(\"La case #%i contient: %i\\n\", i, tableau[i]);\n    }"
                },
                {
                    "distance": 0.2943076491355896,
                    "project_name": "20233_02_12_Exercice2_SaisiePositif_soWhile",
                    "function_name": "main",
                    "function_code": "int main(void) {\n    int saisie;\n\n     \n\n     \n\n    do\n    {\n        printf(\"Saisir un nombre positif: \");\n        scanf(\"%i\", &saisie);\n    } while( saisie <= 0 );\n\n    printf(\"La valeur saisie: %i\\n\", saisie);\n\n    return 0;\n}"
                },
                {
                    "distance": 0.29862093925476074,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                }
            ]
        },
        {
            "function_name": "lab_est_une_sortie",
            "function_code": "int lab_est_une_sortie(int position[2], int grille[][TAILLE_MAX_GRILLE], int hauteur_grille, int largeur_grille)\n    {\n        int ligne, colonne;\n\n        ligne = position[0];\n        colonne = position[1];\n\n        if (grille[ligne][colonne] != 0 && (ligne == 0 || ligne == hauteur_grille - 1 || colonne == 0 || colonne == largeur_grille - 1))\n        {\n            return 1;\n        }",
            "function_ast": "FuncDef(\n  decl=\n    Decl(\n      name='lab_est_une_sortie',\n      quals=[],\n      align=[],\n      storage=[],\n      funcspec=[],\n      type=\n        FuncDecl(\n          args=\n            ParamList(\n              params[0]=\n                Decl(\n                  name='position',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        TypeDecl(\n                          declname='position',\n                          quals=[],\n                          align=None,\n                          type=\n                            IdentifierType(\n                              names=['int'],\n                            )\n                        )\n                      dim=\n                        Constant(\n                          type='int',\n                          value='2',\n                        )\n                    )\n                )\n              params[1]=\n                Decl(\n                  name='grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    ArrayDecl(\n                      dim_quals=[],\n                      type=\n                        ArrayDecl(\n                          dim_quals=[],\n                          type=\n                            TypeDecl(\n                              declname='grille',\n                              quals=[],\n                              align=None,\n                              type=\n                                IdentifierType(\n                                  names=['int'],\n                                )\n                            )\n                          dim=\n                            ID(\n                              name='TAILLE_MAX_GRILLE',\n                            )\n                        )\n                    )\n                )\n              params[2]=\n                Decl(\n                  name='hauteur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='hauteur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n              params[3]=\n                Decl(\n                  name='largeur_grille',\n                  quals=[],\n                  align=[],\n                  storage=[],\n                  funcspec=[],\n                  type=\n                    TypeDecl(\n                      declname='largeur_grille',\n                      quals=[],\n                      align=None,\n                      type=\n                        IdentifierType(\n                          names=['int'],\n                        )\n                    )\n                )\n            )\n          type=\n            TypeDecl(\n              declname='lab_est_une_sortie',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n    )\n  body=\n    Compound(\n      block_items[0]=\n        Decl(\n          name='ligne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='ligne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[1]=\n        Decl(\n          name='colonne',\n          quals=[],\n          align=[],\n          storage=[],\n          funcspec=[],\n          type=\n            TypeDecl(\n              declname='colonne',\n              quals=[],\n              align=None,\n              type=\n                IdentifierType(\n                  names=['int'],\n                )\n            )\n        )\n      block_items[2]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='ligne',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='0',\n                )\n            )\n        )\n      block_items[3]=\n        Assignment(\n          op='=',\n          lvalue=\n            ID(\n              name='colonne',\n            )\n          rvalue=\n            ArrayRef(\n              name=\n                ID(\n                  name='position',\n                )\n              subscript=\n                Constant(\n                  type='int',\n                  value='1',\n                )\n            )\n        )\n      block_items[4]=\n        If(\n          cond=\n            BinaryOp(\n              op='&&',\n              left=\n                BinaryOp(\n                  op='!=',\n                  left=\n                    ArrayRef(\n                      name=\n                        ArrayRef(\n                          name=\n                            ID(\n                              name='grille',\n                            )\n                          subscript=\n                            ID(\n                              name='ligne',\n                            )\n                        )\n                      subscript=\n                        ID(\n                          name='colonne',\n                        )\n                    )\n                  right=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n              right=\n                BinaryOp(\n                  op='||',\n                  left=\n                    BinaryOp(\n                      op='||',\n                      left=\n                        BinaryOp(\n                          op='||',\n                          left=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='ligne',\n                                )\n                              right=\n                                Constant(\n                                  type='int',\n                                  value='0',\n                                )\n                            )\n                          right=\n                            BinaryOp(\n                              op='==',\n                              left=\n                                ID(\n                                  name='ligne',\n                                )\n                              right=\n                                BinaryOp(\n                                  op='-',\n                                  left=\n                                    ID(\n                                      name='hauteur_grille',\n                                    )\n                                  right=\n                                    Constant(\n                                      type='int',\n                                      value='1',\n                                    )\n                                )\n                            )\n                        )\n                      right=\n                        BinaryOp(\n                          op='==',\n                          left=\n                            ID(\n                              name='colonne',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='0',\n                            )\n                        )\n                    )\n                  right=\n                    BinaryOp(\n                      op='==',\n                      left=\n                        ID(\n                          name='colonne',\n                        )\n                      right=\n                        BinaryOp(\n                          op='-',\n                          left=\n                            ID(\n                              name='largeur_grille',\n                            )\n                          right=\n                            Constant(\n                              type='int',\n                              value='1',\n                            )\n                        )\n                    )\n                )\n            )\n          iftrue=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='1',\n                    )\n                )\n            )\n          iffalse=\n            Compound(\n              block_items[0]=\n                Return(\n                  expr=\n                    Constant(\n                      type='int',\n                      value='0',\n                    )\n                )\n            )\n        )\n    )\n)",
            "similar_code": [
                {
                    "distance": 0.28156813898357236,
                    "project_name": "20233_02_38_Fichiers_Ecriture",
                    "function_name": "main",
                    "function_code": "int main() {\n    FILE* mon_fichier;\n\n    double donnees[3][2] = {\n            {10, 50}, {23, 45}, {25, 78}"
                },
                {
                    "distance": 0.2862142275973282,
                    "project_name": "20233_02_35_Exercice_Machines",
                    "function_name": "main",
                    "function_code": "int main() {\n    t_machine* machines[100];\n    t_date date_seuil;\n    machine_jeu_machines(machines, 50);\n    t_machine** a_maintenir;\n    int nb_a_maintenir;\n\n \n \n \n\n    date_set_date(&date_seuil, 1, JUILLET, 2023);\n\n    a_maintenir = machines_a_maintenir(machines, 50, date_seuil, &nb_a_maintenir);\n\n    for(int i=0; i< nb_a_maintenir; i++)\n    {\n        machine_afficher(a_maintenir[i]);\n    }"
                },
                {
                    "distance": 0.289044052362442,
                    "project_name": "20233_02_04_expressions",
                    "function_name": "main",
                    "function_code": "int main(void)\n{\n    int nombre_etudiants;\n    int etudiants_par_groupe;  \n    int resultat;  \n    int etudiants_orphelins;\n\n    int x;\n    int y;\n\n    nombre_etudiants = 10;\n    etudiants_par_groupe = 3;\n\n     \n     \n\n\n    resultat = nombre_etudiants / etudiants_par_groupe;\n\n    etudiants_orphelins = nombre_etudiants % etudiants_par_groupe;\n\n    printf(\"Le nombre de groupes est: %i\\n\", resultat);\n    printf(\"Et il reste %i etudiants malheureux.\\n\", etudiants_orphelins);\n\n    x = 11;\n    y = ++x / 3;\n\n    printf(\"LE contenu de x: %i\\n\", x);\n    printf(\"LE contenu de y: %i\\n\", y);\n\n\n\n\n    return 0;\n}"
                },
                {
                    "distance": 0.291441410779953,
                    "project_name": "20233_02_25_String_Compare",
                    "function_name": "main",
                    "function_code": "int main() {\n    char chaine1[100];\n    char chaine2[100];\n\n    strcpy(chaine1, \"Bonjour\");\n    strcpy(chaine2, \"XAllo a tout le monde!\");\n\n    if(strcmp(chaine1, chaine2) == 0 )\n    {\n        printf(\"Les chaines sont identiques!\\n\");\n    }"
                },
                {
                    "distance": 0.2944290374428633,
                    "project_name": "20233_02_27_AlloDynamique",
                    "function_name": "main",
                    "function_code": "int main() {\n\n    int* entier_dynamique;\n\n    entier_dynamique = (int*)malloc( sizeof(int) );\n    if(entier_dynamique == 0){ \n        printf(\"Plus de memoire...\\n\");\n         \n        exit(1);\n    }"
                }
            ]
        }
    ]
}